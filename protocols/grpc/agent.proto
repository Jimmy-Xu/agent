//
// Copyright 2017 HyperHQ Inc.
//
// SPDX-License-Identifier: Apache-2.0
//

syntax = "proto3";

package grpc;

import "oci.proto";
import "github.com/kata-containers/agent/pkg/types/types.proto";
import "google/protobuf/empty.proto";

// unstable
service AgentService {
	// execution
	rpc CreateContainer(CreateContainerRequest) returns (google.protobuf.Empty);
	rpc StartContainer(StartContainerRequest) returns (google.protobuf.Empty);

	// RemoveContainer will tear down an existing container by forcibly terminating
	// all processes running inside that container and releasing all internal
	// resources associated with it.
	// RemoveContainer will wait for all processes termination before returning.
	// If any process can not be killed or if it can not be killed after
	// the RemoveContainerRequest timeout, RemoveContainer will return an error.
	rpc RemoveContainer(RemoveContainerRequest) returns (google.protobuf.Empty);
	rpc ExecProcess(ExecProcessRequest) returns (google.protobuf.Empty);
	rpc SignalProcess(SignalProcessRequest) returns (google.protobuf.Empty);
	rpc WaitProcess(WaitProcessRequest) returns (WaitProcessResponse); // wait & reap like waitpid(2)
	rpc ListProcesses(ListProcessesRequest) returns (ListProcessesResponse);
	rpc UpdateContainer(UpdateContainerRequest) returns (google.protobuf.Empty);
	rpc StatsContainer(StatsContainerRequest) returns (StatsContainerResponse);
	rpc PauseContainer(PauseContainerRequest) returns (google.protobuf.Empty);
	rpc ResumeContainer(ResumeContainerRequest) returns (google.protobuf.Empty);

	// stdio
	rpc WriteStdin(WriteStreamRequest) returns (WriteStreamResponse);
	rpc ReadStdout(ReadStreamRequest) returns (ReadStreamResponse);
	rpc ReadStderr(ReadStreamRequest) returns (ReadStreamResponse);
	rpc CloseStdin(CloseStdinRequest) returns (google.protobuf.Empty);
	rpc TtyWinResize(TtyWinResizeRequest) returns (google.protobuf.Empty);

	// networking
	rpc UpdateInterface(UpdateInterfaceRequest) returns (types.Interface);
	rpc UpdateRoutes(UpdateRoutesRequest) returns (Routes);
	rpc ListInterfaces(ListInterfacesRequest) returns(Interfaces);
	rpc ListRoutes(ListRoutesRequest) returns (Routes);

	// tracing
	rpc StartTracing(StartTracingRequest) returns (google.protobuf.Empty);
	rpc StopTracing(StopTracingRequest) returns (google.protobuf.Empty);

	// misc (TODO: some rpcs can be replaced by hyperstart-exec)
	rpc CreateSandbox(CreateSandboxRequest) returns (google.protobuf.Empty);
	rpc DestroySandbox(DestroySandboxRequest) returns (google.protobuf.Empty);
	rpc OnlineCPUMem(OnlineCPUMemRequest) returns (google.protobuf.Empty);
	rpc ReseedRandomDev(ReseedRandomDevRequest) returns (google.protobuf.Empty);
	rpc GetGuestDetails(GuestDetailsRequest) returns (GuestDetailsResponse);
	rpc MemHotplugByProbe(MemHotplugByProbeRequest) returns (google.protobuf.Empty);
	rpc SetGuestDateTime(SetGuestDateTimeRequest) returns (google.protobuf.Empty);
	rpc CopyFile(CopyFileRequest) returns (google.protobuf.Empty);
	rpc ExtendedStats(ExtendedStatsRequest) returns(ExtendedStatsResponse);
}

message CreateContainerRequest {
	string container_id = 1;
	string exec_id = 2;
	StringUser string_user = 3;
	repeated Device devices = 4;
	repeated Storage storages = 5;
	Spec OCI = 6;

	// This field is used to indicate if the container needs to join
	// sandbox shared pid ns or create a new namespace. This field is
	// meant to override the NEWPID config settings in the OCI spec.
	// The agent would receive an OCI spec with PID namespace cleared
	// out altogether and not just the pid ns path.
	bool sandbox_pidns = 7;
}

message StartContainerRequest {
	string container_id = 1;
}

message RemoveContainerRequest {
	string container_id = 1;

	// RemoveContainer will return an error if
	// it could not kill some container processes
	// after timeout seconds.
	// Setting timeout to 0 means RemoveContainer will
	// wait for ever.
	uint32 timeout = 2;
}

message ExecProcessRequest {
	string container_id = 1;
	string exec_id = 2;
	StringUser string_user = 3;
	Process process = 4;
}

message SignalProcessRequest {
	string container_id = 1;

	// Special case for SignalProcess(): exec_id can be empty(""),
	// which means to send the signal to all the processes including their descendants.
	// Other APIs with exec_id should treat empty exec_id as an invalid request.
	string exec_id = 2;
	uint32 signal = 3;
}

message WaitProcessRequest {
	string container_id = 1;
	string exec_id = 2;
}

message WaitProcessResponse {
	int32 status = 1;
}

// ListProcessesRequest contains the options used to list running processes inside the container
message ListProcessesRequest {
	string container_id = 1;
	string format = 2;
	repeated string args = 3;
}

// ListProcessesResponse represents the list of running processes inside the container
message ListProcessesResponse {
	bytes process_list = 1;
}

message UpdateContainerRequest {
	string container_id = 1;
	LinuxResources resources = 2;
}

message StatsContainerRequest {
    string container_id = 1;
}

message PauseContainerRequest {
    string container_id = 1;
}

message ResumeContainerRequest {
    string container_id = 1;
}

message CpuUsage {
	uint64 total_usage = 1;
	repeated uint64 percpu_usage = 2;
	uint64 usage_in_kernelmode = 3;
	uint64 usage_in_usermode = 4;
}

message ThrottlingData {
	uint64 periods = 1;
	uint64 throttled_periods = 2;
	uint64 throttled_time = 3;
}

message CpuStats {
	CpuUsage cpu_usage = 1;
	ThrottlingData throttling_data = 2;
}

message PidsStats {
	uint64 current = 1;
	uint64 limit = 2;
}

message MemoryData {
	uint64 usage = 1;
	uint64 max_usage = 2;
	uint64 failcnt = 3;
	uint64 limit = 4;
}

message MemoryStats {
	uint64 cache = 1;
	MemoryData usage = 2;
	MemoryData swap_usage = 3;
	MemoryData kernel_usage = 4;
	bool use_hierarchy = 5;
	map<string, uint64> stats = 6;
}


message BlkioStatsEntry {
	uint64 major = 1;
	uint64 minor = 2;
	string op = 3;
	uint64 value = 4;
}

message BlkioStats {
	repeated BlkioStatsEntry io_service_bytes_recursive = 1; // number of bytes transferred to and from the block device
	repeated BlkioStatsEntry io_serviced_recursive = 2;
	repeated BlkioStatsEntry io_queued_recursive = 3;
	repeated BlkioStatsEntry io_service_time_recursive = 4;
	repeated BlkioStatsEntry io_wait_time_recursive = 5;
	repeated BlkioStatsEntry io_merged_recursive = 6;
	repeated BlkioStatsEntry io_time_recursive = 7;
	repeated BlkioStatsEntry sectors_recursive = 8;
}

message HugetlbStats {
	uint64 usage = 1;
	uint64 max_usage = 2;
	uint64 failcnt = 3;
}

message CgroupStats {
    CpuStats cpu_stats = 1;
    MemoryStats memory_stats  = 2;
    PidsStats pids_stats = 3;
    BlkioStats blkio_stats = 4;
    map<string, HugetlbStats> hugetlb_stats = 5; // the map is in the format "size of hugepage: stats of the hugepage"

}

message NetworkStats {
	string name = 1;
	uint64 rx_bytes = 2;
	uint64 rx_packets = 3;
	uint64 rx_errors  = 4;
	uint64 rx_dropped = 5;
	uint64 tx_bytes = 6;
	uint64 tx_packets = 7;
	uint64 tx_errors = 8;
	uint64 tx_dropped = 9;
}

message StatsContainerResponse {
	CgroupStats cgroup_stats = 1;
	repeated NetworkStats network_stats = 2;
}

message WriteStreamRequest {
	string container_id = 1;
	string exec_id = 2;
	bytes data = 3;
}

message WriteStreamResponse {
	uint32 len = 1;
}

message ReadStreamRequest {
	string container_id = 1;
	string exec_id = 2;
	uint32 len = 3;
}

message ReadStreamResponse {
	bytes data = 1;
}

message CloseStdinRequest {
	string container_id = 1;
	string exec_id = 2;
}

message TtyWinResizeRequest {
	string container_id = 1;
	string exec_id = 2;
	uint32 row = 3;
	uint32 column = 4;
}

message KernelModule {
	// This field is the name of the kernel module.
	string name = 1;
	// This field are the parameters for the kernel module which are
	// whitespace-delimited key=value pairs passed to modprobe(8).
	repeated string parameters = 2;
}

message CreateSandboxRequest {
	string hostname = 1;
	repeated string dns = 2;
	repeated Storage storages = 3;

	// This field means that a pause process needs to be created by the
	// agent. This pid namespace of the pause process will be treated as
	// a shared pid namespace. All containers created will join this shared
	// pid namespace.
	bool sandbox_pidns = 4;
	// SandboxId identifies which sandbox is using the agent. We allow only
	// one sandbox per agent and implicitly require that CreateSandbox is
	// called before other sandbox/network calls.
	string sandbox_id = 5;
	// This field, if non-empty, designates an absolute path to a directory
	// that the agent will search for OCI hooks to run within the guest.
	string guest_hook_path = 6;
	// This field is the list of kernel modules to be loaded in the guest kernel.
	repeated KernelModule kernel_modules = 7;
}

message DestroySandboxRequest {
}

message Interfaces {
	repeated types.Interface Interfaces = 1;
}

message Routes {
	repeated types.Route Routes = 1;
}

message UpdateInterfaceRequest {
	types.Interface interface = 1;
}

message UpdateRoutesRequest {
	Routes routes = 1;
}

message ListInterfacesRequest {
}

message ListRoutesRequest {
}

message OnlineCPUMemRequest {
	// Wait specifies if the caller waits for the agent to online all resources.
	// If true the agent returns once all resources have been connected, otherwise all
	// resources are connected asynchronously and the agent returns immediately.
	bool wait = 1;

	// NbCpus specifies the number of CPUs that were added and the agent has to online.
	uint32 nb_cpus = 2;

	// CpuOnly specifies whether only online CPU or not.
	bool cpu_only = 3;
}

message ReseedRandomDevRequest {
	// Data specifies the random data used to reseed the guest crng.
	bytes data = 2;
}

// AgentDetails provides information to the client about the running agent.
message AgentDetails {
	// Semantic version of agent (see https://semver.org).
	string version = 1;

	// Set if the agent is running as PID 1.
	bool init_daemon = 2;

	// List of available device handlers.
	repeated string device_handlers = 3;

	// List of available storage handlers.
	repeated string storage_handlers = 4;

	// Set only if the agent is built with seccomp support and the guest
	// environment supports seccomp.
	bool supports_seccomp = 5;
}

message GuestDetailsRequest {
	// MemBlockSize asks server to return the system memory block size that can be used
	// for memory hotplug alignment. Typically the server returns what's in
	// /sys/devices/system/memory/block_size_bytes.
	bool mem_block_size = 1;

	// MemoryHotplugProbe asks server to return whether guest kernel supports memory hotplug
        // via probeinterface. Typically the server will check if the path
        // /sys/devices/system/memory/probe exists.
	bool mem_hotplug_probe = 2;
}

message GuestDetailsResponse {
	// MemBlockSizeBytes returns the system memory block size in bytes.
	uint64 mem_block_size_bytes = 1;

	AgentDetails agent_details = 2;

	bool support_mem_hotplug_probe = 3;
}

message MemHotplugByProbeRequest {
	// server needs to send the value of memHotplugProbeAddr into file /sys/devices/system/memory/probe,
	// in order to notify the guest kernel about hot-add memory event
	repeated uint64 memHotplugProbeAddr = 1;
}

message SetGuestDateTimeRequest {
	// Sec the second since the Epoch.
	int64 Sec = 1;
	// Usec the microseconds portion of time since the Epoch.
	int64 Usec = 2;
}

// Storage represents both the rootfs of the container, and any volume that
// could have been defined through the Mount list of the OCI specification.
message Storage {
	// Driver is used to define the way the storage is passed through the
	// virtual machine. It can be "9p", "blk", or something else, but for
	// all cases, this will define if some extra steps are required before
	// this storage gets mounted into the container.
	string driver = 1;
	// DriverOptions allows the caller to define a list of options such
	// as block sizes, numbers of luns, ... which are very specific to
	// every device and cannot be generalized through extra fields.
	repeated string driver_options = 2;
	// Source can be anything representing the source of the storage. This
	// will be handled by the proper handler based on the Driver used.
	// For instance, it can be a very simple path if the caller knows the
	// name of device inside the VM, or it can be some sort of identifier
	// to let the agent find the device inside the VM.
	string source = 3;
	// Fstype represents the filesystem that needs to be used to mount the
	// storage inside the VM. For instance, it could be "xfs" for block
	// device, "9p" for shared filesystem, or "tmpfs" for shared /dev/shm.
	string fstype = 4;
	// Options describes the additional options that might be needed to
	// mount properly the storage filesytem.
	repeated string options = 5;
	// MountPoint refers to the path where the storage should be mounted
	// inside the VM.
	string mount_point = 6;
}

// Device represents only the devices that could have been defined through the
// Linux Device list of the OCI specification.
message Device {
	// Id can be used to identify the device inside the VM. Some devices
	// might not need it to be identified on the VM, and will rely on the
	// provided VmPath instead.
	string id = 1;
	// Type defines the type of device described. This can be "blk",
	// "scsi", "vfio", ...
	// Particularly, this should be used to trigger the use of the
	// appropriate device handler.
	string type = 2;
	// VmPath can be used by the caller to provide directly the path of
	// the device as it will appear inside the VM. For some devices, the
	// device id or the list of options passed might not be enough to find
	// the device. In those cases, the caller should predict and provide
	// this vm_path.
	string vm_path = 3;
	// ContainerPath defines the path where the device should be found inside
	// the container. This path should match the path of the device from
	// the device list listed inside the OCI spec. This is used in order
	// to identify the right device in the spec and update it with the
	// right options such as major/minor numbers as they appear inside
	// the VM for instance. Note that an empty ctr_path should be used
	// to make sure the device handler inside the agent is called, but
	// no spec update needs to be performed. This has to happen for the
	// case of rootfs, when a device has to be waited for after it has
	// been hotplugged. An equivalent Storage entry should be defined if
	// any mount needs to be performed afterwards.
	string container_path = 4;
	// Options allows the caller to define a list of options such as block
	// sizes, numbers of luns, ... which are very specific to every device
	// and cannot be generalized through extra fields.
	repeated string options = 5;
}

message StringUser {
	string uid = 1;
	string gid = 2;
	repeated string additionalGids = 3;
}

message CopyFileRequest {
	// Path is the destination file in the guest. It must be absolute,
	// canonical and below /run.
	string path = 1;
	// FileSize is the expected file size, for security reasons write operations
	// are made in a temporary file, once it has the expected size, it's moved
	// to the destination path.
	int64 file_size = 2;
	// FileMode is the file mode.
	uint32 file_mode = 3;
	// DirMode is the mode for the parent directories of destination path.
	uint32 dir_mode = 4;
	// Uid is the numeric user id.
	int32 uid = 5;
	// Gid is the numeric group id.
	int32 gid = 6;
	// Offset for the next write operation.
	int64 offset = 7;
	// Data to write in the destination file.
	bytes data = 8;
}

message StartTracingRequest {
}

message StopTracingRequest {
}

message ExtendedStatsRequest {
}

message ExtendedStatsResponse {
	PodStats pod_stats = 1;
	repeated ContainerStats con_stats = 2;
}

message PodStats{
	PodBuddyStats buddy = 1;
	repeated PodCpuStats cpu_stats = 2; // per cpu
	repeated PodIOStats io_stats = 3;
	repeated PodIrqStats irq_stats = 4;
	PodLoadStats load_stats = 5;
	PodMemStats mem_stats = 6;
	PodMemxStats memx_stats = 7;
	repeated PodPartitionStats part_stats = 8;
	PodPcswStats pcsw_stats = 9;
	repeated PodPercpuStats percpu_stats = 10;
	repeated PodPercpuSchedStats percpu_sched_stats = 11;
	PodSoftirqStats softirq_stats = 12;
	PodSwapStats swap_stats = 13;
	PodTcpStats tcp_stats = 14;
	PodTcpxStats tcpx_stats = 15;
	PodTrafficStats traffic_stats = 16;
	PodUdpStats udp_stats = 17;
	PodVmstatStats vmstat_stats = 18;
	PodGpuInfo gpu_info = 19;
}

message PodBuddyStats {
	int32 order0 = 1;
	int32 order1 = 2;
	int32 order2 = 3;
	int32 order3 = 4;
	int32 order4 = 5;
	int32 order5 = 6;
	int32 order6 = 7;
	int32 order7 = 8;
	int32 order8 = 9;
	int32 order9 = 10;
	int32 order10 = 11;
}

message PodCpuStats {
	uint64 cpu_user = 1;
	uint64 cpu_nice = 2;
	uint64 cpu_sys = 3;
	uint64 cpu_idle = 4;
	uint64 cpu_iowait = 5;
	uint64 cpu_steal = 6;
	uint64 cpu_hardirq = 7;
	uint64 cpu_softirq = 8;
	uint64 cpu_guest = 9;
	uint64 cpu_number = 10;
}

message PodIOStats {
	PartInfo part = 1;
	BlkIOInfo blkio = 2;
}

message PartInfo {
	uint32 major = 1;
	uint32 minor = 2;
	string name = 3;
}

message BlkIOInfo {
	uint64 rd_ios = 1;
	uint64 rd_merges = 2;
	uint64 rd_sectors = 3;
	uint64 wr_ios = 4;
	uint64 wr_merges = 5;
	uint64 wr_sectors = 6;
	uint64 wr_ticks = 7;
	uint64 ticks = 8;
	uint64 aveq = 9;
}

message PodIrqStats {
	uint32 irq_num = 1;
	repeated uint64 irq_count = 2;
}

message PodLoadStats {
	uint64 nr_running = 1;
	uint32 load_avg_1 = 2;
	uint32 load_avg_5 = 3;
	uint32 load_avg_15 = 4;
	uint32 running_load_avg_1 = 5;
	uint32 running_load_avg_5 = 6;
	uint32 running_load_avg_15 = 7;
	uint32 nr_threads = 8;
}

message PodMemStats {
	uint64 frmkb = 1;
	uint64 avmkb = 2;
	uint64 bufkb = 3;
	uint64 camkb = 4;
	uint64 tlmkb = 5;
	uint64 comkb = 6;
	uint64 rsskb = 7;
}

message PodMemxStats {
	uint64 afile = 1;
	uint64 ifile = 2;
	uint64 aanon = 3;
	uint64 ianon = 4;
	uint64 dirty = 5;
	uint64 writeback = 6;
	uint64 rslab = 7;
	uint64 uslab = 8;
	uint64 mpfile = 9;
	uint64 shmem = 10;
}

message PodPartitionStats {
	int32 bsize = 1;
	uint64 blocks = 2;
	uint64 bfree = 3;
	uint64 bavail = 4;
	uint64 itotal = 5;
	uint64 ifree = 6;
}

message PodPcswStats {
	uint64 context_switch = 1;
	uint64 newtask = 2;
	uint64 curtask = 3;
	uint64 Rtsk = 4;
	uint64 Dtsk = 5;
	uint64 maxpid = 6;
}

message PodPercpuStats {
	uint64 cpu_user = 1;
	uint64 cpu_nice = 2;
	uint64 cpu_sys = 3;
	uint64 cpu_idle = 4;
	uint64 cpu_iowait = 5;
	uint64 cpu_steal = 6;
	uint64 cpu_hardirq = 7;
	uint64 cpu_softirq = 8;
	uint64 cpu_guest = 9;
	uint64 cpu_time = 10;
	uint64 cpu_rundelay = 11;
	uint64 cpu_pcount = 12;
	string name = 13;
}

message PodPercpuSchedStats {
	uint64 sched_yield = 1;
	uint64 sched_expr = 2;
	uint64 sched = 3;
	uint64 sched_idle = 4;
	uint32 sched_idle_percent = 5;
	uint64 ttwu = 6;
	uint64 ttwu_local = 7;
	uint32 ttwu_local_percent = 8;
	uint64 cputime = 9;
	uint64 rundelay = 10;
	uint64 slice_cnt = 11;
	uint32 avg_cputime = 12;
	uint32 avg_rundelay = 13;
	string name = 14;
}

message PodSoftirqStats {
	uint64 timer = 1;
	uint64 nettx = 2;
	uint64 netrx = 3;
	uint64 block = 4;
	uint64 sched = 5;
	uint64 hrtim = 6;
	uint64 rcu = 7;
}

message PodSwapStats {
	uint64 pswpin = 1;
	uint64 pswpout = 2;
	uint64 swaptotal = 3;
	uint64 swapfree = 4;
}

message PodTcpStats {
	uint64 active_opens = 1;
	uint64 passive_opens = 2;
	uint64 in_segs = 3;
	uint64 out_segs = 4;
	uint64 attempt_fails = 5;
	uint64 estab_resets = 6;
	uint64 curr_estab = 7;
	uint64 retrans_segs = 8;
	uint64 in_errs = 9;
	uint64 out_rsts = 10;
}

message PodTcpxStats {
	uint64 tcprevq = 1;
	uint64 tcpsendq = 2;
	uint64 tcpest = 3;
	uint64 tcptimewait = 4;
	uint64 tcpfinwait1 = 5;
	uint64 tcpfinwait2 = 6;
	uint64 tcplistenq = 7;
	uint64 tcplistenincq = 8;
	uint64 tcplistenover = 9;
	uint64 tcpconnest = 10;
	uint64 tcpconndrop = 11;
	uint64 tcpmbdrop = 12;
	uint64 tcprexmitdrop = 13;
	uint64 tcppersistdrop = 14;
	uint64 tcpkadrop = 15;
}

message PodTrafficStats {
	uint64 bytein = 1;
	uint64 byteout = 2;
	uint64 pktin = 3;
	uint64 pktout = 4;
	uint64 pkterrin = 5;
	uint64 pktdrpin = 6;
	uint64 pkterrout = 7;
	uint64 pktdrpout = 8;
}

message PodUdpStats {
	uint64 in_datagrams = 1;
	uint64 out_datagrams = 2;
	uint64 no_ports = 3;
	uint64 in_errors = 4;
}

message PodVmstatStats {
	uint64 pgin = 1;
	uint64 pgout = 2;
	uint64 pgfault = 3;
	uint64 dirtied = 4;
	uint64 allocno = 5;
	uint64 cmpfail = 6;
	uint64 cmpsucc = 7;
	uint64 failcnt = 8;
	uint64 scan = 9;
	uint64 steal = 10;
	uint64 dsteal = 11;
	uint64 vmeff = 12;
}

message PodGpuInfo {
	GStat stat = 1;
	GMem st_mem = 2;
	repeated uint64 uuid = 3;
	GConfigInfo config = 4;
	GOtherInfo info = 5;
}

message GStat {
	uint64 util = 1;
	uint64 mem_util = 2;
	uint64 nr_data = 3;
}

message GMem {
	uint64 used = 1;
	uint64 free = 2;
	uint64 total = 3;
}

message GConfigInfo {
	string name = 1;
	string vbios_version = 2;
	string driver_version = 3;
	uint64 mode = 4; //mode flags and 3 bytes reserved
	bytes compute_mode = 5;
	bytes pstate = 6;
	uint64 power_limit = 7;
	uint64 sm_max_clocks = 8;
	uint64 mem_max_blocks = 9;
}

message GOtherInfo {
	uint64 sm_clocks = 1;
	uint64 mem_clocks = 2;
	uint64 power_draw = 3;
	uint64 temperature = 4;
}

message ContainerStats {
	ContainerBaseStats base_stats = 1;
	repeated ProcessStats proc_stats = 2;
}

message ContainerBaseStats {
	string container_id = 1;
	ContainerCgroupCpu cgroup_cpu = 2;
	ContainerCgroupCpushare cgroup_cpushare = 3;
	repeated ContainerCgroupIO cgroup_io = 4;
	repeated ContainerCgroupIOTime cgroup_iotime = 5;
	repeated ContainerCgroupIOX cgroup_iox = 6;
	ContainerCgroupLoad cgroup_load = 7;
	ContainerCgroupMem cgroup_mem = 8;
	ContainerCgroupMemDelay cgroup_memdelay = 9;
	ContainerCgroupLatencyStat cgroup_latency_stat = 10; // may be repeated or have three CgroupLatencyStat for direct_{compation,reclaim,throttle}_latency seperately.
	ContainerCgroupMemx cgroup_memx = 11;
	ContainerCgroupPcsw cgroup_pcsw = 12;
	ContainerCgroupPercpu cgroup_percpu = 13;
	ContainerCgroupSchedbvt cgroup_schedbvt = 14;
	ContainerCgroupSchedcg cgroup_schedcg = 15;
	ContainerCgroupSchedTask cgroup_task = 16;
	ContainerCgroupTcpStats cgroup_tcp_stats = 17;
	ContainerCgroupTcpxStats cgroup_tcpx_stats = 18;
	ContainerCgroupTrafficStats cgroup_traffic_stats = 19; // Consider how to gather the statistics
	ContainerCgroupUdpStats cgroup_udp_stats = 20;
	ContainerCgroupVm cgroup_vm = 21;
	ContainerPartitionStats partition_stats = 22;
}

message ContainerCgroupCpu {
	uint64 user =1;
	uint64 sys = 2;
	uint64 nice = 3;
	uint64 iowait = 4;
	uint64 idle = 5;
	uint64 hirq = 6;
	uint64 sirq = 7;
	uint64 steal = 8;
	uint64 total_time = 9;
	uint64 period = 10;
	uint64 quota = 11;
	uint64 ncpu = 12;
	uint64 jdk_max_process_limit = 13;
	uint64 shares = 14;
	uint64 ori_steal = 15;
}

message ContainerCgroupCpushare {
	uint64 nr_throttled = 1;
	uint64 nr_period = 2;
	uint64 period_time = 3;
	uint64 throttle_time = 4;
	uint64 os_serve = 5;
	uint64 on_cpu = 6;
	uint64 g_other = 7;
	uint64 g_sibling = 8;
}

message ContainerCgroupIO {
	uint64 rio = 1;
	uint64 wio = 2;
	uint64 rbytes = 3;
	uint64 wbytes = 4;
	uint64 io_queued = 5;
	uint64 wait_time = 6;
	uint64 service_time = 7;
	int32 major = 8;
	int32 minor = 9;
}

message ContainerCgroupIOTime {
	uint64 read_service_time = 1;
	uint64 write_service_time = 2;
	uint64 read_wait_time =3;
	uint64 write_wait_time = 4;
	uint64 sync_service_time =5;
	uint64 async_service_time = 6;
	uint64 sync_wait_time = 7;
	uint64 async_wait_time = 8;
	uint64 io_read_complete = 9;
	uint64 io_write_compelte = 10;
	uint64 io_sync_complete = 11;
	uint64 io_async_complete = 12;
	int32 major = 13;
	int32 minor = 14;
}

message ContainerCgroupIOX {
	uint64 sio =1;
	uint64 asio = 2;
	uint64 syncbytes = 3;
	uint64 asyncbytes = 4;
	uint64 meta_writes = 5;
	uint64 io_up = 6;
	uint64 io_down = 7;
	int32 major = 8;
	int32 minor = 9;
}

message ContainerCgroupLoad {
	uint64 load1 = 1;
	uint64 load5 = 2;
	uint64 load15 = 3;
	uint64 r_load1 = 4;
	uint64 r_load5 = 5;
	uint64 r_load15 = 6;
}

message ContainerCgroupMem {
	uint64 total = 1;
	uint64 rss = 2;
	uint64 cache = 3;
	uint64 avail = 4;
	uint64 slab = 5;
	uint64 swap =6;
	uint64 map = 7;
}

message ContainerCgroupMemDelay {
	uint64 aggregate_direct = 1;
	uint64 aggregate_backgroud = 2;
	uint64 aggregate_total = 3;
	uint64 mds_some_load1 = 4;
	uint64 mds_some_load5 = 5;
	uint64 mds_some_load15 = 6;
	uint64 mds_full_load1 = 7;
	uint64 mds_full_load5 = 8;
	uint64 mds_full_load15 = 9;
	repeated uint64 delay_data = 10;
	uint64 wait_if = 11;
	uint64 wb_wait = 12;
	uint64 wait_on_page_wb = 13;
}

message ContainerCgroupLatencyStat {
	repeated uint64 ticks = 1;
}

message ContainerCgroupMemx {
	uint64 aanon = 1;
	uint64 ianon = 2;
	uint64 afile = 3;
	uint64 ifile = 4;
	uint64 mpfile = 5;
	uint64 dirty = 6;
	uint64 wback = 7;
	uint64 slab = 8;
	uint64 lock = 9;
	uint64 rss = 10;
	uint64 huge = 11;
	uint64 swap = 12;
}

message ContainerCgroupPcsw {
	uint64 n_tasks = 1;
	uint64 n_running = 2;
	uint64 n_drunning = 3;
	uint64 n_swch = 4;
	uint64 new_task = 5;
	uint64 max_pid = 6;
	uint64 nr_vol_swch = 7;
	uint64 nr_invol_swch = 8;
}

message ContainerCgroupPercpu {
	int32 ncpu = 1;
	repeated ContainerPercpuStats percpu_stats = 2;
}

message ContainerPercpuStats {
	uint64 cpu_user = 1;
	uint64 cpu_sys = 2;
	uint64 cpu_usage = 3;
	string cpu_name = 4;
}

message ContainerCgroupSchedbvt {
	uint64 batch_delay_strict = 1;
	uint64 strict_noise_clean_batch = 2;
	uint64 batch_noise_clean_delayed = 3;
	uint64 ncpu = 4;
}

message ContainerCgroupSchedcg {
	repeated uint64 cg_delay_ms = 1;
}

message ContainerCgroupSchedTask {
	repeated uint64 tasks_delay_ms = 1;
}

message ContainerCgroupTcpStats {
	uint64 active_opens = 1;
	uint64 passive_opens = 2;
	uint64 in_segs = 3;
	uint64 out_segs = 4;
	uint64 attempt_fails = 5;
	uint64 estab_resets = 6;
	uint64 curr_estab = 7;
	uint64 retrans_segs = 8;
	uint64 in_errs = 9;
	uint64 out_rsts = 10;
}

message ContainerCgroupTcpxStats {
	uint64 tcp_lost_retrans = 1;
	uint64 tcp_syn_retrans = 2;
	uint64 tcp_fast_retrans = 3;
	uint64 tcp_forward_retrans = 4;
	uint64 tcp_slowstart_retrans = 5;
	uint64 tcp_listen_overflow = 6;
	uint64 tcp_listen_drop = 7;
	uint64 tcp_abort_data = 8;
	uint64 tcp_abort_close = 9;
	uint64 tcp_abort_mem = 10;
	uint64 tcp_abort_timeout = 11;
	uint64 tcp_abort_linger = 12;
}

message ContainerCgroupTrafficStats {
	uint64 bytein = 1;
	uint64 byteout = 2;
	uint64 pktin = 3;
	uint64 pktout = 4;
	uint64 pkterrin = 5;
	uint64 pktdrpin = 6;
	uint64 pkterrout = 7;
	uint64 pktdrpout = 8;
}

message ContainerCgroupUdpStats {
	uint64 in_datagrams = 1;
	uint64 out_datagrams = 2;
	uint64 no_ports = 3;
	uint64 in_errors = 4;
}

message ContainerCgroupVm {
	uint64 page_in = 1;
	uint64 page_out = 2;
	uint64 page_fault = 3;
	uint64 steal = 4;
	uint64 dsteal = 5;
	uint64 scan = 6;
	uint64 dirty = 7;
	uint64 failcnt = 8;
	uint64 allocstall = 9;
}

message ContainerPartitionStats {
	int32 bsize = 1;
	uint64 blocks = 2;
	uint64 bfree = 3;
	uint64 bavail = 4;
	uint64 itotal = 5;
	uint64 ifree = 6;
}

message ProcessStats {
	int32 pid = 1;
	ProcessPidStats pid_stats = 2;
	ProcessCgroupSched cgroup_sched = 3;
	ProcessProcCpuStats proc_cpu_stats = 4;
	ProcessProcIOStats proc_io_stats = 5;
	ProcessProcMemStats proc_mem_stats = 6;
	// There is still per process gpu info need here
	// not sure how yet.
}

message ProcessPidStats {
	uint64 user_cpu = 1;
	uint64 sys_cpu = 2;
	uint64 mem = 3;
	uint64 read_bytes = 4;
	uint64 write_bytes = 5;
	uint64 fdcnt = 6;
	uint64 minflt = 7;
	uint64 majflt = 8;
	uint64 thread = 9;
}

message ProcessCgroupSched {
	repeated uint64 tasks_delay_ms = 1;
	uint64 bvt_delay = 2;
	uint64 noise_kick_delay = 3;
	uint64 loss_time = 4;
}

message ProcessProcCpuStats {
	uint64 user_cpu = 1;
	uint64 sys_cpu = 2;
	uint64 blkio_delay = 3;
	uint64 run_on_cpu = 4;
	uint64 wait_on_rq = 5;
	uint64 n_threads = 6;
}

message ProcessProcIOStats {
	uint64 rchar = 1;
	uint64 wchar = 2;
	uint64 rbytes = 3;
	uint64 wbytes = 4;
	uint64 iolat = 5;
	uint64 syscr = 6;
	uint64 syscw = 7;
}

message ProcessProcMemStats {
	uint64 usage = 1;
	uint64 cache = 2;
	uint64 anon = 3;
	uint64 shmem = 4;
	uint64 lock = 5;
	uint64 swp = 6;
	uint64 total_swp = 7;
}
