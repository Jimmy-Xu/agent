// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: agent.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types1 "github.com/gogo/protobuf/types"
	types "github.com/kata-containers/agent/pkg/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreateContainerRequest struct {
	ContainerId string      `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ExecId      string      `protobuf:"bytes,2,opt,name=exec_id,json=execId,proto3" json:"exec_id,omitempty"`
	StringUser  *StringUser `protobuf:"bytes,3,opt,name=string_user,json=stringUser,proto3" json:"string_user,omitempty"`
	Devices     []*Device   `protobuf:"bytes,4,rep,name=devices,proto3" json:"devices,omitempty"`
	Storages    []*Storage  `protobuf:"bytes,5,rep,name=storages,proto3" json:"storages,omitempty"`
	OCI         *Spec       `protobuf:"bytes,6,opt,name=OCI,proto3" json:"OCI,omitempty"`
	// This field is used to indicate if the container needs to join
	// sandbox shared pid ns or create a new namespace. This field is
	// meant to override the NEWPID config settings in the OCI spec.
	// The agent would receive an OCI spec with PID namespace cleared
	// out altogether and not just the pid ns path.
	SandboxPidns         bool     `protobuf:"varint,7,opt,name=sandbox_pidns,json=sandboxPidns,proto3" json:"sandbox_pidns,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateContainerRequest) Reset()         { *m = CreateContainerRequest{} }
func (m *CreateContainerRequest) String() string { return proto.CompactTextString(m) }
func (*CreateContainerRequest) ProtoMessage()    {}
func (*CreateContainerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{0}
}
func (m *CreateContainerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateContainerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateContainerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateContainerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateContainerRequest.Merge(m, src)
}
func (m *CreateContainerRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateContainerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateContainerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateContainerRequest proto.InternalMessageInfo

func (m *CreateContainerRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *CreateContainerRequest) GetExecId() string {
	if m != nil {
		return m.ExecId
	}
	return ""
}

func (m *CreateContainerRequest) GetStringUser() *StringUser {
	if m != nil {
		return m.StringUser
	}
	return nil
}

func (m *CreateContainerRequest) GetDevices() []*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *CreateContainerRequest) GetStorages() []*Storage {
	if m != nil {
		return m.Storages
	}
	return nil
}

func (m *CreateContainerRequest) GetOCI() *Spec {
	if m != nil {
		return m.OCI
	}
	return nil
}

func (m *CreateContainerRequest) GetSandboxPidns() bool {
	if m != nil {
		return m.SandboxPidns
	}
	return false
}

type StartContainerRequest struct {
	ContainerId          string   `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartContainerRequest) Reset()         { *m = StartContainerRequest{} }
func (m *StartContainerRequest) String() string { return proto.CompactTextString(m) }
func (*StartContainerRequest) ProtoMessage()    {}
func (*StartContainerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{1}
}
func (m *StartContainerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartContainerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartContainerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartContainerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartContainerRequest.Merge(m, src)
}
func (m *StartContainerRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartContainerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartContainerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartContainerRequest proto.InternalMessageInfo

func (m *StartContainerRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

type RemoveContainerRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	// RemoveContainer will return an error if
	// it could not kill some container processes
	// after timeout seconds.
	// Setting timeout to 0 means RemoveContainer will
	// wait for ever.
	Timeout              uint32   `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveContainerRequest) Reset()         { *m = RemoveContainerRequest{} }
func (m *RemoveContainerRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveContainerRequest) ProtoMessage()    {}
func (*RemoveContainerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{2}
}
func (m *RemoveContainerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveContainerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveContainerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveContainerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveContainerRequest.Merge(m, src)
}
func (m *RemoveContainerRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveContainerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveContainerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveContainerRequest proto.InternalMessageInfo

func (m *RemoveContainerRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *RemoveContainerRequest) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type ExecProcessRequest struct {
	ContainerId          string      `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ExecId               string      `protobuf:"bytes,2,opt,name=exec_id,json=execId,proto3" json:"exec_id,omitempty"`
	StringUser           *StringUser `protobuf:"bytes,3,opt,name=string_user,json=stringUser,proto3" json:"string_user,omitempty"`
	Process              *Process    `protobuf:"bytes,4,opt,name=process,proto3" json:"process,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ExecProcessRequest) Reset()         { *m = ExecProcessRequest{} }
func (m *ExecProcessRequest) String() string { return proto.CompactTextString(m) }
func (*ExecProcessRequest) ProtoMessage()    {}
func (*ExecProcessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{3}
}
func (m *ExecProcessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecProcessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecProcessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecProcessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecProcessRequest.Merge(m, src)
}
func (m *ExecProcessRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExecProcessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecProcessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecProcessRequest proto.InternalMessageInfo

func (m *ExecProcessRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *ExecProcessRequest) GetExecId() string {
	if m != nil {
		return m.ExecId
	}
	return ""
}

func (m *ExecProcessRequest) GetStringUser() *StringUser {
	if m != nil {
		return m.StringUser
	}
	return nil
}

func (m *ExecProcessRequest) GetProcess() *Process {
	if m != nil {
		return m.Process
	}
	return nil
}

type SignalProcessRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	// Special case for SignalProcess(): exec_id can be empty(""),
	// which means to send the signal to all the processes including their descendants.
	// Other APIs with exec_id should treat empty exec_id as an invalid request.
	ExecId               string   `protobuf:"bytes,2,opt,name=exec_id,json=execId,proto3" json:"exec_id,omitempty"`
	Signal               uint32   `protobuf:"varint,3,opt,name=signal,proto3" json:"signal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignalProcessRequest) Reset()         { *m = SignalProcessRequest{} }
func (m *SignalProcessRequest) String() string { return proto.CompactTextString(m) }
func (*SignalProcessRequest) ProtoMessage()    {}
func (*SignalProcessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{4}
}
func (m *SignalProcessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignalProcessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignalProcessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignalProcessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalProcessRequest.Merge(m, src)
}
func (m *SignalProcessRequest) XXX_Size() int {
	return m.Size()
}
func (m *SignalProcessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalProcessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignalProcessRequest proto.InternalMessageInfo

func (m *SignalProcessRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *SignalProcessRequest) GetExecId() string {
	if m != nil {
		return m.ExecId
	}
	return ""
}

func (m *SignalProcessRequest) GetSignal() uint32 {
	if m != nil {
		return m.Signal
	}
	return 0
}

type WaitProcessRequest struct {
	ContainerId          string   `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ExecId               string   `protobuf:"bytes,2,opt,name=exec_id,json=execId,proto3" json:"exec_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WaitProcessRequest) Reset()         { *m = WaitProcessRequest{} }
func (m *WaitProcessRequest) String() string { return proto.CompactTextString(m) }
func (*WaitProcessRequest) ProtoMessage()    {}
func (*WaitProcessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{5}
}
func (m *WaitProcessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WaitProcessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WaitProcessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WaitProcessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitProcessRequest.Merge(m, src)
}
func (m *WaitProcessRequest) XXX_Size() int {
	return m.Size()
}
func (m *WaitProcessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitProcessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WaitProcessRequest proto.InternalMessageInfo

func (m *WaitProcessRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *WaitProcessRequest) GetExecId() string {
	if m != nil {
		return m.ExecId
	}
	return ""
}

type WaitProcessResponse struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WaitProcessResponse) Reset()         { *m = WaitProcessResponse{} }
func (m *WaitProcessResponse) String() string { return proto.CompactTextString(m) }
func (*WaitProcessResponse) ProtoMessage()    {}
func (*WaitProcessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{6}
}
func (m *WaitProcessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WaitProcessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WaitProcessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WaitProcessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitProcessResponse.Merge(m, src)
}
func (m *WaitProcessResponse) XXX_Size() int {
	return m.Size()
}
func (m *WaitProcessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitProcessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WaitProcessResponse proto.InternalMessageInfo

func (m *WaitProcessResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

// ListProcessesRequest contains the options used to list running processes inside the container
type ListProcessesRequest struct {
	ContainerId          string   `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Format               string   `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	Args                 []string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListProcessesRequest) Reset()         { *m = ListProcessesRequest{} }
func (m *ListProcessesRequest) String() string { return proto.CompactTextString(m) }
func (*ListProcessesRequest) ProtoMessage()    {}
func (*ListProcessesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{7}
}
func (m *ListProcessesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListProcessesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListProcessesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListProcessesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProcessesRequest.Merge(m, src)
}
func (m *ListProcessesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListProcessesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProcessesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListProcessesRequest proto.InternalMessageInfo

func (m *ListProcessesRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *ListProcessesRequest) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *ListProcessesRequest) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

// ListProcessesResponse represents the list of running processes inside the container
type ListProcessesResponse struct {
	ProcessList          []byte   `protobuf:"bytes,1,opt,name=process_list,json=processList,proto3" json:"process_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListProcessesResponse) Reset()         { *m = ListProcessesResponse{} }
func (m *ListProcessesResponse) String() string { return proto.CompactTextString(m) }
func (*ListProcessesResponse) ProtoMessage()    {}
func (*ListProcessesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{8}
}
func (m *ListProcessesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListProcessesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListProcessesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListProcessesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProcessesResponse.Merge(m, src)
}
func (m *ListProcessesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListProcessesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProcessesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListProcessesResponse proto.InternalMessageInfo

func (m *ListProcessesResponse) GetProcessList() []byte {
	if m != nil {
		return m.ProcessList
	}
	return nil
}

type UpdateContainerRequest struct {
	ContainerId          string          `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Resources            *LinuxResources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UpdateContainerRequest) Reset()         { *m = UpdateContainerRequest{} }
func (m *UpdateContainerRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateContainerRequest) ProtoMessage()    {}
func (*UpdateContainerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{9}
}
func (m *UpdateContainerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateContainerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateContainerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateContainerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateContainerRequest.Merge(m, src)
}
func (m *UpdateContainerRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateContainerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateContainerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateContainerRequest proto.InternalMessageInfo

func (m *UpdateContainerRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *UpdateContainerRequest) GetResources() *LinuxResources {
	if m != nil {
		return m.Resources
	}
	return nil
}

type StatsContainerRequest struct {
	ContainerId          string   `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatsContainerRequest) Reset()         { *m = StatsContainerRequest{} }
func (m *StatsContainerRequest) String() string { return proto.CompactTextString(m) }
func (*StatsContainerRequest) ProtoMessage()    {}
func (*StatsContainerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{10}
}
func (m *StatsContainerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatsContainerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatsContainerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatsContainerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsContainerRequest.Merge(m, src)
}
func (m *StatsContainerRequest) XXX_Size() int {
	return m.Size()
}
func (m *StatsContainerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsContainerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatsContainerRequest proto.InternalMessageInfo

func (m *StatsContainerRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

type PauseContainerRequest struct {
	ContainerId          string   `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PauseContainerRequest) Reset()         { *m = PauseContainerRequest{} }
func (m *PauseContainerRequest) String() string { return proto.CompactTextString(m) }
func (*PauseContainerRequest) ProtoMessage()    {}
func (*PauseContainerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{11}
}
func (m *PauseContainerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PauseContainerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PauseContainerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PauseContainerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PauseContainerRequest.Merge(m, src)
}
func (m *PauseContainerRequest) XXX_Size() int {
	return m.Size()
}
func (m *PauseContainerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PauseContainerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PauseContainerRequest proto.InternalMessageInfo

func (m *PauseContainerRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

type ResumeContainerRequest struct {
	ContainerId          string   `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResumeContainerRequest) Reset()         { *m = ResumeContainerRequest{} }
func (m *ResumeContainerRequest) String() string { return proto.CompactTextString(m) }
func (*ResumeContainerRequest) ProtoMessage()    {}
func (*ResumeContainerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{12}
}
func (m *ResumeContainerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResumeContainerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResumeContainerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResumeContainerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResumeContainerRequest.Merge(m, src)
}
func (m *ResumeContainerRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResumeContainerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResumeContainerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResumeContainerRequest proto.InternalMessageInfo

func (m *ResumeContainerRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

type CpuUsage struct {
	TotalUsage           uint64   `protobuf:"varint,1,opt,name=total_usage,json=totalUsage,proto3" json:"total_usage,omitempty"`
	PercpuUsage          []uint64 `protobuf:"varint,2,rep,packed,name=percpu_usage,json=percpuUsage,proto3" json:"percpu_usage,omitempty"`
	UsageInKernelmode    uint64   `protobuf:"varint,3,opt,name=usage_in_kernelmode,json=usageInKernelmode,proto3" json:"usage_in_kernelmode,omitempty"`
	UsageInUsermode      uint64   `protobuf:"varint,4,opt,name=usage_in_usermode,json=usageInUsermode,proto3" json:"usage_in_usermode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CpuUsage) Reset()         { *m = CpuUsage{} }
func (m *CpuUsage) String() string { return proto.CompactTextString(m) }
func (*CpuUsage) ProtoMessage()    {}
func (*CpuUsage) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{13}
}
func (m *CpuUsage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CpuUsage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CpuUsage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CpuUsage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CpuUsage.Merge(m, src)
}
func (m *CpuUsage) XXX_Size() int {
	return m.Size()
}
func (m *CpuUsage) XXX_DiscardUnknown() {
	xxx_messageInfo_CpuUsage.DiscardUnknown(m)
}

var xxx_messageInfo_CpuUsage proto.InternalMessageInfo

func (m *CpuUsage) GetTotalUsage() uint64 {
	if m != nil {
		return m.TotalUsage
	}
	return 0
}

func (m *CpuUsage) GetPercpuUsage() []uint64 {
	if m != nil {
		return m.PercpuUsage
	}
	return nil
}

func (m *CpuUsage) GetUsageInKernelmode() uint64 {
	if m != nil {
		return m.UsageInKernelmode
	}
	return 0
}

func (m *CpuUsage) GetUsageInUsermode() uint64 {
	if m != nil {
		return m.UsageInUsermode
	}
	return 0
}

type ThrottlingData struct {
	Periods              uint64   `protobuf:"varint,1,opt,name=periods,proto3" json:"periods,omitempty"`
	ThrottledPeriods     uint64   `protobuf:"varint,2,opt,name=throttled_periods,json=throttledPeriods,proto3" json:"throttled_periods,omitempty"`
	ThrottledTime        uint64   `protobuf:"varint,3,opt,name=throttled_time,json=throttledTime,proto3" json:"throttled_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ThrottlingData) Reset()         { *m = ThrottlingData{} }
func (m *ThrottlingData) String() string { return proto.CompactTextString(m) }
func (*ThrottlingData) ProtoMessage()    {}
func (*ThrottlingData) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{14}
}
func (m *ThrottlingData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThrottlingData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThrottlingData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThrottlingData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThrottlingData.Merge(m, src)
}
func (m *ThrottlingData) XXX_Size() int {
	return m.Size()
}
func (m *ThrottlingData) XXX_DiscardUnknown() {
	xxx_messageInfo_ThrottlingData.DiscardUnknown(m)
}

var xxx_messageInfo_ThrottlingData proto.InternalMessageInfo

func (m *ThrottlingData) GetPeriods() uint64 {
	if m != nil {
		return m.Periods
	}
	return 0
}

func (m *ThrottlingData) GetThrottledPeriods() uint64 {
	if m != nil {
		return m.ThrottledPeriods
	}
	return 0
}

func (m *ThrottlingData) GetThrottledTime() uint64 {
	if m != nil {
		return m.ThrottledTime
	}
	return 0
}

type CpuStats struct {
	CpuUsage             *CpuUsage       `protobuf:"bytes,1,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	ThrottlingData       *ThrottlingData `protobuf:"bytes,2,opt,name=throttling_data,json=throttlingData,proto3" json:"throttling_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CpuStats) Reset()         { *m = CpuStats{} }
func (m *CpuStats) String() string { return proto.CompactTextString(m) }
func (*CpuStats) ProtoMessage()    {}
func (*CpuStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{15}
}
func (m *CpuStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CpuStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CpuStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CpuStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CpuStats.Merge(m, src)
}
func (m *CpuStats) XXX_Size() int {
	return m.Size()
}
func (m *CpuStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CpuStats.DiscardUnknown(m)
}

var xxx_messageInfo_CpuStats proto.InternalMessageInfo

func (m *CpuStats) GetCpuUsage() *CpuUsage {
	if m != nil {
		return m.CpuUsage
	}
	return nil
}

func (m *CpuStats) GetThrottlingData() *ThrottlingData {
	if m != nil {
		return m.ThrottlingData
	}
	return nil
}

type PidsStats struct {
	Current              uint64   `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Limit                uint64   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PidsStats) Reset()         { *m = PidsStats{} }
func (m *PidsStats) String() string { return proto.CompactTextString(m) }
func (*PidsStats) ProtoMessage()    {}
func (*PidsStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{16}
}
func (m *PidsStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PidsStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PidsStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PidsStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PidsStats.Merge(m, src)
}
func (m *PidsStats) XXX_Size() int {
	return m.Size()
}
func (m *PidsStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PidsStats.DiscardUnknown(m)
}

var xxx_messageInfo_PidsStats proto.InternalMessageInfo

func (m *PidsStats) GetCurrent() uint64 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *PidsStats) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type MemoryData struct {
	Usage                uint64   `protobuf:"varint,1,opt,name=usage,proto3" json:"usage,omitempty"`
	MaxUsage             uint64   `protobuf:"varint,2,opt,name=max_usage,json=maxUsage,proto3" json:"max_usage,omitempty"`
	Failcnt              uint64   `protobuf:"varint,3,opt,name=failcnt,proto3" json:"failcnt,omitempty"`
	Limit                uint64   `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MemoryData) Reset()         { *m = MemoryData{} }
func (m *MemoryData) String() string { return proto.CompactTextString(m) }
func (*MemoryData) ProtoMessage()    {}
func (*MemoryData) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{17}
}
func (m *MemoryData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemoryData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemoryData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemoryData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemoryData.Merge(m, src)
}
func (m *MemoryData) XXX_Size() int {
	return m.Size()
}
func (m *MemoryData) XXX_DiscardUnknown() {
	xxx_messageInfo_MemoryData.DiscardUnknown(m)
}

var xxx_messageInfo_MemoryData proto.InternalMessageInfo

func (m *MemoryData) GetUsage() uint64 {
	if m != nil {
		return m.Usage
	}
	return 0
}

func (m *MemoryData) GetMaxUsage() uint64 {
	if m != nil {
		return m.MaxUsage
	}
	return 0
}

func (m *MemoryData) GetFailcnt() uint64 {
	if m != nil {
		return m.Failcnt
	}
	return 0
}

func (m *MemoryData) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type MemoryStats struct {
	Cache                uint64            `protobuf:"varint,1,opt,name=cache,proto3" json:"cache,omitempty"`
	Usage                *MemoryData       `protobuf:"bytes,2,opt,name=usage,proto3" json:"usage,omitempty"`
	SwapUsage            *MemoryData       `protobuf:"bytes,3,opt,name=swap_usage,json=swapUsage,proto3" json:"swap_usage,omitempty"`
	KernelUsage          *MemoryData       `protobuf:"bytes,4,opt,name=kernel_usage,json=kernelUsage,proto3" json:"kernel_usage,omitempty"`
	UseHierarchy         bool              `protobuf:"varint,5,opt,name=use_hierarchy,json=useHierarchy,proto3" json:"use_hierarchy,omitempty"`
	Stats                map[string]uint64 `protobuf:"bytes,6,rep,name=stats,proto3" json:"stats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MemoryStats) Reset()         { *m = MemoryStats{} }
func (m *MemoryStats) String() string { return proto.CompactTextString(m) }
func (*MemoryStats) ProtoMessage()    {}
func (*MemoryStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{18}
}
func (m *MemoryStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemoryStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemoryStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemoryStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemoryStats.Merge(m, src)
}
func (m *MemoryStats) XXX_Size() int {
	return m.Size()
}
func (m *MemoryStats) XXX_DiscardUnknown() {
	xxx_messageInfo_MemoryStats.DiscardUnknown(m)
}

var xxx_messageInfo_MemoryStats proto.InternalMessageInfo

func (m *MemoryStats) GetCache() uint64 {
	if m != nil {
		return m.Cache
	}
	return 0
}

func (m *MemoryStats) GetUsage() *MemoryData {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *MemoryStats) GetSwapUsage() *MemoryData {
	if m != nil {
		return m.SwapUsage
	}
	return nil
}

func (m *MemoryStats) GetKernelUsage() *MemoryData {
	if m != nil {
		return m.KernelUsage
	}
	return nil
}

func (m *MemoryStats) GetUseHierarchy() bool {
	if m != nil {
		return m.UseHierarchy
	}
	return false
}

func (m *MemoryStats) GetStats() map[string]uint64 {
	if m != nil {
		return m.Stats
	}
	return nil
}

type BlkioStatsEntry struct {
	Major                uint64   `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`
	Minor                uint64   `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
	Op                   string   `protobuf:"bytes,3,opt,name=op,proto3" json:"op,omitempty"`
	Value                uint64   `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlkioStatsEntry) Reset()         { *m = BlkioStatsEntry{} }
func (m *BlkioStatsEntry) String() string { return proto.CompactTextString(m) }
func (*BlkioStatsEntry) ProtoMessage()    {}
func (*BlkioStatsEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{19}
}
func (m *BlkioStatsEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlkioStatsEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlkioStatsEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlkioStatsEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlkioStatsEntry.Merge(m, src)
}
func (m *BlkioStatsEntry) XXX_Size() int {
	return m.Size()
}
func (m *BlkioStatsEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_BlkioStatsEntry.DiscardUnknown(m)
}

var xxx_messageInfo_BlkioStatsEntry proto.InternalMessageInfo

func (m *BlkioStatsEntry) GetMajor() uint64 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *BlkioStatsEntry) GetMinor() uint64 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func (m *BlkioStatsEntry) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *BlkioStatsEntry) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type BlkioStats struct {
	IoServiceBytesRecursive []*BlkioStatsEntry `protobuf:"bytes,1,rep,name=io_service_bytes_recursive,json=ioServiceBytesRecursive,proto3" json:"io_service_bytes_recursive,omitempty"`
	IoServicedRecursive     []*BlkioStatsEntry `protobuf:"bytes,2,rep,name=io_serviced_recursive,json=ioServicedRecursive,proto3" json:"io_serviced_recursive,omitempty"`
	IoQueuedRecursive       []*BlkioStatsEntry `protobuf:"bytes,3,rep,name=io_queued_recursive,json=ioQueuedRecursive,proto3" json:"io_queued_recursive,omitempty"`
	IoServiceTimeRecursive  []*BlkioStatsEntry `protobuf:"bytes,4,rep,name=io_service_time_recursive,json=ioServiceTimeRecursive,proto3" json:"io_service_time_recursive,omitempty"`
	IoWaitTimeRecursive     []*BlkioStatsEntry `protobuf:"bytes,5,rep,name=io_wait_time_recursive,json=ioWaitTimeRecursive,proto3" json:"io_wait_time_recursive,omitempty"`
	IoMergedRecursive       []*BlkioStatsEntry `protobuf:"bytes,6,rep,name=io_merged_recursive,json=ioMergedRecursive,proto3" json:"io_merged_recursive,omitempty"`
	IoTimeRecursive         []*BlkioStatsEntry `protobuf:"bytes,7,rep,name=io_time_recursive,json=ioTimeRecursive,proto3" json:"io_time_recursive,omitempty"`
	SectorsRecursive        []*BlkioStatsEntry `protobuf:"bytes,8,rep,name=sectors_recursive,json=sectorsRecursive,proto3" json:"sectors_recursive,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}           `json:"-"`
	XXX_unrecognized        []byte             `json:"-"`
	XXX_sizecache           int32              `json:"-"`
}

func (m *BlkioStats) Reset()         { *m = BlkioStats{} }
func (m *BlkioStats) String() string { return proto.CompactTextString(m) }
func (*BlkioStats) ProtoMessage()    {}
func (*BlkioStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{20}
}
func (m *BlkioStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlkioStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlkioStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlkioStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlkioStats.Merge(m, src)
}
func (m *BlkioStats) XXX_Size() int {
	return m.Size()
}
func (m *BlkioStats) XXX_DiscardUnknown() {
	xxx_messageInfo_BlkioStats.DiscardUnknown(m)
}

var xxx_messageInfo_BlkioStats proto.InternalMessageInfo

func (m *BlkioStats) GetIoServiceBytesRecursive() []*BlkioStatsEntry {
	if m != nil {
		return m.IoServiceBytesRecursive
	}
	return nil
}

func (m *BlkioStats) GetIoServicedRecursive() []*BlkioStatsEntry {
	if m != nil {
		return m.IoServicedRecursive
	}
	return nil
}

func (m *BlkioStats) GetIoQueuedRecursive() []*BlkioStatsEntry {
	if m != nil {
		return m.IoQueuedRecursive
	}
	return nil
}

func (m *BlkioStats) GetIoServiceTimeRecursive() []*BlkioStatsEntry {
	if m != nil {
		return m.IoServiceTimeRecursive
	}
	return nil
}

func (m *BlkioStats) GetIoWaitTimeRecursive() []*BlkioStatsEntry {
	if m != nil {
		return m.IoWaitTimeRecursive
	}
	return nil
}

func (m *BlkioStats) GetIoMergedRecursive() []*BlkioStatsEntry {
	if m != nil {
		return m.IoMergedRecursive
	}
	return nil
}

func (m *BlkioStats) GetIoTimeRecursive() []*BlkioStatsEntry {
	if m != nil {
		return m.IoTimeRecursive
	}
	return nil
}

func (m *BlkioStats) GetSectorsRecursive() []*BlkioStatsEntry {
	if m != nil {
		return m.SectorsRecursive
	}
	return nil
}

type HugetlbStats struct {
	Usage                uint64   `protobuf:"varint,1,opt,name=usage,proto3" json:"usage,omitempty"`
	MaxUsage             uint64   `protobuf:"varint,2,opt,name=max_usage,json=maxUsage,proto3" json:"max_usage,omitempty"`
	Failcnt              uint64   `protobuf:"varint,3,opt,name=failcnt,proto3" json:"failcnt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HugetlbStats) Reset()         { *m = HugetlbStats{} }
func (m *HugetlbStats) String() string { return proto.CompactTextString(m) }
func (*HugetlbStats) ProtoMessage()    {}
func (*HugetlbStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{21}
}
func (m *HugetlbStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HugetlbStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HugetlbStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HugetlbStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HugetlbStats.Merge(m, src)
}
func (m *HugetlbStats) XXX_Size() int {
	return m.Size()
}
func (m *HugetlbStats) XXX_DiscardUnknown() {
	xxx_messageInfo_HugetlbStats.DiscardUnknown(m)
}

var xxx_messageInfo_HugetlbStats proto.InternalMessageInfo

func (m *HugetlbStats) GetUsage() uint64 {
	if m != nil {
		return m.Usage
	}
	return 0
}

func (m *HugetlbStats) GetMaxUsage() uint64 {
	if m != nil {
		return m.MaxUsage
	}
	return 0
}

func (m *HugetlbStats) GetFailcnt() uint64 {
	if m != nil {
		return m.Failcnt
	}
	return 0
}

type CgroupStats struct {
	CpuStats             *CpuStats                `protobuf:"bytes,1,opt,name=cpu_stats,json=cpuStats,proto3" json:"cpu_stats,omitempty"`
	MemoryStats          *MemoryStats             `protobuf:"bytes,2,opt,name=memory_stats,json=memoryStats,proto3" json:"memory_stats,omitempty"`
	PidsStats            *PidsStats               `protobuf:"bytes,3,opt,name=pids_stats,json=pidsStats,proto3" json:"pids_stats,omitempty"`
	BlkioStats           *BlkioStats              `protobuf:"bytes,4,opt,name=blkio_stats,json=blkioStats,proto3" json:"blkio_stats,omitempty"`
	HugetlbStats         map[string]*HugetlbStats `protobuf:"bytes,5,rep,name=hugetlb_stats,json=hugetlbStats,proto3" json:"hugetlb_stats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CgroupStats) Reset()         { *m = CgroupStats{} }
func (m *CgroupStats) String() string { return proto.CompactTextString(m) }
func (*CgroupStats) ProtoMessage()    {}
func (*CgroupStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{22}
}
func (m *CgroupStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CgroupStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CgroupStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CgroupStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CgroupStats.Merge(m, src)
}
func (m *CgroupStats) XXX_Size() int {
	return m.Size()
}
func (m *CgroupStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CgroupStats.DiscardUnknown(m)
}

var xxx_messageInfo_CgroupStats proto.InternalMessageInfo

func (m *CgroupStats) GetCpuStats() *CpuStats {
	if m != nil {
		return m.CpuStats
	}
	return nil
}

func (m *CgroupStats) GetMemoryStats() *MemoryStats {
	if m != nil {
		return m.MemoryStats
	}
	return nil
}

func (m *CgroupStats) GetPidsStats() *PidsStats {
	if m != nil {
		return m.PidsStats
	}
	return nil
}

func (m *CgroupStats) GetBlkioStats() *BlkioStats {
	if m != nil {
		return m.BlkioStats
	}
	return nil
}

func (m *CgroupStats) GetHugetlbStats() map[string]*HugetlbStats {
	if m != nil {
		return m.HugetlbStats
	}
	return nil
}

type NetworkStats struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RxBytes              uint64   `protobuf:"varint,2,opt,name=rx_bytes,json=rxBytes,proto3" json:"rx_bytes,omitempty"`
	RxPackets            uint64   `protobuf:"varint,3,opt,name=rx_packets,json=rxPackets,proto3" json:"rx_packets,omitempty"`
	RxErrors             uint64   `protobuf:"varint,4,opt,name=rx_errors,json=rxErrors,proto3" json:"rx_errors,omitempty"`
	RxDropped            uint64   `protobuf:"varint,5,opt,name=rx_dropped,json=rxDropped,proto3" json:"rx_dropped,omitempty"`
	TxBytes              uint64   `protobuf:"varint,6,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	TxPackets            uint64   `protobuf:"varint,7,opt,name=tx_packets,json=txPackets,proto3" json:"tx_packets,omitempty"`
	TxErrors             uint64   `protobuf:"varint,8,opt,name=tx_errors,json=txErrors,proto3" json:"tx_errors,omitempty"`
	TxDropped            uint64   `protobuf:"varint,9,opt,name=tx_dropped,json=txDropped,proto3" json:"tx_dropped,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkStats) Reset()         { *m = NetworkStats{} }
func (m *NetworkStats) String() string { return proto.CompactTextString(m) }
func (*NetworkStats) ProtoMessage()    {}
func (*NetworkStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{23}
}
func (m *NetworkStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkStats.Merge(m, src)
}
func (m *NetworkStats) XXX_Size() int {
	return m.Size()
}
func (m *NetworkStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkStats.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkStats proto.InternalMessageInfo

func (m *NetworkStats) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkStats) GetRxBytes() uint64 {
	if m != nil {
		return m.RxBytes
	}
	return 0
}

func (m *NetworkStats) GetRxPackets() uint64 {
	if m != nil {
		return m.RxPackets
	}
	return 0
}

func (m *NetworkStats) GetRxErrors() uint64 {
	if m != nil {
		return m.RxErrors
	}
	return 0
}

func (m *NetworkStats) GetRxDropped() uint64 {
	if m != nil {
		return m.RxDropped
	}
	return 0
}

func (m *NetworkStats) GetTxBytes() uint64 {
	if m != nil {
		return m.TxBytes
	}
	return 0
}

func (m *NetworkStats) GetTxPackets() uint64 {
	if m != nil {
		return m.TxPackets
	}
	return 0
}

func (m *NetworkStats) GetTxErrors() uint64 {
	if m != nil {
		return m.TxErrors
	}
	return 0
}

func (m *NetworkStats) GetTxDropped() uint64 {
	if m != nil {
		return m.TxDropped
	}
	return 0
}

type StatsContainerResponse struct {
	CgroupStats          *CgroupStats    `protobuf:"bytes,1,opt,name=cgroup_stats,json=cgroupStats,proto3" json:"cgroup_stats,omitempty"`
	NetworkStats         []*NetworkStats `protobuf:"bytes,2,rep,name=network_stats,json=networkStats,proto3" json:"network_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *StatsContainerResponse) Reset()         { *m = StatsContainerResponse{} }
func (m *StatsContainerResponse) String() string { return proto.CompactTextString(m) }
func (*StatsContainerResponse) ProtoMessage()    {}
func (*StatsContainerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{24}
}
func (m *StatsContainerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatsContainerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatsContainerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatsContainerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsContainerResponse.Merge(m, src)
}
func (m *StatsContainerResponse) XXX_Size() int {
	return m.Size()
}
func (m *StatsContainerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsContainerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatsContainerResponse proto.InternalMessageInfo

func (m *StatsContainerResponse) GetCgroupStats() *CgroupStats {
	if m != nil {
		return m.CgroupStats
	}
	return nil
}

func (m *StatsContainerResponse) GetNetworkStats() []*NetworkStats {
	if m != nil {
		return m.NetworkStats
	}
	return nil
}

type WriteStreamRequest struct {
	ContainerId          string   `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ExecId               string   `protobuf:"bytes,2,opt,name=exec_id,json=execId,proto3" json:"exec_id,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteStreamRequest) Reset()         { *m = WriteStreamRequest{} }
func (m *WriteStreamRequest) String() string { return proto.CompactTextString(m) }
func (*WriteStreamRequest) ProtoMessage()    {}
func (*WriteStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{25}
}
func (m *WriteStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WriteStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WriteStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WriteStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteStreamRequest.Merge(m, src)
}
func (m *WriteStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *WriteStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WriteStreamRequest proto.InternalMessageInfo

func (m *WriteStreamRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *WriteStreamRequest) GetExecId() string {
	if m != nil {
		return m.ExecId
	}
	return ""
}

func (m *WriteStreamRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type WriteStreamResponse struct {
	Len                  uint32   `protobuf:"varint,1,opt,name=len,proto3" json:"len,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteStreamResponse) Reset()         { *m = WriteStreamResponse{} }
func (m *WriteStreamResponse) String() string { return proto.CompactTextString(m) }
func (*WriteStreamResponse) ProtoMessage()    {}
func (*WriteStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{26}
}
func (m *WriteStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WriteStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WriteStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WriteStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteStreamResponse.Merge(m, src)
}
func (m *WriteStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *WriteStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WriteStreamResponse proto.InternalMessageInfo

func (m *WriteStreamResponse) GetLen() uint32 {
	if m != nil {
		return m.Len
	}
	return 0
}

type ReadStreamRequest struct {
	ContainerId          string   `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ExecId               string   `protobuf:"bytes,2,opt,name=exec_id,json=execId,proto3" json:"exec_id,omitempty"`
	Len                  uint32   `protobuf:"varint,3,opt,name=len,proto3" json:"len,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadStreamRequest) Reset()         { *m = ReadStreamRequest{} }
func (m *ReadStreamRequest) String() string { return proto.CompactTextString(m) }
func (*ReadStreamRequest) ProtoMessage()    {}
func (*ReadStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{27}
}
func (m *ReadStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadStreamRequest.Merge(m, src)
}
func (m *ReadStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReadStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadStreamRequest proto.InternalMessageInfo

func (m *ReadStreamRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *ReadStreamRequest) GetExecId() string {
	if m != nil {
		return m.ExecId
	}
	return ""
}

func (m *ReadStreamRequest) GetLen() uint32 {
	if m != nil {
		return m.Len
	}
	return 0
}

type ReadStreamResponse struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadStreamResponse) Reset()         { *m = ReadStreamResponse{} }
func (m *ReadStreamResponse) String() string { return proto.CompactTextString(m) }
func (*ReadStreamResponse) ProtoMessage()    {}
func (*ReadStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{28}
}
func (m *ReadStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadStreamResponse.Merge(m, src)
}
func (m *ReadStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReadStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadStreamResponse proto.InternalMessageInfo

func (m *ReadStreamResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type CloseStdinRequest struct {
	ContainerId          string   `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ExecId               string   `protobuf:"bytes,2,opt,name=exec_id,json=execId,proto3" json:"exec_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseStdinRequest) Reset()         { *m = CloseStdinRequest{} }
func (m *CloseStdinRequest) String() string { return proto.CompactTextString(m) }
func (*CloseStdinRequest) ProtoMessage()    {}
func (*CloseStdinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{29}
}
func (m *CloseStdinRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloseStdinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloseStdinRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloseStdinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseStdinRequest.Merge(m, src)
}
func (m *CloseStdinRequest) XXX_Size() int {
	return m.Size()
}
func (m *CloseStdinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseStdinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloseStdinRequest proto.InternalMessageInfo

func (m *CloseStdinRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *CloseStdinRequest) GetExecId() string {
	if m != nil {
		return m.ExecId
	}
	return ""
}

type TtyWinResizeRequest struct {
	ContainerId          string   `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ExecId               string   `protobuf:"bytes,2,opt,name=exec_id,json=execId,proto3" json:"exec_id,omitempty"`
	Row                  uint32   `protobuf:"varint,3,opt,name=row,proto3" json:"row,omitempty"`
	Column               uint32   `protobuf:"varint,4,opt,name=column,proto3" json:"column,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TtyWinResizeRequest) Reset()         { *m = TtyWinResizeRequest{} }
func (m *TtyWinResizeRequest) String() string { return proto.CompactTextString(m) }
func (*TtyWinResizeRequest) ProtoMessage()    {}
func (*TtyWinResizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{30}
}
func (m *TtyWinResizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TtyWinResizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TtyWinResizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TtyWinResizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TtyWinResizeRequest.Merge(m, src)
}
func (m *TtyWinResizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *TtyWinResizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TtyWinResizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TtyWinResizeRequest proto.InternalMessageInfo

func (m *TtyWinResizeRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *TtyWinResizeRequest) GetExecId() string {
	if m != nil {
		return m.ExecId
	}
	return ""
}

func (m *TtyWinResizeRequest) GetRow() uint32 {
	if m != nil {
		return m.Row
	}
	return 0
}

func (m *TtyWinResizeRequest) GetColumn() uint32 {
	if m != nil {
		return m.Column
	}
	return 0
}

type KernelModule struct {
	// This field is the name of the kernel module.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// This field are the parameters for the kernel module which are
	// whitespace-delimited key=value pairs passed to modprobe(8).
	Parameters           []string `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KernelModule) Reset()         { *m = KernelModule{} }
func (m *KernelModule) String() string { return proto.CompactTextString(m) }
func (*KernelModule) ProtoMessage()    {}
func (*KernelModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{31}
}
func (m *KernelModule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KernelModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KernelModule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KernelModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KernelModule.Merge(m, src)
}
func (m *KernelModule) XXX_Size() int {
	return m.Size()
}
func (m *KernelModule) XXX_DiscardUnknown() {
	xxx_messageInfo_KernelModule.DiscardUnknown(m)
}

var xxx_messageInfo_KernelModule proto.InternalMessageInfo

func (m *KernelModule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KernelModule) GetParameters() []string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type CreateSandboxRequest struct {
	Hostname string     `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Dns      []string   `protobuf:"bytes,2,rep,name=dns,proto3" json:"dns,omitempty"`
	Storages []*Storage `protobuf:"bytes,3,rep,name=storages,proto3" json:"storages,omitempty"`
	// This field means that a pause process needs to be created by the
	// agent. This pid namespace of the pause process will be treated as
	// a shared pid namespace. All containers created will join this shared
	// pid namespace.
	SandboxPidns bool `protobuf:"varint,4,opt,name=sandbox_pidns,json=sandboxPidns,proto3" json:"sandbox_pidns,omitempty"`
	// SandboxId identifies which sandbox is using the agent. We allow only
	// one sandbox per agent and implicitly require that CreateSandbox is
	// called before other sandbox/network calls.
	SandboxId string `protobuf:"bytes,5,opt,name=sandbox_id,json=sandboxId,proto3" json:"sandbox_id,omitempty"`
	// This field, if non-empty, designates an absolute path to a directory
	// that the agent will search for OCI hooks to run within the guest.
	GuestHookPath string `protobuf:"bytes,6,opt,name=guest_hook_path,json=guestHookPath,proto3" json:"guest_hook_path,omitempty"`
	// This field is the list of kernel modules to be loaded in the guest kernel.
	KernelModules        []*KernelModule `protobuf:"bytes,7,rep,name=kernel_modules,json=kernelModules,proto3" json:"kernel_modules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CreateSandboxRequest) Reset()         { *m = CreateSandboxRequest{} }
func (m *CreateSandboxRequest) String() string { return proto.CompactTextString(m) }
func (*CreateSandboxRequest) ProtoMessage()    {}
func (*CreateSandboxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{32}
}
func (m *CreateSandboxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSandboxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSandboxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSandboxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSandboxRequest.Merge(m, src)
}
func (m *CreateSandboxRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateSandboxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSandboxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSandboxRequest proto.InternalMessageInfo

func (m *CreateSandboxRequest) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *CreateSandboxRequest) GetDns() []string {
	if m != nil {
		return m.Dns
	}
	return nil
}

func (m *CreateSandboxRequest) GetStorages() []*Storage {
	if m != nil {
		return m.Storages
	}
	return nil
}

func (m *CreateSandboxRequest) GetSandboxPidns() bool {
	if m != nil {
		return m.SandboxPidns
	}
	return false
}

func (m *CreateSandboxRequest) GetSandboxId() string {
	if m != nil {
		return m.SandboxId
	}
	return ""
}

func (m *CreateSandboxRequest) GetGuestHookPath() string {
	if m != nil {
		return m.GuestHookPath
	}
	return ""
}

func (m *CreateSandboxRequest) GetKernelModules() []*KernelModule {
	if m != nil {
		return m.KernelModules
	}
	return nil
}

type DestroySandboxRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DestroySandboxRequest) Reset()         { *m = DestroySandboxRequest{} }
func (m *DestroySandboxRequest) String() string { return proto.CompactTextString(m) }
func (*DestroySandboxRequest) ProtoMessage()    {}
func (*DestroySandboxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{33}
}
func (m *DestroySandboxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DestroySandboxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DestroySandboxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DestroySandboxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DestroySandboxRequest.Merge(m, src)
}
func (m *DestroySandboxRequest) XXX_Size() int {
	return m.Size()
}
func (m *DestroySandboxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DestroySandboxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DestroySandboxRequest proto.InternalMessageInfo

type Interfaces struct {
	Interfaces           []*types.Interface `protobuf:"bytes,1,rep,name=Interfaces,proto3" json:"Interfaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Interfaces) Reset()         { *m = Interfaces{} }
func (m *Interfaces) String() string { return proto.CompactTextString(m) }
func (*Interfaces) ProtoMessage()    {}
func (*Interfaces) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{34}
}
func (m *Interfaces) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Interfaces) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Interfaces.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Interfaces) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interfaces.Merge(m, src)
}
func (m *Interfaces) XXX_Size() int {
	return m.Size()
}
func (m *Interfaces) XXX_DiscardUnknown() {
	xxx_messageInfo_Interfaces.DiscardUnknown(m)
}

var xxx_messageInfo_Interfaces proto.InternalMessageInfo

func (m *Interfaces) GetInterfaces() []*types.Interface {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

type Routes struct {
	Routes               []*types.Route `protobuf:"bytes,1,rep,name=Routes,proto3" json:"Routes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Routes) Reset()         { *m = Routes{} }
func (m *Routes) String() string { return proto.CompactTextString(m) }
func (*Routes) ProtoMessage()    {}
func (*Routes) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{35}
}
func (m *Routes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Routes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Routes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Routes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Routes.Merge(m, src)
}
func (m *Routes) XXX_Size() int {
	return m.Size()
}
func (m *Routes) XXX_DiscardUnknown() {
	xxx_messageInfo_Routes.DiscardUnknown(m)
}

var xxx_messageInfo_Routes proto.InternalMessageInfo

func (m *Routes) GetRoutes() []*types.Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

type UpdateInterfaceRequest struct {
	Interface            *types.Interface `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UpdateInterfaceRequest) Reset()         { *m = UpdateInterfaceRequest{} }
func (m *UpdateInterfaceRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateInterfaceRequest) ProtoMessage()    {}
func (*UpdateInterfaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{36}
}
func (m *UpdateInterfaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateInterfaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateInterfaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateInterfaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateInterfaceRequest.Merge(m, src)
}
func (m *UpdateInterfaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateInterfaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateInterfaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateInterfaceRequest proto.InternalMessageInfo

func (m *UpdateInterfaceRequest) GetInterface() *types.Interface {
	if m != nil {
		return m.Interface
	}
	return nil
}

type UpdateRoutesRequest struct {
	Routes               *Routes  `protobuf:"bytes,1,opt,name=routes,proto3" json:"routes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateRoutesRequest) Reset()         { *m = UpdateRoutesRequest{} }
func (m *UpdateRoutesRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRoutesRequest) ProtoMessage()    {}
func (*UpdateRoutesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{37}
}
func (m *UpdateRoutesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRoutesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRoutesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRoutesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRoutesRequest.Merge(m, src)
}
func (m *UpdateRoutesRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRoutesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRoutesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRoutesRequest proto.InternalMessageInfo

func (m *UpdateRoutesRequest) GetRoutes() *Routes {
	if m != nil {
		return m.Routes
	}
	return nil
}

type ListInterfacesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListInterfacesRequest) Reset()         { *m = ListInterfacesRequest{} }
func (m *ListInterfacesRequest) String() string { return proto.CompactTextString(m) }
func (*ListInterfacesRequest) ProtoMessage()    {}
func (*ListInterfacesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{38}
}
func (m *ListInterfacesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListInterfacesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListInterfacesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListInterfacesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListInterfacesRequest.Merge(m, src)
}
func (m *ListInterfacesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListInterfacesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListInterfacesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListInterfacesRequest proto.InternalMessageInfo

type ListRoutesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRoutesRequest) Reset()         { *m = ListRoutesRequest{} }
func (m *ListRoutesRequest) String() string { return proto.CompactTextString(m) }
func (*ListRoutesRequest) ProtoMessage()    {}
func (*ListRoutesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{39}
}
func (m *ListRoutesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRoutesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRoutesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRoutesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRoutesRequest.Merge(m, src)
}
func (m *ListRoutesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRoutesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRoutesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRoutesRequest proto.InternalMessageInfo

type OnlineCPUMemRequest struct {
	// Wait specifies if the caller waits for the agent to online all resources.
	// If true the agent returns once all resources have been connected, otherwise all
	// resources are connected asynchronously and the agent returns immediately.
	Wait bool `protobuf:"varint,1,opt,name=wait,proto3" json:"wait,omitempty"`
	// NbCpus specifies the number of CPUs that were added and the agent has to online.
	NbCpus uint32 `protobuf:"varint,2,opt,name=nb_cpus,json=nbCpus,proto3" json:"nb_cpus,omitempty"`
	// CpuOnly specifies whether only online CPU or not.
	CpuOnly              bool     `protobuf:"varint,3,opt,name=cpu_only,json=cpuOnly,proto3" json:"cpu_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OnlineCPUMemRequest) Reset()         { *m = OnlineCPUMemRequest{} }
func (m *OnlineCPUMemRequest) String() string { return proto.CompactTextString(m) }
func (*OnlineCPUMemRequest) ProtoMessage()    {}
func (*OnlineCPUMemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{40}
}
func (m *OnlineCPUMemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnlineCPUMemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnlineCPUMemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OnlineCPUMemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnlineCPUMemRequest.Merge(m, src)
}
func (m *OnlineCPUMemRequest) XXX_Size() int {
	return m.Size()
}
func (m *OnlineCPUMemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OnlineCPUMemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OnlineCPUMemRequest proto.InternalMessageInfo

func (m *OnlineCPUMemRequest) GetWait() bool {
	if m != nil {
		return m.Wait
	}
	return false
}

func (m *OnlineCPUMemRequest) GetNbCpus() uint32 {
	if m != nil {
		return m.NbCpus
	}
	return 0
}

func (m *OnlineCPUMemRequest) GetCpuOnly() bool {
	if m != nil {
		return m.CpuOnly
	}
	return false
}

type ReseedRandomDevRequest struct {
	// Data specifies the random data used to reseed the guest crng.
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReseedRandomDevRequest) Reset()         { *m = ReseedRandomDevRequest{} }
func (m *ReseedRandomDevRequest) String() string { return proto.CompactTextString(m) }
func (*ReseedRandomDevRequest) ProtoMessage()    {}
func (*ReseedRandomDevRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{41}
}
func (m *ReseedRandomDevRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReseedRandomDevRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReseedRandomDevRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReseedRandomDevRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReseedRandomDevRequest.Merge(m, src)
}
func (m *ReseedRandomDevRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReseedRandomDevRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReseedRandomDevRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReseedRandomDevRequest proto.InternalMessageInfo

func (m *ReseedRandomDevRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// AgentDetails provides information to the client about the running agent.
type AgentDetails struct {
	// Semantic version of agent (see https://semver.org).
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Set if the agent is running as PID 1.
	InitDaemon bool `protobuf:"varint,2,opt,name=init_daemon,json=initDaemon,proto3" json:"init_daemon,omitempty"`
	// List of available device handlers.
	DeviceHandlers []string `protobuf:"bytes,3,rep,name=device_handlers,json=deviceHandlers,proto3" json:"device_handlers,omitempty"`
	// List of available storage handlers.
	StorageHandlers []string `protobuf:"bytes,4,rep,name=storage_handlers,json=storageHandlers,proto3" json:"storage_handlers,omitempty"`
	// Set only if the agent is built with seccomp support and the guest
	// environment supports seccomp.
	SupportsSeccomp      bool     `protobuf:"varint,5,opt,name=supports_seccomp,json=supportsSeccomp,proto3" json:"supports_seccomp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AgentDetails) Reset()         { *m = AgentDetails{} }
func (m *AgentDetails) String() string { return proto.CompactTextString(m) }
func (*AgentDetails) ProtoMessage()    {}
func (*AgentDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{42}
}
func (m *AgentDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentDetails.Merge(m, src)
}
func (m *AgentDetails) XXX_Size() int {
	return m.Size()
}
func (m *AgentDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentDetails.DiscardUnknown(m)
}

var xxx_messageInfo_AgentDetails proto.InternalMessageInfo

func (m *AgentDetails) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *AgentDetails) GetInitDaemon() bool {
	if m != nil {
		return m.InitDaemon
	}
	return false
}

func (m *AgentDetails) GetDeviceHandlers() []string {
	if m != nil {
		return m.DeviceHandlers
	}
	return nil
}

func (m *AgentDetails) GetStorageHandlers() []string {
	if m != nil {
		return m.StorageHandlers
	}
	return nil
}

func (m *AgentDetails) GetSupportsSeccomp() bool {
	if m != nil {
		return m.SupportsSeccomp
	}
	return false
}

type GuestDetailsRequest struct {
	// MemBlockSize asks server to return the system memory block size that can be used
	// for memory hotplug alignment. Typically the server returns what's in
	// /sys/devices/system/memory/block_size_bytes.
	MemBlockSize bool `protobuf:"varint,1,opt,name=mem_block_size,json=memBlockSize,proto3" json:"mem_block_size,omitempty"`
	// MemoryHotplugProbe asks server to return whether guest kernel supports memory hotplug
	// via probeinterface. Typically the server will check if the path
	// /sys/devices/system/memory/probe exists.
	MemHotplugProbe      bool     `protobuf:"varint,2,opt,name=mem_hotplug_probe,json=memHotplugProbe,proto3" json:"mem_hotplug_probe,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GuestDetailsRequest) Reset()         { *m = GuestDetailsRequest{} }
func (m *GuestDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*GuestDetailsRequest) ProtoMessage()    {}
func (*GuestDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{43}
}
func (m *GuestDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuestDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuestDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuestDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuestDetailsRequest.Merge(m, src)
}
func (m *GuestDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GuestDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GuestDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GuestDetailsRequest proto.InternalMessageInfo

func (m *GuestDetailsRequest) GetMemBlockSize() bool {
	if m != nil {
		return m.MemBlockSize
	}
	return false
}

func (m *GuestDetailsRequest) GetMemHotplugProbe() bool {
	if m != nil {
		return m.MemHotplugProbe
	}
	return false
}

type GuestDetailsResponse struct {
	// MemBlockSizeBytes returns the system memory block size in bytes.
	MemBlockSizeBytes      uint64        `protobuf:"varint,1,opt,name=mem_block_size_bytes,json=memBlockSizeBytes,proto3" json:"mem_block_size_bytes,omitempty"`
	AgentDetails           *AgentDetails `protobuf:"bytes,2,opt,name=agent_details,json=agentDetails,proto3" json:"agent_details,omitempty"`
	SupportMemHotplugProbe bool          `protobuf:"varint,3,opt,name=support_mem_hotplug_probe,json=supportMemHotplugProbe,proto3" json:"support_mem_hotplug_probe,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}      `json:"-"`
	XXX_unrecognized       []byte        `json:"-"`
	XXX_sizecache          int32         `json:"-"`
}

func (m *GuestDetailsResponse) Reset()         { *m = GuestDetailsResponse{} }
func (m *GuestDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*GuestDetailsResponse) ProtoMessage()    {}
func (*GuestDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{44}
}
func (m *GuestDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuestDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuestDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuestDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuestDetailsResponse.Merge(m, src)
}
func (m *GuestDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GuestDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GuestDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GuestDetailsResponse proto.InternalMessageInfo

func (m *GuestDetailsResponse) GetMemBlockSizeBytes() uint64 {
	if m != nil {
		return m.MemBlockSizeBytes
	}
	return 0
}

func (m *GuestDetailsResponse) GetAgentDetails() *AgentDetails {
	if m != nil {
		return m.AgentDetails
	}
	return nil
}

func (m *GuestDetailsResponse) GetSupportMemHotplugProbe() bool {
	if m != nil {
		return m.SupportMemHotplugProbe
	}
	return false
}

type MemHotplugByProbeRequest struct {
	// server needs to send the value of memHotplugProbeAddr into file /sys/devices/system/memory/probe,
	// in order to notify the guest kernel about hot-add memory event
	MemHotplugProbeAddr  []uint64 `protobuf:"varint,1,rep,packed,name=memHotplugProbeAddr,proto3" json:"memHotplugProbeAddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MemHotplugByProbeRequest) Reset()         { *m = MemHotplugByProbeRequest{} }
func (m *MemHotplugByProbeRequest) String() string { return proto.CompactTextString(m) }
func (*MemHotplugByProbeRequest) ProtoMessage()    {}
func (*MemHotplugByProbeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{45}
}
func (m *MemHotplugByProbeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemHotplugByProbeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemHotplugByProbeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemHotplugByProbeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemHotplugByProbeRequest.Merge(m, src)
}
func (m *MemHotplugByProbeRequest) XXX_Size() int {
	return m.Size()
}
func (m *MemHotplugByProbeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MemHotplugByProbeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MemHotplugByProbeRequest proto.InternalMessageInfo

func (m *MemHotplugByProbeRequest) GetMemHotplugProbeAddr() []uint64 {
	if m != nil {
		return m.MemHotplugProbeAddr
	}
	return nil
}

type SetGuestDateTimeRequest struct {
	// Sec the second since the Epoch.
	Sec int64 `protobuf:"varint,1,opt,name=Sec,proto3" json:"Sec,omitempty"`
	// Usec the microseconds portion of time since the Epoch.
	Usec                 int64    `protobuf:"varint,2,opt,name=Usec,proto3" json:"Usec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetGuestDateTimeRequest) Reset()         { *m = SetGuestDateTimeRequest{} }
func (m *SetGuestDateTimeRequest) String() string { return proto.CompactTextString(m) }
func (*SetGuestDateTimeRequest) ProtoMessage()    {}
func (*SetGuestDateTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{46}
}
func (m *SetGuestDateTimeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetGuestDateTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetGuestDateTimeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetGuestDateTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetGuestDateTimeRequest.Merge(m, src)
}
func (m *SetGuestDateTimeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetGuestDateTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetGuestDateTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetGuestDateTimeRequest proto.InternalMessageInfo

func (m *SetGuestDateTimeRequest) GetSec() int64 {
	if m != nil {
		return m.Sec
	}
	return 0
}

func (m *SetGuestDateTimeRequest) GetUsec() int64 {
	if m != nil {
		return m.Usec
	}
	return 0
}

// Storage represents both the rootfs of the container, and any volume that
// could have been defined through the Mount list of the OCI specification.
type Storage struct {
	// Driver is used to define the way the storage is passed through the
	// virtual machine. It can be "9p", "blk", or something else, but for
	// all cases, this will define if some extra steps are required before
	// this storage gets mounted into the container.
	Driver string `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	// DriverOptions allows the caller to define a list of options such
	// as block sizes, numbers of luns, ... which are very specific to
	// every device and cannot be generalized through extra fields.
	DriverOptions []string `protobuf:"bytes,2,rep,name=driver_options,json=driverOptions,proto3" json:"driver_options,omitempty"`
	// Source can be anything representing the source of the storage. This
	// will be handled by the proper handler based on the Driver used.
	// For instance, it can be a very simple path if the caller knows the
	// name of device inside the VM, or it can be some sort of identifier
	// to let the agent find the device inside the VM.
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	// Fstype represents the filesystem that needs to be used to mount the
	// storage inside the VM. For instance, it could be "xfs" for block
	// device, "9p" for shared filesystem, or "tmpfs" for shared /dev/shm.
	Fstype string `protobuf:"bytes,4,opt,name=fstype,proto3" json:"fstype,omitempty"`
	// Options describes the additional options that might be needed to
	// mount properly the storage filesytem.
	Options []string `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty"`
	// MountPoint refers to the path where the storage should be mounted
	// inside the VM.
	MountPoint           string   `protobuf:"bytes,6,opt,name=mount_point,json=mountPoint,proto3" json:"mount_point,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Storage) Reset()         { *m = Storage{} }
func (m *Storage) String() string { return proto.CompactTextString(m) }
func (*Storage) ProtoMessage()    {}
func (*Storage) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{47}
}
func (m *Storage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Storage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Storage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Storage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Storage.Merge(m, src)
}
func (m *Storage) XXX_Size() int {
	return m.Size()
}
func (m *Storage) XXX_DiscardUnknown() {
	xxx_messageInfo_Storage.DiscardUnknown(m)
}

var xxx_messageInfo_Storage proto.InternalMessageInfo

func (m *Storage) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Storage) GetDriverOptions() []string {
	if m != nil {
		return m.DriverOptions
	}
	return nil
}

func (m *Storage) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Storage) GetFstype() string {
	if m != nil {
		return m.Fstype
	}
	return ""
}

func (m *Storage) GetOptions() []string {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *Storage) GetMountPoint() string {
	if m != nil {
		return m.MountPoint
	}
	return ""
}

// Device represents only the devices that could have been defined through the
// Linux Device list of the OCI specification.
type Device struct {
	// Id can be used to identify the device inside the VM. Some devices
	// might not need it to be identified on the VM, and will rely on the
	// provided VmPath instead.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type defines the type of device described. This can be "blk",
	// "scsi", "vfio", ...
	// Particularly, this should be used to trigger the use of the
	// appropriate device handler.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// VmPath can be used by the caller to provide directly the path of
	// the device as it will appear inside the VM. For some devices, the
	// device id or the list of options passed might not be enough to find
	// the device. In those cases, the caller should predict and provide
	// this vm_path.
	VmPath string `protobuf:"bytes,3,opt,name=vm_path,json=vmPath,proto3" json:"vm_path,omitempty"`
	// ContainerPath defines the path where the device should be found inside
	// the container. This path should match the path of the device from
	// the device list listed inside the OCI spec. This is used in order
	// to identify the right device in the spec and update it with the
	// right options such as major/minor numbers as they appear inside
	// the VM for instance. Note that an empty ctr_path should be used
	// to make sure the device handler inside the agent is called, but
	// no spec update needs to be performed. This has to happen for the
	// case of rootfs, when a device has to be waited for after it has
	// been hotplugged. An equivalent Storage entry should be defined if
	// any mount needs to be performed afterwards.
	ContainerPath string `protobuf:"bytes,4,opt,name=container_path,json=containerPath,proto3" json:"container_path,omitempty"`
	// Options allows the caller to define a list of options such as block
	// sizes, numbers of luns, ... which are very specific to every device
	// and cannot be generalized through extra fields.
	Options              []string `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{48}
}
func (m *Device) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Device.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return m.Size()
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Device) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Device) GetVmPath() string {
	if m != nil {
		return m.VmPath
	}
	return ""
}

func (m *Device) GetContainerPath() string {
	if m != nil {
		return m.ContainerPath
	}
	return ""
}

func (m *Device) GetOptions() []string {
	if m != nil {
		return m.Options
	}
	return nil
}

type StringUser struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid                  string   `protobuf:"bytes,2,opt,name=gid,proto3" json:"gid,omitempty"`
	AdditionalGids       []string `protobuf:"bytes,3,rep,name=additionalGids,proto3" json:"additionalGids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringUser) Reset()         { *m = StringUser{} }
func (m *StringUser) String() string { return proto.CompactTextString(m) }
func (*StringUser) ProtoMessage()    {}
func (*StringUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{49}
}
func (m *StringUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StringUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringUser.Merge(m, src)
}
func (m *StringUser) XXX_Size() int {
	return m.Size()
}
func (m *StringUser) XXX_DiscardUnknown() {
	xxx_messageInfo_StringUser.DiscardUnknown(m)
}

var xxx_messageInfo_StringUser proto.InternalMessageInfo

func (m *StringUser) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *StringUser) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *StringUser) GetAdditionalGids() []string {
	if m != nil {
		return m.AdditionalGids
	}
	return nil
}

type CopyFileRequest struct {
	// Path is the destination file in the guest. It must be absolute,
	// canonical and below /run.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// FileSize is the expected file size, for security reasons write operations
	// are made in a temporary file, once it has the expected size, it's moved
	// to the destination path.
	FileSize int64 `protobuf:"varint,2,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	// FileMode is the file mode.
	FileMode uint32 `protobuf:"varint,3,opt,name=file_mode,json=fileMode,proto3" json:"file_mode,omitempty"`
	// DirMode is the mode for the parent directories of destination path.
	DirMode uint32 `protobuf:"varint,4,opt,name=dir_mode,json=dirMode,proto3" json:"dir_mode,omitempty"`
	// Uid is the numeric user id.
	Uid int32 `protobuf:"varint,5,opt,name=uid,proto3" json:"uid,omitempty"`
	// Gid is the numeric group id.
	Gid int32 `protobuf:"varint,6,opt,name=gid,proto3" json:"gid,omitempty"`
	// Offset for the next write operation.
	Offset int64 `protobuf:"varint,7,opt,name=offset,proto3" json:"offset,omitempty"`
	// Data to write in the destination file.
	Data                 []byte   `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CopyFileRequest) Reset()         { *m = CopyFileRequest{} }
func (m *CopyFileRequest) String() string { return proto.CompactTextString(m) }
func (*CopyFileRequest) ProtoMessage()    {}
func (*CopyFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{50}
}
func (m *CopyFileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CopyFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CopyFileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CopyFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyFileRequest.Merge(m, src)
}
func (m *CopyFileRequest) XXX_Size() int {
	return m.Size()
}
func (m *CopyFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CopyFileRequest proto.InternalMessageInfo

func (m *CopyFileRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CopyFileRequest) GetFileSize() int64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *CopyFileRequest) GetFileMode() uint32 {
	if m != nil {
		return m.FileMode
	}
	return 0
}

func (m *CopyFileRequest) GetDirMode() uint32 {
	if m != nil {
		return m.DirMode
	}
	return 0
}

func (m *CopyFileRequest) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CopyFileRequest) GetGid() int32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *CopyFileRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *CopyFileRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type StartTracingRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartTracingRequest) Reset()         { *m = StartTracingRequest{} }
func (m *StartTracingRequest) String() string { return proto.CompactTextString(m) }
func (*StartTracingRequest) ProtoMessage()    {}
func (*StartTracingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{51}
}
func (m *StartTracingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartTracingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartTracingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartTracingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartTracingRequest.Merge(m, src)
}
func (m *StartTracingRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartTracingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartTracingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartTracingRequest proto.InternalMessageInfo

type StopTracingRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopTracingRequest) Reset()         { *m = StopTracingRequest{} }
func (m *StopTracingRequest) String() string { return proto.CompactTextString(m) }
func (*StopTracingRequest) ProtoMessage()    {}
func (*StopTracingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{52}
}
func (m *StopTracingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopTracingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopTracingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopTracingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopTracingRequest.Merge(m, src)
}
func (m *StopTracingRequest) XXX_Size() int {
	return m.Size()
}
func (m *StopTracingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopTracingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopTracingRequest proto.InternalMessageInfo

type ExtendedStatsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtendedStatsRequest) Reset()         { *m = ExtendedStatsRequest{} }
func (m *ExtendedStatsRequest) String() string { return proto.CompactTextString(m) }
func (*ExtendedStatsRequest) ProtoMessage()    {}
func (*ExtendedStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{53}
}
func (m *ExtendedStatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtendedStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtendedStatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtendedStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendedStatsRequest.Merge(m, src)
}
func (m *ExtendedStatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExtendedStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendedStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendedStatsRequest proto.InternalMessageInfo

type ExtendedStatsResponse struct {
	PodStats             *PodStats         `protobuf:"bytes,1,opt,name=pod_stats,json=podStats,proto3" json:"pod_stats,omitempty"`
	ConStats             []*ContainerStats `protobuf:"bytes,2,rep,name=con_stats,json=conStats,proto3" json:"con_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ExtendedStatsResponse) Reset()         { *m = ExtendedStatsResponse{} }
func (m *ExtendedStatsResponse) String() string { return proto.CompactTextString(m) }
func (*ExtendedStatsResponse) ProtoMessage()    {}
func (*ExtendedStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{54}
}
func (m *ExtendedStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtendedStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtendedStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtendedStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendedStatsResponse.Merge(m, src)
}
func (m *ExtendedStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ExtendedStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendedStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendedStatsResponse proto.InternalMessageInfo

func (m *ExtendedStatsResponse) GetPodStats() *PodStats {
	if m != nil {
		return m.PodStats
	}
	return nil
}

func (m *ExtendedStatsResponse) GetConStats() []*ContainerStats {
	if m != nil {
		return m.ConStats
	}
	return nil
}

type PodStats struct {
	Buddy                *PodBuddyStats         `protobuf:"bytes,1,opt,name=buddy,proto3" json:"buddy,omitempty"`
	CpuStats             []*PodCpuStats         `protobuf:"bytes,2,rep,name=cpu_stats,json=cpuStats,proto3" json:"cpu_stats,omitempty"`
	IoStats              []*PodIOStats          `protobuf:"bytes,3,rep,name=io_stats,json=ioStats,proto3" json:"io_stats,omitempty"`
	IrqStats             []*PodIrqStats         `protobuf:"bytes,4,rep,name=irq_stats,json=irqStats,proto3" json:"irq_stats,omitempty"`
	LoadStats            *PodLoadStats          `protobuf:"bytes,5,opt,name=load_stats,json=loadStats,proto3" json:"load_stats,omitempty"`
	MemStats             *PodMemStats           `protobuf:"bytes,6,opt,name=mem_stats,json=memStats,proto3" json:"mem_stats,omitempty"`
	MemxStats            *PodMemxStats          `protobuf:"bytes,7,opt,name=memx_stats,json=memxStats,proto3" json:"memx_stats,omitempty"`
	PartStats            []*PodPartitionStats   `protobuf:"bytes,8,rep,name=part_stats,json=partStats,proto3" json:"part_stats,omitempty"`
	PcswStats            *PodPcswStats          `protobuf:"bytes,9,opt,name=pcsw_stats,json=pcswStats,proto3" json:"pcsw_stats,omitempty"`
	PercpuStats          []*PodPercpuStats      `protobuf:"bytes,10,rep,name=percpu_stats,json=percpuStats,proto3" json:"percpu_stats,omitempty"`
	PercpuSchedStats     []*PodPercpuSchedStats `protobuf:"bytes,11,rep,name=percpu_sched_stats,json=percpuSchedStats,proto3" json:"percpu_sched_stats,omitempty"`
	SoftirqStats         *PodSoftirqStats       `protobuf:"bytes,12,opt,name=softirq_stats,json=softirqStats,proto3" json:"softirq_stats,omitempty"`
	SwapStats            *PodSwapStats          `protobuf:"bytes,13,opt,name=swap_stats,json=swapStats,proto3" json:"swap_stats,omitempty"`
	TcpStats             *PodTcpStats           `protobuf:"bytes,14,opt,name=tcp_stats,json=tcpStats,proto3" json:"tcp_stats,omitempty"`
	TcpxStats            *PodTcpxStats          `protobuf:"bytes,15,opt,name=tcpx_stats,json=tcpxStats,proto3" json:"tcpx_stats,omitempty"`
	TrafficStats         *PodTrafficStats       `protobuf:"bytes,16,opt,name=traffic_stats,json=trafficStats,proto3" json:"traffic_stats,omitempty"`
	UdpStats             *PodUdpStats           `protobuf:"bytes,17,opt,name=udp_stats,json=udpStats,proto3" json:"udp_stats,omitempty"`
	VmstatStats          *PodVmstatStats        `protobuf:"bytes,18,opt,name=vmstat_stats,json=vmstatStats,proto3" json:"vmstat_stats,omitempty"`
	GpuInfo              *PodGpuInfo            `protobuf:"bytes,19,opt,name=gpu_info,json=gpuInfo,proto3" json:"gpu_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PodStats) Reset()         { *m = PodStats{} }
func (m *PodStats) String() string { return proto.CompactTextString(m) }
func (*PodStats) ProtoMessage()    {}
func (*PodStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{55}
}
func (m *PodStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodStats.Merge(m, src)
}
func (m *PodStats) XXX_Size() int {
	return m.Size()
}
func (m *PodStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PodStats.DiscardUnknown(m)
}

var xxx_messageInfo_PodStats proto.InternalMessageInfo

func (m *PodStats) GetBuddy() *PodBuddyStats {
	if m != nil {
		return m.Buddy
	}
	return nil
}

func (m *PodStats) GetCpuStats() []*PodCpuStats {
	if m != nil {
		return m.CpuStats
	}
	return nil
}

func (m *PodStats) GetIoStats() []*PodIOStats {
	if m != nil {
		return m.IoStats
	}
	return nil
}

func (m *PodStats) GetIrqStats() []*PodIrqStats {
	if m != nil {
		return m.IrqStats
	}
	return nil
}

func (m *PodStats) GetLoadStats() *PodLoadStats {
	if m != nil {
		return m.LoadStats
	}
	return nil
}

func (m *PodStats) GetMemStats() *PodMemStats {
	if m != nil {
		return m.MemStats
	}
	return nil
}

func (m *PodStats) GetMemxStats() *PodMemxStats {
	if m != nil {
		return m.MemxStats
	}
	return nil
}

func (m *PodStats) GetPartStats() []*PodPartitionStats {
	if m != nil {
		return m.PartStats
	}
	return nil
}

func (m *PodStats) GetPcswStats() *PodPcswStats {
	if m != nil {
		return m.PcswStats
	}
	return nil
}

func (m *PodStats) GetPercpuStats() []*PodPercpuStats {
	if m != nil {
		return m.PercpuStats
	}
	return nil
}

func (m *PodStats) GetPercpuSchedStats() []*PodPercpuSchedStats {
	if m != nil {
		return m.PercpuSchedStats
	}
	return nil
}

func (m *PodStats) GetSoftirqStats() *PodSoftirqStats {
	if m != nil {
		return m.SoftirqStats
	}
	return nil
}

func (m *PodStats) GetSwapStats() *PodSwapStats {
	if m != nil {
		return m.SwapStats
	}
	return nil
}

func (m *PodStats) GetTcpStats() *PodTcpStats {
	if m != nil {
		return m.TcpStats
	}
	return nil
}

func (m *PodStats) GetTcpxStats() *PodTcpxStats {
	if m != nil {
		return m.TcpxStats
	}
	return nil
}

func (m *PodStats) GetTrafficStats() *PodTrafficStats {
	if m != nil {
		return m.TrafficStats
	}
	return nil
}

func (m *PodStats) GetUdpStats() *PodUdpStats {
	if m != nil {
		return m.UdpStats
	}
	return nil
}

func (m *PodStats) GetVmstatStats() *PodVmstatStats {
	if m != nil {
		return m.VmstatStats
	}
	return nil
}

func (m *PodStats) GetGpuInfo() *PodGpuInfo {
	if m != nil {
		return m.GpuInfo
	}
	return nil
}

type PodBuddyStats struct {
	Order0               int32    `protobuf:"varint,1,opt,name=order0,proto3" json:"order0,omitempty"`
	Order1               int32    `protobuf:"varint,2,opt,name=order1,proto3" json:"order1,omitempty"`
	Order2               int32    `protobuf:"varint,3,opt,name=order2,proto3" json:"order2,omitempty"`
	Order3               int32    `protobuf:"varint,4,opt,name=order3,proto3" json:"order3,omitempty"`
	Order4               int32    `protobuf:"varint,5,opt,name=order4,proto3" json:"order4,omitempty"`
	Order5               int32    `protobuf:"varint,6,opt,name=order5,proto3" json:"order5,omitempty"`
	Order6               int32    `protobuf:"varint,7,opt,name=order6,proto3" json:"order6,omitempty"`
	Order7               int32    `protobuf:"varint,8,opt,name=order7,proto3" json:"order7,omitempty"`
	Order8               int32    `protobuf:"varint,9,opt,name=order8,proto3" json:"order8,omitempty"`
	Order9               int32    `protobuf:"varint,10,opt,name=order9,proto3" json:"order9,omitempty"`
	Order10              int32    `protobuf:"varint,11,opt,name=order10,proto3" json:"order10,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodBuddyStats) Reset()         { *m = PodBuddyStats{} }
func (m *PodBuddyStats) String() string { return proto.CompactTextString(m) }
func (*PodBuddyStats) ProtoMessage()    {}
func (*PodBuddyStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{56}
}
func (m *PodBuddyStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodBuddyStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodBuddyStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodBuddyStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodBuddyStats.Merge(m, src)
}
func (m *PodBuddyStats) XXX_Size() int {
	return m.Size()
}
func (m *PodBuddyStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PodBuddyStats.DiscardUnknown(m)
}

var xxx_messageInfo_PodBuddyStats proto.InternalMessageInfo

func (m *PodBuddyStats) GetOrder0() int32 {
	if m != nil {
		return m.Order0
	}
	return 0
}

func (m *PodBuddyStats) GetOrder1() int32 {
	if m != nil {
		return m.Order1
	}
	return 0
}

func (m *PodBuddyStats) GetOrder2() int32 {
	if m != nil {
		return m.Order2
	}
	return 0
}

func (m *PodBuddyStats) GetOrder3() int32 {
	if m != nil {
		return m.Order3
	}
	return 0
}

func (m *PodBuddyStats) GetOrder4() int32 {
	if m != nil {
		return m.Order4
	}
	return 0
}

func (m *PodBuddyStats) GetOrder5() int32 {
	if m != nil {
		return m.Order5
	}
	return 0
}

func (m *PodBuddyStats) GetOrder6() int32 {
	if m != nil {
		return m.Order6
	}
	return 0
}

func (m *PodBuddyStats) GetOrder7() int32 {
	if m != nil {
		return m.Order7
	}
	return 0
}

func (m *PodBuddyStats) GetOrder8() int32 {
	if m != nil {
		return m.Order8
	}
	return 0
}

func (m *PodBuddyStats) GetOrder9() int32 {
	if m != nil {
		return m.Order9
	}
	return 0
}

func (m *PodBuddyStats) GetOrder10() int32 {
	if m != nil {
		return m.Order10
	}
	return 0
}

type PodCpuStats struct {
	CpuUser              uint64   `protobuf:"varint,1,opt,name=cpu_user,json=cpuUser,proto3" json:"cpu_user,omitempty"`
	CpuNice              uint64   `protobuf:"varint,2,opt,name=cpu_nice,json=cpuNice,proto3" json:"cpu_nice,omitempty"`
	CpuSys               uint64   `protobuf:"varint,3,opt,name=cpu_sys,json=cpuSys,proto3" json:"cpu_sys,omitempty"`
	CpuIdle              uint64   `protobuf:"varint,4,opt,name=cpu_idle,json=cpuIdle,proto3" json:"cpu_idle,omitempty"`
	CpuIowait            uint64   `protobuf:"varint,5,opt,name=cpu_iowait,json=cpuIowait,proto3" json:"cpu_iowait,omitempty"`
	CpuSteal             uint64   `protobuf:"varint,6,opt,name=cpu_steal,json=cpuSteal,proto3" json:"cpu_steal,omitempty"`
	CpuHardirq           uint64   `protobuf:"varint,7,opt,name=cpu_hardirq,json=cpuHardirq,proto3" json:"cpu_hardirq,omitempty"`
	CpuSoftirq           uint64   `protobuf:"varint,8,opt,name=cpu_softirq,json=cpuSoftirq,proto3" json:"cpu_softirq,omitempty"`
	CpuGuest             uint64   `protobuf:"varint,9,opt,name=cpu_guest,json=cpuGuest,proto3" json:"cpu_guest,omitempty"`
	CpuNumber            uint64   `protobuf:"varint,10,opt,name=cpu_number,json=cpuNumber,proto3" json:"cpu_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodCpuStats) Reset()         { *m = PodCpuStats{} }
func (m *PodCpuStats) String() string { return proto.CompactTextString(m) }
func (*PodCpuStats) ProtoMessage()    {}
func (*PodCpuStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{57}
}
func (m *PodCpuStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodCpuStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodCpuStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodCpuStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodCpuStats.Merge(m, src)
}
func (m *PodCpuStats) XXX_Size() int {
	return m.Size()
}
func (m *PodCpuStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PodCpuStats.DiscardUnknown(m)
}

var xxx_messageInfo_PodCpuStats proto.InternalMessageInfo

func (m *PodCpuStats) GetCpuUser() uint64 {
	if m != nil {
		return m.CpuUser
	}
	return 0
}

func (m *PodCpuStats) GetCpuNice() uint64 {
	if m != nil {
		return m.CpuNice
	}
	return 0
}

func (m *PodCpuStats) GetCpuSys() uint64 {
	if m != nil {
		return m.CpuSys
	}
	return 0
}

func (m *PodCpuStats) GetCpuIdle() uint64 {
	if m != nil {
		return m.CpuIdle
	}
	return 0
}

func (m *PodCpuStats) GetCpuIowait() uint64 {
	if m != nil {
		return m.CpuIowait
	}
	return 0
}

func (m *PodCpuStats) GetCpuSteal() uint64 {
	if m != nil {
		return m.CpuSteal
	}
	return 0
}

func (m *PodCpuStats) GetCpuHardirq() uint64 {
	if m != nil {
		return m.CpuHardirq
	}
	return 0
}

func (m *PodCpuStats) GetCpuSoftirq() uint64 {
	if m != nil {
		return m.CpuSoftirq
	}
	return 0
}

func (m *PodCpuStats) GetCpuGuest() uint64 {
	if m != nil {
		return m.CpuGuest
	}
	return 0
}

func (m *PodCpuStats) GetCpuNumber() uint64 {
	if m != nil {
		return m.CpuNumber
	}
	return 0
}

type PodIOStats struct {
	Part                 *PartInfo  `protobuf:"bytes,1,opt,name=part,proto3" json:"part,omitempty"`
	Blkio                *BlkIOInfo `protobuf:"bytes,2,opt,name=blkio,proto3" json:"blkio,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PodIOStats) Reset()         { *m = PodIOStats{} }
func (m *PodIOStats) String() string { return proto.CompactTextString(m) }
func (*PodIOStats) ProtoMessage()    {}
func (*PodIOStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{58}
}
func (m *PodIOStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodIOStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodIOStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodIOStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodIOStats.Merge(m, src)
}
func (m *PodIOStats) XXX_Size() int {
	return m.Size()
}
func (m *PodIOStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PodIOStats.DiscardUnknown(m)
}

var xxx_messageInfo_PodIOStats proto.InternalMessageInfo

func (m *PodIOStats) GetPart() *PartInfo {
	if m != nil {
		return m.Part
	}
	return nil
}

func (m *PodIOStats) GetBlkio() *BlkIOInfo {
	if m != nil {
		return m.Blkio
	}
	return nil
}

type PartInfo struct {
	Major                uint32   `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`
	Minor                uint32   `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartInfo) Reset()         { *m = PartInfo{} }
func (m *PartInfo) String() string { return proto.CompactTextString(m) }
func (*PartInfo) ProtoMessage()    {}
func (*PartInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{59}
}
func (m *PartInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartInfo.Merge(m, src)
}
func (m *PartInfo) XXX_Size() int {
	return m.Size()
}
func (m *PartInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PartInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PartInfo proto.InternalMessageInfo

func (m *PartInfo) GetMajor() uint32 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *PartInfo) GetMinor() uint32 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func (m *PartInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type BlkIOInfo struct {
	RdIos                uint64   `protobuf:"varint,1,opt,name=rd_ios,json=rdIos,proto3" json:"rd_ios,omitempty"`
	RdMerges             uint64   `protobuf:"varint,2,opt,name=rd_merges,json=rdMerges,proto3" json:"rd_merges,omitempty"`
	RdSectors            uint64   `protobuf:"varint,3,opt,name=rd_sectors,json=rdSectors,proto3" json:"rd_sectors,omitempty"`
	WrIos                uint64   `protobuf:"varint,4,opt,name=wr_ios,json=wrIos,proto3" json:"wr_ios,omitempty"`
	WrMerges             uint64   `protobuf:"varint,5,opt,name=wr_merges,json=wrMerges,proto3" json:"wr_merges,omitempty"`
	WrSectors            uint64   `protobuf:"varint,6,opt,name=wr_sectors,json=wrSectors,proto3" json:"wr_sectors,omitempty"`
	WrTicks              uint64   `protobuf:"varint,7,opt,name=wr_ticks,json=wrTicks,proto3" json:"wr_ticks,omitempty"`
	Ticks                uint64   `protobuf:"varint,8,opt,name=ticks,proto3" json:"ticks,omitempty"`
	Aveq                 uint64   `protobuf:"varint,9,opt,name=aveq,proto3" json:"aveq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlkIOInfo) Reset()         { *m = BlkIOInfo{} }
func (m *BlkIOInfo) String() string { return proto.CompactTextString(m) }
func (*BlkIOInfo) ProtoMessage()    {}
func (*BlkIOInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{60}
}
func (m *BlkIOInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlkIOInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlkIOInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlkIOInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlkIOInfo.Merge(m, src)
}
func (m *BlkIOInfo) XXX_Size() int {
	return m.Size()
}
func (m *BlkIOInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BlkIOInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BlkIOInfo proto.InternalMessageInfo

func (m *BlkIOInfo) GetRdIos() uint64 {
	if m != nil {
		return m.RdIos
	}
	return 0
}

func (m *BlkIOInfo) GetRdMerges() uint64 {
	if m != nil {
		return m.RdMerges
	}
	return 0
}

func (m *BlkIOInfo) GetRdSectors() uint64 {
	if m != nil {
		return m.RdSectors
	}
	return 0
}

func (m *BlkIOInfo) GetWrIos() uint64 {
	if m != nil {
		return m.WrIos
	}
	return 0
}

func (m *BlkIOInfo) GetWrMerges() uint64 {
	if m != nil {
		return m.WrMerges
	}
	return 0
}

func (m *BlkIOInfo) GetWrSectors() uint64 {
	if m != nil {
		return m.WrSectors
	}
	return 0
}

func (m *BlkIOInfo) GetWrTicks() uint64 {
	if m != nil {
		return m.WrTicks
	}
	return 0
}

func (m *BlkIOInfo) GetTicks() uint64 {
	if m != nil {
		return m.Ticks
	}
	return 0
}

func (m *BlkIOInfo) GetAveq() uint64 {
	if m != nil {
		return m.Aveq
	}
	return 0
}

type PodIrqStats struct {
	IrqNum               uint32   `protobuf:"varint,1,opt,name=irq_num,json=irqNum,proto3" json:"irq_num,omitempty"`
	IrqCount             []uint64 `protobuf:"varint,2,rep,packed,name=irq_count,json=irqCount,proto3" json:"irq_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodIrqStats) Reset()         { *m = PodIrqStats{} }
func (m *PodIrqStats) String() string { return proto.CompactTextString(m) }
func (*PodIrqStats) ProtoMessage()    {}
func (*PodIrqStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{61}
}
func (m *PodIrqStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodIrqStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodIrqStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodIrqStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodIrqStats.Merge(m, src)
}
func (m *PodIrqStats) XXX_Size() int {
	return m.Size()
}
func (m *PodIrqStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PodIrqStats.DiscardUnknown(m)
}

var xxx_messageInfo_PodIrqStats proto.InternalMessageInfo

func (m *PodIrqStats) GetIrqNum() uint32 {
	if m != nil {
		return m.IrqNum
	}
	return 0
}

func (m *PodIrqStats) GetIrqCount() []uint64 {
	if m != nil {
		return m.IrqCount
	}
	return nil
}

type PodLoadStats struct {
	NrRunning            uint64   `protobuf:"varint,1,opt,name=nr_running,json=nrRunning,proto3" json:"nr_running,omitempty"`
	LoadAvg_1            uint32   `protobuf:"varint,2,opt,name=load_avg_1,json=loadAvg1,proto3" json:"load_avg_1,omitempty"`
	LoadAvg_5            uint32   `protobuf:"varint,3,opt,name=load_avg_5,json=loadAvg5,proto3" json:"load_avg_5,omitempty"`
	LoadAvg_15           uint32   `protobuf:"varint,4,opt,name=load_avg_15,json=loadAvg15,proto3" json:"load_avg_15,omitempty"`
	RunningLoadAvg_1     uint32   `protobuf:"varint,5,opt,name=running_load_avg_1,json=runningLoadAvg1,proto3" json:"running_load_avg_1,omitempty"`
	RunningLoadAvg_5     uint32   `protobuf:"varint,6,opt,name=running_load_avg_5,json=runningLoadAvg5,proto3" json:"running_load_avg_5,omitempty"`
	RunningLoadAvg_15    uint32   `protobuf:"varint,7,opt,name=running_load_avg_15,json=runningLoadAvg15,proto3" json:"running_load_avg_15,omitempty"`
	NrThreads            uint32   `protobuf:"varint,8,opt,name=nr_threads,json=nrThreads,proto3" json:"nr_threads,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodLoadStats) Reset()         { *m = PodLoadStats{} }
func (m *PodLoadStats) String() string { return proto.CompactTextString(m) }
func (*PodLoadStats) ProtoMessage()    {}
func (*PodLoadStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{62}
}
func (m *PodLoadStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodLoadStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodLoadStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodLoadStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodLoadStats.Merge(m, src)
}
func (m *PodLoadStats) XXX_Size() int {
	return m.Size()
}
func (m *PodLoadStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PodLoadStats.DiscardUnknown(m)
}

var xxx_messageInfo_PodLoadStats proto.InternalMessageInfo

func (m *PodLoadStats) GetNrRunning() uint64 {
	if m != nil {
		return m.NrRunning
	}
	return 0
}

func (m *PodLoadStats) GetLoadAvg_1() uint32 {
	if m != nil {
		return m.LoadAvg_1
	}
	return 0
}

func (m *PodLoadStats) GetLoadAvg_5() uint32 {
	if m != nil {
		return m.LoadAvg_5
	}
	return 0
}

func (m *PodLoadStats) GetLoadAvg_15() uint32 {
	if m != nil {
		return m.LoadAvg_15
	}
	return 0
}

func (m *PodLoadStats) GetRunningLoadAvg_1() uint32 {
	if m != nil {
		return m.RunningLoadAvg_1
	}
	return 0
}

func (m *PodLoadStats) GetRunningLoadAvg_5() uint32 {
	if m != nil {
		return m.RunningLoadAvg_5
	}
	return 0
}

func (m *PodLoadStats) GetRunningLoadAvg_15() uint32 {
	if m != nil {
		return m.RunningLoadAvg_15
	}
	return 0
}

func (m *PodLoadStats) GetNrThreads() uint32 {
	if m != nil {
		return m.NrThreads
	}
	return 0
}

type PodMemStats struct {
	Frmkb                uint64   `protobuf:"varint,1,opt,name=frmkb,proto3" json:"frmkb,omitempty"`
	Avmkb                uint64   `protobuf:"varint,2,opt,name=avmkb,proto3" json:"avmkb,omitempty"`
	Bufkb                uint64   `protobuf:"varint,3,opt,name=bufkb,proto3" json:"bufkb,omitempty"`
	Camkb                uint64   `protobuf:"varint,4,opt,name=camkb,proto3" json:"camkb,omitempty"`
	Tlmkb                uint64   `protobuf:"varint,5,opt,name=tlmkb,proto3" json:"tlmkb,omitempty"`
	Comkb                uint64   `protobuf:"varint,6,opt,name=comkb,proto3" json:"comkb,omitempty"`
	Rsskb                uint64   `protobuf:"varint,7,opt,name=rsskb,proto3" json:"rsskb,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodMemStats) Reset()         { *m = PodMemStats{} }
func (m *PodMemStats) String() string { return proto.CompactTextString(m) }
func (*PodMemStats) ProtoMessage()    {}
func (*PodMemStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{63}
}
func (m *PodMemStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodMemStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodMemStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodMemStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodMemStats.Merge(m, src)
}
func (m *PodMemStats) XXX_Size() int {
	return m.Size()
}
func (m *PodMemStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PodMemStats.DiscardUnknown(m)
}

var xxx_messageInfo_PodMemStats proto.InternalMessageInfo

func (m *PodMemStats) GetFrmkb() uint64 {
	if m != nil {
		return m.Frmkb
	}
	return 0
}

func (m *PodMemStats) GetAvmkb() uint64 {
	if m != nil {
		return m.Avmkb
	}
	return 0
}

func (m *PodMemStats) GetBufkb() uint64 {
	if m != nil {
		return m.Bufkb
	}
	return 0
}

func (m *PodMemStats) GetCamkb() uint64 {
	if m != nil {
		return m.Camkb
	}
	return 0
}

func (m *PodMemStats) GetTlmkb() uint64 {
	if m != nil {
		return m.Tlmkb
	}
	return 0
}

func (m *PodMemStats) GetComkb() uint64 {
	if m != nil {
		return m.Comkb
	}
	return 0
}

func (m *PodMemStats) GetRsskb() uint64 {
	if m != nil {
		return m.Rsskb
	}
	return 0
}

type PodMemxStats struct {
	Afile                uint64   `protobuf:"varint,1,opt,name=afile,proto3" json:"afile,omitempty"`
	Ifile                uint64   `protobuf:"varint,2,opt,name=ifile,proto3" json:"ifile,omitempty"`
	Aanon                uint64   `protobuf:"varint,3,opt,name=aanon,proto3" json:"aanon,omitempty"`
	Ianon                uint64   `protobuf:"varint,4,opt,name=ianon,proto3" json:"ianon,omitempty"`
	Dirty                uint64   `protobuf:"varint,5,opt,name=dirty,proto3" json:"dirty,omitempty"`
	Writeback            uint64   `protobuf:"varint,6,opt,name=writeback,proto3" json:"writeback,omitempty"`
	Rslab                uint64   `protobuf:"varint,7,opt,name=rslab,proto3" json:"rslab,omitempty"`
	Uslab                uint64   `protobuf:"varint,8,opt,name=uslab,proto3" json:"uslab,omitempty"`
	Mpfile               uint64   `protobuf:"varint,9,opt,name=mpfile,proto3" json:"mpfile,omitempty"`
	Shmem                uint64   `protobuf:"varint,10,opt,name=shmem,proto3" json:"shmem,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodMemxStats) Reset()         { *m = PodMemxStats{} }
func (m *PodMemxStats) String() string { return proto.CompactTextString(m) }
func (*PodMemxStats) ProtoMessage()    {}
func (*PodMemxStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{64}
}
func (m *PodMemxStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodMemxStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodMemxStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodMemxStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodMemxStats.Merge(m, src)
}
func (m *PodMemxStats) XXX_Size() int {
	return m.Size()
}
func (m *PodMemxStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PodMemxStats.DiscardUnknown(m)
}

var xxx_messageInfo_PodMemxStats proto.InternalMessageInfo

func (m *PodMemxStats) GetAfile() uint64 {
	if m != nil {
		return m.Afile
	}
	return 0
}

func (m *PodMemxStats) GetIfile() uint64 {
	if m != nil {
		return m.Ifile
	}
	return 0
}

func (m *PodMemxStats) GetAanon() uint64 {
	if m != nil {
		return m.Aanon
	}
	return 0
}

func (m *PodMemxStats) GetIanon() uint64 {
	if m != nil {
		return m.Ianon
	}
	return 0
}

func (m *PodMemxStats) GetDirty() uint64 {
	if m != nil {
		return m.Dirty
	}
	return 0
}

func (m *PodMemxStats) GetWriteback() uint64 {
	if m != nil {
		return m.Writeback
	}
	return 0
}

func (m *PodMemxStats) GetRslab() uint64 {
	if m != nil {
		return m.Rslab
	}
	return 0
}

func (m *PodMemxStats) GetUslab() uint64 {
	if m != nil {
		return m.Uslab
	}
	return 0
}

func (m *PodMemxStats) GetMpfile() uint64 {
	if m != nil {
		return m.Mpfile
	}
	return 0
}

func (m *PodMemxStats) GetShmem() uint64 {
	if m != nil {
		return m.Shmem
	}
	return 0
}

type PodPartitionStats struct {
	Bsize                int32    `protobuf:"varint,1,opt,name=bsize,proto3" json:"bsize,omitempty"`
	Blocks               uint64   `protobuf:"varint,2,opt,name=blocks,proto3" json:"blocks,omitempty"`
	Bfree                uint64   `protobuf:"varint,3,opt,name=bfree,proto3" json:"bfree,omitempty"`
	Bavail               uint64   `protobuf:"varint,4,opt,name=bavail,proto3" json:"bavail,omitempty"`
	Itotal               uint64   `protobuf:"varint,5,opt,name=itotal,proto3" json:"itotal,omitempty"`
	Ifree                uint64   `protobuf:"varint,6,opt,name=ifree,proto3" json:"ifree,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodPartitionStats) Reset()         { *m = PodPartitionStats{} }
func (m *PodPartitionStats) String() string { return proto.CompactTextString(m) }
func (*PodPartitionStats) ProtoMessage()    {}
func (*PodPartitionStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{65}
}
func (m *PodPartitionStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodPartitionStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodPartitionStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodPartitionStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodPartitionStats.Merge(m, src)
}
func (m *PodPartitionStats) XXX_Size() int {
	return m.Size()
}
func (m *PodPartitionStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PodPartitionStats.DiscardUnknown(m)
}

var xxx_messageInfo_PodPartitionStats proto.InternalMessageInfo

func (m *PodPartitionStats) GetBsize() int32 {
	if m != nil {
		return m.Bsize
	}
	return 0
}

func (m *PodPartitionStats) GetBlocks() uint64 {
	if m != nil {
		return m.Blocks
	}
	return 0
}

func (m *PodPartitionStats) GetBfree() uint64 {
	if m != nil {
		return m.Bfree
	}
	return 0
}

func (m *PodPartitionStats) GetBavail() uint64 {
	if m != nil {
		return m.Bavail
	}
	return 0
}

func (m *PodPartitionStats) GetItotal() uint64 {
	if m != nil {
		return m.Itotal
	}
	return 0
}

func (m *PodPartitionStats) GetIfree() uint64 {
	if m != nil {
		return m.Ifree
	}
	return 0
}

type PodPcswStats struct {
	ContextSwitch        uint64   `protobuf:"varint,1,opt,name=context_switch,json=contextSwitch,proto3" json:"context_switch,omitempty"`
	Newtask              uint64   `protobuf:"varint,2,opt,name=newtask,proto3" json:"newtask,omitempty"`
	Curtask              uint64   `protobuf:"varint,3,opt,name=curtask,proto3" json:"curtask,omitempty"`
	Rtsk                 uint64   `protobuf:"varint,4,opt,name=Rtsk,proto3" json:"Rtsk,omitempty"`
	Dtsk                 uint64   `protobuf:"varint,5,opt,name=Dtsk,proto3" json:"Dtsk,omitempty"`
	Maxpid               uint64   `protobuf:"varint,6,opt,name=maxpid,proto3" json:"maxpid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodPcswStats) Reset()         { *m = PodPcswStats{} }
func (m *PodPcswStats) String() string { return proto.CompactTextString(m) }
func (*PodPcswStats) ProtoMessage()    {}
func (*PodPcswStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{66}
}
func (m *PodPcswStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodPcswStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodPcswStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodPcswStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodPcswStats.Merge(m, src)
}
func (m *PodPcswStats) XXX_Size() int {
	return m.Size()
}
func (m *PodPcswStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PodPcswStats.DiscardUnknown(m)
}

var xxx_messageInfo_PodPcswStats proto.InternalMessageInfo

func (m *PodPcswStats) GetContextSwitch() uint64 {
	if m != nil {
		return m.ContextSwitch
	}
	return 0
}

func (m *PodPcswStats) GetNewtask() uint64 {
	if m != nil {
		return m.Newtask
	}
	return 0
}

func (m *PodPcswStats) GetCurtask() uint64 {
	if m != nil {
		return m.Curtask
	}
	return 0
}

func (m *PodPcswStats) GetRtsk() uint64 {
	if m != nil {
		return m.Rtsk
	}
	return 0
}

func (m *PodPcswStats) GetDtsk() uint64 {
	if m != nil {
		return m.Dtsk
	}
	return 0
}

func (m *PodPcswStats) GetMaxpid() uint64 {
	if m != nil {
		return m.Maxpid
	}
	return 0
}

type PodPercpuStats struct {
	CpuUser              uint64   `protobuf:"varint,1,opt,name=cpu_user,json=cpuUser,proto3" json:"cpu_user,omitempty"`
	CpuNice              uint64   `protobuf:"varint,2,opt,name=cpu_nice,json=cpuNice,proto3" json:"cpu_nice,omitempty"`
	CpuSys               uint64   `protobuf:"varint,3,opt,name=cpu_sys,json=cpuSys,proto3" json:"cpu_sys,omitempty"`
	CpuIdle              uint64   `protobuf:"varint,4,opt,name=cpu_idle,json=cpuIdle,proto3" json:"cpu_idle,omitempty"`
	CpuIowait            uint64   `protobuf:"varint,5,opt,name=cpu_iowait,json=cpuIowait,proto3" json:"cpu_iowait,omitempty"`
	CpuSteal             uint64   `protobuf:"varint,6,opt,name=cpu_steal,json=cpuSteal,proto3" json:"cpu_steal,omitempty"`
	CpuHardirq           uint64   `protobuf:"varint,7,opt,name=cpu_hardirq,json=cpuHardirq,proto3" json:"cpu_hardirq,omitempty"`
	CpuSoftirq           uint64   `protobuf:"varint,8,opt,name=cpu_softirq,json=cpuSoftirq,proto3" json:"cpu_softirq,omitempty"`
	CpuGuest             uint64   `protobuf:"varint,9,opt,name=cpu_guest,json=cpuGuest,proto3" json:"cpu_guest,omitempty"`
	CpuTime              uint64   `protobuf:"varint,10,opt,name=cpu_time,json=cpuTime,proto3" json:"cpu_time,omitempty"`
	CpuRundelay          uint64   `protobuf:"varint,11,opt,name=cpu_rundelay,json=cpuRundelay,proto3" json:"cpu_rundelay,omitempty"`
	CpuPcount            uint64   `protobuf:"varint,12,opt,name=cpu_pcount,json=cpuPcount,proto3" json:"cpu_pcount,omitempty"`
	Name                 string   `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodPercpuStats) Reset()         { *m = PodPercpuStats{} }
func (m *PodPercpuStats) String() string { return proto.CompactTextString(m) }
func (*PodPercpuStats) ProtoMessage()    {}
func (*PodPercpuStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{67}
}
func (m *PodPercpuStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodPercpuStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodPercpuStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodPercpuStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodPercpuStats.Merge(m, src)
}
func (m *PodPercpuStats) XXX_Size() int {
	return m.Size()
}
func (m *PodPercpuStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PodPercpuStats.DiscardUnknown(m)
}

var xxx_messageInfo_PodPercpuStats proto.InternalMessageInfo

func (m *PodPercpuStats) GetCpuUser() uint64 {
	if m != nil {
		return m.CpuUser
	}
	return 0
}

func (m *PodPercpuStats) GetCpuNice() uint64 {
	if m != nil {
		return m.CpuNice
	}
	return 0
}

func (m *PodPercpuStats) GetCpuSys() uint64 {
	if m != nil {
		return m.CpuSys
	}
	return 0
}

func (m *PodPercpuStats) GetCpuIdle() uint64 {
	if m != nil {
		return m.CpuIdle
	}
	return 0
}

func (m *PodPercpuStats) GetCpuIowait() uint64 {
	if m != nil {
		return m.CpuIowait
	}
	return 0
}

func (m *PodPercpuStats) GetCpuSteal() uint64 {
	if m != nil {
		return m.CpuSteal
	}
	return 0
}

func (m *PodPercpuStats) GetCpuHardirq() uint64 {
	if m != nil {
		return m.CpuHardirq
	}
	return 0
}

func (m *PodPercpuStats) GetCpuSoftirq() uint64 {
	if m != nil {
		return m.CpuSoftirq
	}
	return 0
}

func (m *PodPercpuStats) GetCpuGuest() uint64 {
	if m != nil {
		return m.CpuGuest
	}
	return 0
}

func (m *PodPercpuStats) GetCpuTime() uint64 {
	if m != nil {
		return m.CpuTime
	}
	return 0
}

func (m *PodPercpuStats) GetCpuRundelay() uint64 {
	if m != nil {
		return m.CpuRundelay
	}
	return 0
}

func (m *PodPercpuStats) GetCpuPcount() uint64 {
	if m != nil {
		return m.CpuPcount
	}
	return 0
}

func (m *PodPercpuStats) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PodPercpuSchedStats struct {
	SchedYield           uint64   `protobuf:"varint,1,opt,name=sched_yield,json=schedYield,proto3" json:"sched_yield,omitempty"`
	SchedExpr            uint64   `protobuf:"varint,2,opt,name=sched_expr,json=schedExpr,proto3" json:"sched_expr,omitempty"`
	Sched                uint64   `protobuf:"varint,3,opt,name=sched,proto3" json:"sched,omitempty"`
	SchedIdle            uint64   `protobuf:"varint,4,opt,name=sched_idle,json=schedIdle,proto3" json:"sched_idle,omitempty"`
	SchedIdlePercent     uint32   `protobuf:"varint,5,opt,name=sched_idle_percent,json=schedIdlePercent,proto3" json:"sched_idle_percent,omitempty"`
	Ttwu                 uint64   `protobuf:"varint,6,opt,name=ttwu,proto3" json:"ttwu,omitempty"`
	TtwuLocal            uint64   `protobuf:"varint,7,opt,name=ttwu_local,json=ttwuLocal,proto3" json:"ttwu_local,omitempty"`
	TtwuLocalPercent     uint32   `protobuf:"varint,8,opt,name=ttwu_local_percent,json=ttwuLocalPercent,proto3" json:"ttwu_local_percent,omitempty"`
	Cputime              uint64   `protobuf:"varint,9,opt,name=cputime,proto3" json:"cputime,omitempty"`
	Rundelay             uint64   `protobuf:"varint,10,opt,name=rundelay,proto3" json:"rundelay,omitempty"`
	SliceCnt             uint64   `protobuf:"varint,11,opt,name=slice_cnt,json=sliceCnt,proto3" json:"slice_cnt,omitempty"`
	AvgCputime           uint32   `protobuf:"varint,12,opt,name=avg_cputime,json=avgCputime,proto3" json:"avg_cputime,omitempty"`
	AvgRundelay          uint32   `protobuf:"varint,13,opt,name=avg_rundelay,json=avgRundelay,proto3" json:"avg_rundelay,omitempty"`
	Name                 string   `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodPercpuSchedStats) Reset()         { *m = PodPercpuSchedStats{} }
func (m *PodPercpuSchedStats) String() string { return proto.CompactTextString(m) }
func (*PodPercpuSchedStats) ProtoMessage()    {}
func (*PodPercpuSchedStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{68}
}
func (m *PodPercpuSchedStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodPercpuSchedStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodPercpuSchedStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodPercpuSchedStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodPercpuSchedStats.Merge(m, src)
}
func (m *PodPercpuSchedStats) XXX_Size() int {
	return m.Size()
}
func (m *PodPercpuSchedStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PodPercpuSchedStats.DiscardUnknown(m)
}

var xxx_messageInfo_PodPercpuSchedStats proto.InternalMessageInfo

func (m *PodPercpuSchedStats) GetSchedYield() uint64 {
	if m != nil {
		return m.SchedYield
	}
	return 0
}

func (m *PodPercpuSchedStats) GetSchedExpr() uint64 {
	if m != nil {
		return m.SchedExpr
	}
	return 0
}

func (m *PodPercpuSchedStats) GetSched() uint64 {
	if m != nil {
		return m.Sched
	}
	return 0
}

func (m *PodPercpuSchedStats) GetSchedIdle() uint64 {
	if m != nil {
		return m.SchedIdle
	}
	return 0
}

func (m *PodPercpuSchedStats) GetSchedIdlePercent() uint32 {
	if m != nil {
		return m.SchedIdlePercent
	}
	return 0
}

func (m *PodPercpuSchedStats) GetTtwu() uint64 {
	if m != nil {
		return m.Ttwu
	}
	return 0
}

func (m *PodPercpuSchedStats) GetTtwuLocal() uint64 {
	if m != nil {
		return m.TtwuLocal
	}
	return 0
}

func (m *PodPercpuSchedStats) GetTtwuLocalPercent() uint32 {
	if m != nil {
		return m.TtwuLocalPercent
	}
	return 0
}

func (m *PodPercpuSchedStats) GetCputime() uint64 {
	if m != nil {
		return m.Cputime
	}
	return 0
}

func (m *PodPercpuSchedStats) GetRundelay() uint64 {
	if m != nil {
		return m.Rundelay
	}
	return 0
}

func (m *PodPercpuSchedStats) GetSliceCnt() uint64 {
	if m != nil {
		return m.SliceCnt
	}
	return 0
}

func (m *PodPercpuSchedStats) GetAvgCputime() uint32 {
	if m != nil {
		return m.AvgCputime
	}
	return 0
}

func (m *PodPercpuSchedStats) GetAvgRundelay() uint32 {
	if m != nil {
		return m.AvgRundelay
	}
	return 0
}

func (m *PodPercpuSchedStats) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PodSoftirqStats struct {
	Timer                uint64   `protobuf:"varint,1,opt,name=timer,proto3" json:"timer,omitempty"`
	Nettx                uint64   `protobuf:"varint,2,opt,name=nettx,proto3" json:"nettx,omitempty"`
	Netrx                uint64   `protobuf:"varint,3,opt,name=netrx,proto3" json:"netrx,omitempty"`
	Block                uint64   `protobuf:"varint,4,opt,name=block,proto3" json:"block,omitempty"`
	Sched                uint64   `protobuf:"varint,5,opt,name=sched,proto3" json:"sched,omitempty"`
	Hrtim                uint64   `protobuf:"varint,6,opt,name=hrtim,proto3" json:"hrtim,omitempty"`
	Rcu                  uint64   `protobuf:"varint,7,opt,name=rcu,proto3" json:"rcu,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodSoftirqStats) Reset()         { *m = PodSoftirqStats{} }
func (m *PodSoftirqStats) String() string { return proto.CompactTextString(m) }
func (*PodSoftirqStats) ProtoMessage()    {}
func (*PodSoftirqStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{69}
}
func (m *PodSoftirqStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodSoftirqStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodSoftirqStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodSoftirqStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodSoftirqStats.Merge(m, src)
}
func (m *PodSoftirqStats) XXX_Size() int {
	return m.Size()
}
func (m *PodSoftirqStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PodSoftirqStats.DiscardUnknown(m)
}

var xxx_messageInfo_PodSoftirqStats proto.InternalMessageInfo

func (m *PodSoftirqStats) GetTimer() uint64 {
	if m != nil {
		return m.Timer
	}
	return 0
}

func (m *PodSoftirqStats) GetNettx() uint64 {
	if m != nil {
		return m.Nettx
	}
	return 0
}

func (m *PodSoftirqStats) GetNetrx() uint64 {
	if m != nil {
		return m.Netrx
	}
	return 0
}

func (m *PodSoftirqStats) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

func (m *PodSoftirqStats) GetSched() uint64 {
	if m != nil {
		return m.Sched
	}
	return 0
}

func (m *PodSoftirqStats) GetHrtim() uint64 {
	if m != nil {
		return m.Hrtim
	}
	return 0
}

func (m *PodSoftirqStats) GetRcu() uint64 {
	if m != nil {
		return m.Rcu
	}
	return 0
}

type PodSwapStats struct {
	Pswpin               uint64   `protobuf:"varint,1,opt,name=pswpin,proto3" json:"pswpin,omitempty"`
	Pswpout              uint64   `protobuf:"varint,2,opt,name=pswpout,proto3" json:"pswpout,omitempty"`
	Swaptotal            uint64   `protobuf:"varint,3,opt,name=swaptotal,proto3" json:"swaptotal,omitempty"`
	Swapfree             uint64   `protobuf:"varint,4,opt,name=swapfree,proto3" json:"swapfree,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodSwapStats) Reset()         { *m = PodSwapStats{} }
func (m *PodSwapStats) String() string { return proto.CompactTextString(m) }
func (*PodSwapStats) ProtoMessage()    {}
func (*PodSwapStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{70}
}
func (m *PodSwapStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodSwapStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodSwapStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodSwapStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodSwapStats.Merge(m, src)
}
func (m *PodSwapStats) XXX_Size() int {
	return m.Size()
}
func (m *PodSwapStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PodSwapStats.DiscardUnknown(m)
}

var xxx_messageInfo_PodSwapStats proto.InternalMessageInfo

func (m *PodSwapStats) GetPswpin() uint64 {
	if m != nil {
		return m.Pswpin
	}
	return 0
}

func (m *PodSwapStats) GetPswpout() uint64 {
	if m != nil {
		return m.Pswpout
	}
	return 0
}

func (m *PodSwapStats) GetSwaptotal() uint64 {
	if m != nil {
		return m.Swaptotal
	}
	return 0
}

func (m *PodSwapStats) GetSwapfree() uint64 {
	if m != nil {
		return m.Swapfree
	}
	return 0
}

type PodTcpStats struct {
	ActiveOpens          uint64   `protobuf:"varint,1,opt,name=active_opens,json=activeOpens,proto3" json:"active_opens,omitempty"`
	PassiveOpens         uint64   `protobuf:"varint,2,opt,name=passive_opens,json=passiveOpens,proto3" json:"passive_opens,omitempty"`
	InSegs               uint64   `protobuf:"varint,3,opt,name=in_segs,json=inSegs,proto3" json:"in_segs,omitempty"`
	OutSegs              uint64   `protobuf:"varint,4,opt,name=out_segs,json=outSegs,proto3" json:"out_segs,omitempty"`
	AttemptFails         uint64   `protobuf:"varint,5,opt,name=attempt_fails,json=attemptFails,proto3" json:"attempt_fails,omitempty"`
	EstabResets          uint64   `protobuf:"varint,6,opt,name=estab_resets,json=estabResets,proto3" json:"estab_resets,omitempty"`
	CurrEstab            uint64   `protobuf:"varint,7,opt,name=curr_estab,json=currEstab,proto3" json:"curr_estab,omitempty"`
	RetransSegs          uint64   `protobuf:"varint,8,opt,name=retrans_segs,json=retransSegs,proto3" json:"retrans_segs,omitempty"`
	InErrs               uint64   `protobuf:"varint,9,opt,name=in_errs,json=inErrs,proto3" json:"in_errs,omitempty"`
	OutRsts              uint64   `protobuf:"varint,10,opt,name=out_rsts,json=outRsts,proto3" json:"out_rsts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodTcpStats) Reset()         { *m = PodTcpStats{} }
func (m *PodTcpStats) String() string { return proto.CompactTextString(m) }
func (*PodTcpStats) ProtoMessage()    {}
func (*PodTcpStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{71}
}
func (m *PodTcpStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodTcpStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodTcpStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodTcpStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodTcpStats.Merge(m, src)
}
func (m *PodTcpStats) XXX_Size() int {
	return m.Size()
}
func (m *PodTcpStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PodTcpStats.DiscardUnknown(m)
}

var xxx_messageInfo_PodTcpStats proto.InternalMessageInfo

func (m *PodTcpStats) GetActiveOpens() uint64 {
	if m != nil {
		return m.ActiveOpens
	}
	return 0
}

func (m *PodTcpStats) GetPassiveOpens() uint64 {
	if m != nil {
		return m.PassiveOpens
	}
	return 0
}

func (m *PodTcpStats) GetInSegs() uint64 {
	if m != nil {
		return m.InSegs
	}
	return 0
}

func (m *PodTcpStats) GetOutSegs() uint64 {
	if m != nil {
		return m.OutSegs
	}
	return 0
}

func (m *PodTcpStats) GetAttemptFails() uint64 {
	if m != nil {
		return m.AttemptFails
	}
	return 0
}

func (m *PodTcpStats) GetEstabResets() uint64 {
	if m != nil {
		return m.EstabResets
	}
	return 0
}

func (m *PodTcpStats) GetCurrEstab() uint64 {
	if m != nil {
		return m.CurrEstab
	}
	return 0
}

func (m *PodTcpStats) GetRetransSegs() uint64 {
	if m != nil {
		return m.RetransSegs
	}
	return 0
}

func (m *PodTcpStats) GetInErrs() uint64 {
	if m != nil {
		return m.InErrs
	}
	return 0
}

func (m *PodTcpStats) GetOutRsts() uint64 {
	if m != nil {
		return m.OutRsts
	}
	return 0
}

type PodTcpxStats struct {
	Tcprevq              uint64   `protobuf:"varint,1,opt,name=tcprevq,proto3" json:"tcprevq,omitempty"`
	Tcpsendq             uint64   `protobuf:"varint,2,opt,name=tcpsendq,proto3" json:"tcpsendq,omitempty"`
	Tcpest               uint64   `protobuf:"varint,3,opt,name=tcpest,proto3" json:"tcpest,omitempty"`
	Tcptimewait          uint64   `protobuf:"varint,4,opt,name=tcptimewait,proto3" json:"tcptimewait,omitempty"`
	Tcpfinwait1          uint64   `protobuf:"varint,5,opt,name=tcpfinwait1,proto3" json:"tcpfinwait1,omitempty"`
	Tcpfinwait2          uint64   `protobuf:"varint,6,opt,name=tcpfinwait2,proto3" json:"tcpfinwait2,omitempty"`
	Tcplistenq           uint64   `protobuf:"varint,7,opt,name=tcplistenq,proto3" json:"tcplistenq,omitempty"`
	Tcplistenincq        uint64   `protobuf:"varint,8,opt,name=tcplistenincq,proto3" json:"tcplistenincq,omitempty"`
	Tcplistenover        uint64   `protobuf:"varint,9,opt,name=tcplistenover,proto3" json:"tcplistenover,omitempty"`
	Tcpconnest           uint64   `protobuf:"varint,10,opt,name=tcpconnest,proto3" json:"tcpconnest,omitempty"`
	Tcpconndrop          uint64   `protobuf:"varint,11,opt,name=tcpconndrop,proto3" json:"tcpconndrop,omitempty"`
	Tcpmbdrop            uint64   `protobuf:"varint,12,opt,name=tcpmbdrop,proto3" json:"tcpmbdrop,omitempty"`
	Tcprexmitdrop        uint64   `protobuf:"varint,13,opt,name=tcprexmitdrop,proto3" json:"tcprexmitdrop,omitempty"`
	Tcppersistdrop       uint64   `protobuf:"varint,14,opt,name=tcppersistdrop,proto3" json:"tcppersistdrop,omitempty"`
	Tcpkadrop            uint64   `protobuf:"varint,15,opt,name=tcpkadrop,proto3" json:"tcpkadrop,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodTcpxStats) Reset()         { *m = PodTcpxStats{} }
func (m *PodTcpxStats) String() string { return proto.CompactTextString(m) }
func (*PodTcpxStats) ProtoMessage()    {}
func (*PodTcpxStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{72}
}
func (m *PodTcpxStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodTcpxStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodTcpxStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodTcpxStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodTcpxStats.Merge(m, src)
}
func (m *PodTcpxStats) XXX_Size() int {
	return m.Size()
}
func (m *PodTcpxStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PodTcpxStats.DiscardUnknown(m)
}

var xxx_messageInfo_PodTcpxStats proto.InternalMessageInfo

func (m *PodTcpxStats) GetTcprevq() uint64 {
	if m != nil {
		return m.Tcprevq
	}
	return 0
}

func (m *PodTcpxStats) GetTcpsendq() uint64 {
	if m != nil {
		return m.Tcpsendq
	}
	return 0
}

func (m *PodTcpxStats) GetTcpest() uint64 {
	if m != nil {
		return m.Tcpest
	}
	return 0
}

func (m *PodTcpxStats) GetTcptimewait() uint64 {
	if m != nil {
		return m.Tcptimewait
	}
	return 0
}

func (m *PodTcpxStats) GetTcpfinwait1() uint64 {
	if m != nil {
		return m.Tcpfinwait1
	}
	return 0
}

func (m *PodTcpxStats) GetTcpfinwait2() uint64 {
	if m != nil {
		return m.Tcpfinwait2
	}
	return 0
}

func (m *PodTcpxStats) GetTcplistenq() uint64 {
	if m != nil {
		return m.Tcplistenq
	}
	return 0
}

func (m *PodTcpxStats) GetTcplistenincq() uint64 {
	if m != nil {
		return m.Tcplistenincq
	}
	return 0
}

func (m *PodTcpxStats) GetTcplistenover() uint64 {
	if m != nil {
		return m.Tcplistenover
	}
	return 0
}

func (m *PodTcpxStats) GetTcpconnest() uint64 {
	if m != nil {
		return m.Tcpconnest
	}
	return 0
}

func (m *PodTcpxStats) GetTcpconndrop() uint64 {
	if m != nil {
		return m.Tcpconndrop
	}
	return 0
}

func (m *PodTcpxStats) GetTcpmbdrop() uint64 {
	if m != nil {
		return m.Tcpmbdrop
	}
	return 0
}

func (m *PodTcpxStats) GetTcprexmitdrop() uint64 {
	if m != nil {
		return m.Tcprexmitdrop
	}
	return 0
}

func (m *PodTcpxStats) GetTcppersistdrop() uint64 {
	if m != nil {
		return m.Tcppersistdrop
	}
	return 0
}

func (m *PodTcpxStats) GetTcpkadrop() uint64 {
	if m != nil {
		return m.Tcpkadrop
	}
	return 0
}

type PodTrafficStats struct {
	Bytein               uint64   `protobuf:"varint,1,opt,name=bytein,proto3" json:"bytein,omitempty"`
	Byteout              uint64   `protobuf:"varint,2,opt,name=byteout,proto3" json:"byteout,omitempty"`
	Pktin                uint64   `protobuf:"varint,3,opt,name=pktin,proto3" json:"pktin,omitempty"`
	Pktout               uint64   `protobuf:"varint,4,opt,name=pktout,proto3" json:"pktout,omitempty"`
	Pkterrin             uint64   `protobuf:"varint,5,opt,name=pkterrin,proto3" json:"pkterrin,omitempty"`
	Pktdrpin             uint64   `protobuf:"varint,6,opt,name=pktdrpin,proto3" json:"pktdrpin,omitempty"`
	Pkterrout            uint64   `protobuf:"varint,7,opt,name=pkterrout,proto3" json:"pkterrout,omitempty"`
	Pktdrpout            uint64   `protobuf:"varint,8,opt,name=pktdrpout,proto3" json:"pktdrpout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodTrafficStats) Reset()         { *m = PodTrafficStats{} }
func (m *PodTrafficStats) String() string { return proto.CompactTextString(m) }
func (*PodTrafficStats) ProtoMessage()    {}
func (*PodTrafficStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{73}
}
func (m *PodTrafficStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodTrafficStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodTrafficStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodTrafficStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodTrafficStats.Merge(m, src)
}
func (m *PodTrafficStats) XXX_Size() int {
	return m.Size()
}
func (m *PodTrafficStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PodTrafficStats.DiscardUnknown(m)
}

var xxx_messageInfo_PodTrafficStats proto.InternalMessageInfo

func (m *PodTrafficStats) GetBytein() uint64 {
	if m != nil {
		return m.Bytein
	}
	return 0
}

func (m *PodTrafficStats) GetByteout() uint64 {
	if m != nil {
		return m.Byteout
	}
	return 0
}

func (m *PodTrafficStats) GetPktin() uint64 {
	if m != nil {
		return m.Pktin
	}
	return 0
}

func (m *PodTrafficStats) GetPktout() uint64 {
	if m != nil {
		return m.Pktout
	}
	return 0
}

func (m *PodTrafficStats) GetPkterrin() uint64 {
	if m != nil {
		return m.Pkterrin
	}
	return 0
}

func (m *PodTrafficStats) GetPktdrpin() uint64 {
	if m != nil {
		return m.Pktdrpin
	}
	return 0
}

func (m *PodTrafficStats) GetPkterrout() uint64 {
	if m != nil {
		return m.Pkterrout
	}
	return 0
}

func (m *PodTrafficStats) GetPktdrpout() uint64 {
	if m != nil {
		return m.Pktdrpout
	}
	return 0
}

type PodUdpStats struct {
	InDatagrams          uint64   `protobuf:"varint,1,opt,name=in_datagrams,json=inDatagrams,proto3" json:"in_datagrams,omitempty"`
	OutDatagrams         uint64   `protobuf:"varint,2,opt,name=out_datagrams,json=outDatagrams,proto3" json:"out_datagrams,omitempty"`
	NoPorts              uint64   `protobuf:"varint,3,opt,name=no_ports,json=noPorts,proto3" json:"no_ports,omitempty"`
	InErrors             uint64   `protobuf:"varint,4,opt,name=in_errors,json=inErrors,proto3" json:"in_errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodUdpStats) Reset()         { *m = PodUdpStats{} }
func (m *PodUdpStats) String() string { return proto.CompactTextString(m) }
func (*PodUdpStats) ProtoMessage()    {}
func (*PodUdpStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{74}
}
func (m *PodUdpStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodUdpStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodUdpStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodUdpStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodUdpStats.Merge(m, src)
}
func (m *PodUdpStats) XXX_Size() int {
	return m.Size()
}
func (m *PodUdpStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PodUdpStats.DiscardUnknown(m)
}

var xxx_messageInfo_PodUdpStats proto.InternalMessageInfo

func (m *PodUdpStats) GetInDatagrams() uint64 {
	if m != nil {
		return m.InDatagrams
	}
	return 0
}

func (m *PodUdpStats) GetOutDatagrams() uint64 {
	if m != nil {
		return m.OutDatagrams
	}
	return 0
}

func (m *PodUdpStats) GetNoPorts() uint64 {
	if m != nil {
		return m.NoPorts
	}
	return 0
}

func (m *PodUdpStats) GetInErrors() uint64 {
	if m != nil {
		return m.InErrors
	}
	return 0
}

type PodVmstatStats struct {
	Pgin                 uint64   `protobuf:"varint,1,opt,name=pgin,proto3" json:"pgin,omitempty"`
	Pgout                uint64   `protobuf:"varint,2,opt,name=pgout,proto3" json:"pgout,omitempty"`
	Pgfault              uint64   `protobuf:"varint,3,opt,name=pgfault,proto3" json:"pgfault,omitempty"`
	Dirtied              uint64   `protobuf:"varint,4,opt,name=dirtied,proto3" json:"dirtied,omitempty"`
	Allocno              uint64   `protobuf:"varint,5,opt,name=allocno,proto3" json:"allocno,omitempty"`
	Cmpfail              uint64   `protobuf:"varint,6,opt,name=cmpfail,proto3" json:"cmpfail,omitempty"`
	Cmpsucc              uint64   `protobuf:"varint,7,opt,name=cmpsucc,proto3" json:"cmpsucc,omitempty"`
	Failcnt              uint64   `protobuf:"varint,8,opt,name=failcnt,proto3" json:"failcnt,omitempty"`
	Scan                 uint64   `protobuf:"varint,9,opt,name=scan,proto3" json:"scan,omitempty"`
	Steal                uint64   `protobuf:"varint,10,opt,name=steal,proto3" json:"steal,omitempty"`
	Dsteal               uint64   `protobuf:"varint,11,opt,name=dsteal,proto3" json:"dsteal,omitempty"`
	Vmeff                uint64   `protobuf:"varint,12,opt,name=vmeff,proto3" json:"vmeff,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodVmstatStats) Reset()         { *m = PodVmstatStats{} }
func (m *PodVmstatStats) String() string { return proto.CompactTextString(m) }
func (*PodVmstatStats) ProtoMessage()    {}
func (*PodVmstatStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{75}
}
func (m *PodVmstatStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodVmstatStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodVmstatStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodVmstatStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodVmstatStats.Merge(m, src)
}
func (m *PodVmstatStats) XXX_Size() int {
	return m.Size()
}
func (m *PodVmstatStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PodVmstatStats.DiscardUnknown(m)
}

var xxx_messageInfo_PodVmstatStats proto.InternalMessageInfo

func (m *PodVmstatStats) GetPgin() uint64 {
	if m != nil {
		return m.Pgin
	}
	return 0
}

func (m *PodVmstatStats) GetPgout() uint64 {
	if m != nil {
		return m.Pgout
	}
	return 0
}

func (m *PodVmstatStats) GetPgfault() uint64 {
	if m != nil {
		return m.Pgfault
	}
	return 0
}

func (m *PodVmstatStats) GetDirtied() uint64 {
	if m != nil {
		return m.Dirtied
	}
	return 0
}

func (m *PodVmstatStats) GetAllocno() uint64 {
	if m != nil {
		return m.Allocno
	}
	return 0
}

func (m *PodVmstatStats) GetCmpfail() uint64 {
	if m != nil {
		return m.Cmpfail
	}
	return 0
}

func (m *PodVmstatStats) GetCmpsucc() uint64 {
	if m != nil {
		return m.Cmpsucc
	}
	return 0
}

func (m *PodVmstatStats) GetFailcnt() uint64 {
	if m != nil {
		return m.Failcnt
	}
	return 0
}

func (m *PodVmstatStats) GetScan() uint64 {
	if m != nil {
		return m.Scan
	}
	return 0
}

func (m *PodVmstatStats) GetSteal() uint64 {
	if m != nil {
		return m.Steal
	}
	return 0
}

func (m *PodVmstatStats) GetDsteal() uint64 {
	if m != nil {
		return m.Dsteal
	}
	return 0
}

func (m *PodVmstatStats) GetVmeff() uint64 {
	if m != nil {
		return m.Vmeff
	}
	return 0
}

type PodGpuInfo struct {
	Stat                 *GStat       `protobuf:"bytes,1,opt,name=stat,proto3" json:"stat,omitempty"`
	StMem                *GMem        `protobuf:"bytes,2,opt,name=st_mem,json=stMem,proto3" json:"st_mem,omitempty"`
	Uuid                 []uint64     `protobuf:"varint,3,rep,packed,name=uuid,proto3" json:"uuid,omitempty"`
	Config               *GConfigInfo `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	Info                 *GOtherInfo  `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PodGpuInfo) Reset()         { *m = PodGpuInfo{} }
func (m *PodGpuInfo) String() string { return proto.CompactTextString(m) }
func (*PodGpuInfo) ProtoMessage()    {}
func (*PodGpuInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{76}
}
func (m *PodGpuInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodGpuInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodGpuInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodGpuInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodGpuInfo.Merge(m, src)
}
func (m *PodGpuInfo) XXX_Size() int {
	return m.Size()
}
func (m *PodGpuInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PodGpuInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PodGpuInfo proto.InternalMessageInfo

func (m *PodGpuInfo) GetStat() *GStat {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *PodGpuInfo) GetStMem() *GMem {
	if m != nil {
		return m.StMem
	}
	return nil
}

func (m *PodGpuInfo) GetUuid() []uint64 {
	if m != nil {
		return m.Uuid
	}
	return nil
}

func (m *PodGpuInfo) GetConfig() *GConfigInfo {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *PodGpuInfo) GetInfo() *GOtherInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type GStat struct {
	Util                 uint64   `protobuf:"varint,1,opt,name=util,proto3" json:"util,omitempty"`
	MemUtil              uint64   `protobuf:"varint,2,opt,name=mem_util,json=memUtil,proto3" json:"mem_util,omitempty"`
	NrData               uint64   `protobuf:"varint,3,opt,name=nr_data,json=nrData,proto3" json:"nr_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GStat) Reset()         { *m = GStat{} }
func (m *GStat) String() string { return proto.CompactTextString(m) }
func (*GStat) ProtoMessage()    {}
func (*GStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{77}
}
func (m *GStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GStat.Merge(m, src)
}
func (m *GStat) XXX_Size() int {
	return m.Size()
}
func (m *GStat) XXX_DiscardUnknown() {
	xxx_messageInfo_GStat.DiscardUnknown(m)
}

var xxx_messageInfo_GStat proto.InternalMessageInfo

func (m *GStat) GetUtil() uint64 {
	if m != nil {
		return m.Util
	}
	return 0
}

func (m *GStat) GetMemUtil() uint64 {
	if m != nil {
		return m.MemUtil
	}
	return 0
}

func (m *GStat) GetNrData() uint64 {
	if m != nil {
		return m.NrData
	}
	return 0
}

type GMem struct {
	Used                 uint64   `protobuf:"varint,1,opt,name=used,proto3" json:"used,omitempty"`
	Free                 uint64   `protobuf:"varint,2,opt,name=free,proto3" json:"free,omitempty"`
	Total                uint64   `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GMem) Reset()         { *m = GMem{} }
func (m *GMem) String() string { return proto.CompactTextString(m) }
func (*GMem) ProtoMessage()    {}
func (*GMem) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{78}
}
func (m *GMem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GMem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GMem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GMem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GMem.Merge(m, src)
}
func (m *GMem) XXX_Size() int {
	return m.Size()
}
func (m *GMem) XXX_DiscardUnknown() {
	xxx_messageInfo_GMem.DiscardUnknown(m)
}

var xxx_messageInfo_GMem proto.InternalMessageInfo

func (m *GMem) GetUsed() uint64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *GMem) GetFree() uint64 {
	if m != nil {
		return m.Free
	}
	return 0
}

func (m *GMem) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type GConfigInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	VbiosVersion         string   `protobuf:"bytes,2,opt,name=vbios_version,json=vbiosVersion,proto3" json:"vbios_version,omitempty"`
	DriverVersion        string   `protobuf:"bytes,3,opt,name=driver_version,json=driverVersion,proto3" json:"driver_version,omitempty"`
	Mode                 uint64   `protobuf:"varint,4,opt,name=mode,proto3" json:"mode,omitempty"`
	ComputeMode          []byte   `protobuf:"bytes,5,opt,name=compute_mode,json=computeMode,proto3" json:"compute_mode,omitempty"`
	Pstate               []byte   `protobuf:"bytes,6,opt,name=pstate,proto3" json:"pstate,omitempty"`
	PowerLimit           uint64   `protobuf:"varint,7,opt,name=power_limit,json=powerLimit,proto3" json:"power_limit,omitempty"`
	SmMaxClocks          uint64   `protobuf:"varint,8,opt,name=sm_max_clocks,json=smMaxClocks,proto3" json:"sm_max_clocks,omitempty"`
	MemMaxBlocks         uint64   `protobuf:"varint,9,opt,name=mem_max_blocks,json=memMaxBlocks,proto3" json:"mem_max_blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GConfigInfo) Reset()         { *m = GConfigInfo{} }
func (m *GConfigInfo) String() string { return proto.CompactTextString(m) }
func (*GConfigInfo) ProtoMessage()    {}
func (*GConfigInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{79}
}
func (m *GConfigInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GConfigInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GConfigInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GConfigInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GConfigInfo.Merge(m, src)
}
func (m *GConfigInfo) XXX_Size() int {
	return m.Size()
}
func (m *GConfigInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GConfigInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GConfigInfo proto.InternalMessageInfo

func (m *GConfigInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GConfigInfo) GetVbiosVersion() string {
	if m != nil {
		return m.VbiosVersion
	}
	return ""
}

func (m *GConfigInfo) GetDriverVersion() string {
	if m != nil {
		return m.DriverVersion
	}
	return ""
}

func (m *GConfigInfo) GetMode() uint64 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *GConfigInfo) GetComputeMode() []byte {
	if m != nil {
		return m.ComputeMode
	}
	return nil
}

func (m *GConfigInfo) GetPstate() []byte {
	if m != nil {
		return m.Pstate
	}
	return nil
}

func (m *GConfigInfo) GetPowerLimit() uint64 {
	if m != nil {
		return m.PowerLimit
	}
	return 0
}

func (m *GConfigInfo) GetSmMaxClocks() uint64 {
	if m != nil {
		return m.SmMaxClocks
	}
	return 0
}

func (m *GConfigInfo) GetMemMaxBlocks() uint64 {
	if m != nil {
		return m.MemMaxBlocks
	}
	return 0
}

type GOtherInfo struct {
	SmClocks             uint64   `protobuf:"varint,1,opt,name=sm_clocks,json=smClocks,proto3" json:"sm_clocks,omitempty"`
	MemClocks            uint64   `protobuf:"varint,2,opt,name=mem_clocks,json=memClocks,proto3" json:"mem_clocks,omitempty"`
	PowerDraw            uint64   `protobuf:"varint,3,opt,name=power_draw,json=powerDraw,proto3" json:"power_draw,omitempty"`
	Temperature          uint64   `protobuf:"varint,4,opt,name=temperature,proto3" json:"temperature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GOtherInfo) Reset()         { *m = GOtherInfo{} }
func (m *GOtherInfo) String() string { return proto.CompactTextString(m) }
func (*GOtherInfo) ProtoMessage()    {}
func (*GOtherInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{80}
}
func (m *GOtherInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GOtherInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GOtherInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GOtherInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GOtherInfo.Merge(m, src)
}
func (m *GOtherInfo) XXX_Size() int {
	return m.Size()
}
func (m *GOtherInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GOtherInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GOtherInfo proto.InternalMessageInfo

func (m *GOtherInfo) GetSmClocks() uint64 {
	if m != nil {
		return m.SmClocks
	}
	return 0
}

func (m *GOtherInfo) GetMemClocks() uint64 {
	if m != nil {
		return m.MemClocks
	}
	return 0
}

func (m *GOtherInfo) GetPowerDraw() uint64 {
	if m != nil {
		return m.PowerDraw
	}
	return 0
}

func (m *GOtherInfo) GetTemperature() uint64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

type ContainerStats struct {
	BaseStats            *ContainerBaseStats `protobuf:"bytes,1,opt,name=base_stats,json=baseStats,proto3" json:"base_stats,omitempty"`
	ProcStats            []*ProcessStats     `protobuf:"bytes,2,rep,name=proc_stats,json=procStats,proto3" json:"proc_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ContainerStats) Reset()         { *m = ContainerStats{} }
func (m *ContainerStats) String() string { return proto.CompactTextString(m) }
func (*ContainerStats) ProtoMessage()    {}
func (*ContainerStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{81}
}
func (m *ContainerStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerStats.Merge(m, src)
}
func (m *ContainerStats) XXX_Size() int {
	return m.Size()
}
func (m *ContainerStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerStats.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerStats proto.InternalMessageInfo

func (m *ContainerStats) GetBaseStats() *ContainerBaseStats {
	if m != nil {
		return m.BaseStats
	}
	return nil
}

func (m *ContainerStats) GetProcStats() []*ProcessStats {
	if m != nil {
		return m.ProcStats
	}
	return nil
}

type ContainerBaseStats struct {
	ContainerId          string                       `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	CgroupCpu            *ContainerCgroupCpu          `protobuf:"bytes,2,opt,name=cgroup_cpu,json=cgroupCpu,proto3" json:"cgroup_cpu,omitempty"`
	CgroupCpushare       *ContainerCgroupCpushare     `protobuf:"bytes,3,opt,name=cgroup_cpushare,json=cgroupCpushare,proto3" json:"cgroup_cpushare,omitempty"`
	CgroupIo             []*ContainerCgroupIO         `protobuf:"bytes,4,rep,name=cgroup_io,json=cgroupIo,proto3" json:"cgroup_io,omitempty"`
	CgroupIotime         []*ContainerCgroupIOTime     `protobuf:"bytes,5,rep,name=cgroup_iotime,json=cgroupIotime,proto3" json:"cgroup_iotime,omitempty"`
	CgroupIox            []*ContainerCgroupIOX        `protobuf:"bytes,6,rep,name=cgroup_iox,json=cgroupIox,proto3" json:"cgroup_iox,omitempty"`
	CgroupLoad           *ContainerCgroupLoad         `protobuf:"bytes,7,opt,name=cgroup_load,json=cgroupLoad,proto3" json:"cgroup_load,omitempty"`
	CgroupMem            *ContainerCgroupMem          `protobuf:"bytes,8,opt,name=cgroup_mem,json=cgroupMem,proto3" json:"cgroup_mem,omitempty"`
	CgroupMemdelay       *ContainerCgroupMemDelay     `protobuf:"bytes,9,opt,name=cgroup_memdelay,json=cgroupMemdelay,proto3" json:"cgroup_memdelay,omitempty"`
	CgroupLatencyStat    *ContainerCgroupLatencyStat  `protobuf:"bytes,10,opt,name=cgroup_latency_stat,json=cgroupLatencyStat,proto3" json:"cgroup_latency_stat,omitempty"`
	CgroupMemx           *ContainerCgroupMemx         `protobuf:"bytes,11,opt,name=cgroup_memx,json=cgroupMemx,proto3" json:"cgroup_memx,omitempty"`
	CgroupPcsw           *ContainerCgroupPcsw         `protobuf:"bytes,12,opt,name=cgroup_pcsw,json=cgroupPcsw,proto3" json:"cgroup_pcsw,omitempty"`
	CgroupPercpu         *ContainerCgroupPercpu       `protobuf:"bytes,13,opt,name=cgroup_percpu,json=cgroupPercpu,proto3" json:"cgroup_percpu,omitempty"`
	CgroupSchedbvt       *ContainerCgroupSchedbvt     `protobuf:"bytes,14,opt,name=cgroup_schedbvt,json=cgroupSchedbvt,proto3" json:"cgroup_schedbvt,omitempty"`
	CgroupSchedcg        *ContainerCgroupSchedcg      `protobuf:"bytes,15,opt,name=cgroup_schedcg,json=cgroupSchedcg,proto3" json:"cgroup_schedcg,omitempty"`
	CgroupTask           *ContainerCgroupSchedTask    `protobuf:"bytes,16,opt,name=cgroup_task,json=cgroupTask,proto3" json:"cgroup_task,omitempty"`
	CgroupTcpStats       *ContainerCgroupTcpStats     `protobuf:"bytes,17,opt,name=cgroup_tcp_stats,json=cgroupTcpStats,proto3" json:"cgroup_tcp_stats,omitempty"`
	CgroupTcpxStats      *ContainerCgroupTcpxStats    `protobuf:"bytes,18,opt,name=cgroup_tcpx_stats,json=cgroupTcpxStats,proto3" json:"cgroup_tcpx_stats,omitempty"`
	CgroupTrafficStats   *ContainerCgroupTrafficStats `protobuf:"bytes,19,opt,name=cgroup_traffic_stats,json=cgroupTrafficStats,proto3" json:"cgroup_traffic_stats,omitempty"`
	CgroupUdpStats       *ContainerCgroupUdpStats     `protobuf:"bytes,20,opt,name=cgroup_udp_stats,json=cgroupUdpStats,proto3" json:"cgroup_udp_stats,omitempty"`
	CgroupVm             *ContainerCgroupVm           `protobuf:"bytes,21,opt,name=cgroup_vm,json=cgroupVm,proto3" json:"cgroup_vm,omitempty"`
	PartitionStats       *ContainerPartitionStats     `protobuf:"bytes,22,opt,name=partition_stats,json=partitionStats,proto3" json:"partition_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ContainerBaseStats) Reset()         { *m = ContainerBaseStats{} }
func (m *ContainerBaseStats) String() string { return proto.CompactTextString(m) }
func (*ContainerBaseStats) ProtoMessage()    {}
func (*ContainerBaseStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{82}
}
func (m *ContainerBaseStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerBaseStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerBaseStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerBaseStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerBaseStats.Merge(m, src)
}
func (m *ContainerBaseStats) XXX_Size() int {
	return m.Size()
}
func (m *ContainerBaseStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerBaseStats.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerBaseStats proto.InternalMessageInfo

func (m *ContainerBaseStats) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *ContainerBaseStats) GetCgroupCpu() *ContainerCgroupCpu {
	if m != nil {
		return m.CgroupCpu
	}
	return nil
}

func (m *ContainerBaseStats) GetCgroupCpushare() *ContainerCgroupCpushare {
	if m != nil {
		return m.CgroupCpushare
	}
	return nil
}

func (m *ContainerBaseStats) GetCgroupIo() []*ContainerCgroupIO {
	if m != nil {
		return m.CgroupIo
	}
	return nil
}

func (m *ContainerBaseStats) GetCgroupIotime() []*ContainerCgroupIOTime {
	if m != nil {
		return m.CgroupIotime
	}
	return nil
}

func (m *ContainerBaseStats) GetCgroupIox() []*ContainerCgroupIOX {
	if m != nil {
		return m.CgroupIox
	}
	return nil
}

func (m *ContainerBaseStats) GetCgroupLoad() *ContainerCgroupLoad {
	if m != nil {
		return m.CgroupLoad
	}
	return nil
}

func (m *ContainerBaseStats) GetCgroupMem() *ContainerCgroupMem {
	if m != nil {
		return m.CgroupMem
	}
	return nil
}

func (m *ContainerBaseStats) GetCgroupMemdelay() *ContainerCgroupMemDelay {
	if m != nil {
		return m.CgroupMemdelay
	}
	return nil
}

func (m *ContainerBaseStats) GetCgroupLatencyStat() *ContainerCgroupLatencyStat {
	if m != nil {
		return m.CgroupLatencyStat
	}
	return nil
}

func (m *ContainerBaseStats) GetCgroupMemx() *ContainerCgroupMemx {
	if m != nil {
		return m.CgroupMemx
	}
	return nil
}

func (m *ContainerBaseStats) GetCgroupPcsw() *ContainerCgroupPcsw {
	if m != nil {
		return m.CgroupPcsw
	}
	return nil
}

func (m *ContainerBaseStats) GetCgroupPercpu() *ContainerCgroupPercpu {
	if m != nil {
		return m.CgroupPercpu
	}
	return nil
}

func (m *ContainerBaseStats) GetCgroupSchedbvt() *ContainerCgroupSchedbvt {
	if m != nil {
		return m.CgroupSchedbvt
	}
	return nil
}

func (m *ContainerBaseStats) GetCgroupSchedcg() *ContainerCgroupSchedcg {
	if m != nil {
		return m.CgroupSchedcg
	}
	return nil
}

func (m *ContainerBaseStats) GetCgroupTask() *ContainerCgroupSchedTask {
	if m != nil {
		return m.CgroupTask
	}
	return nil
}

func (m *ContainerBaseStats) GetCgroupTcpStats() *ContainerCgroupTcpStats {
	if m != nil {
		return m.CgroupTcpStats
	}
	return nil
}

func (m *ContainerBaseStats) GetCgroupTcpxStats() *ContainerCgroupTcpxStats {
	if m != nil {
		return m.CgroupTcpxStats
	}
	return nil
}

func (m *ContainerBaseStats) GetCgroupTrafficStats() *ContainerCgroupTrafficStats {
	if m != nil {
		return m.CgroupTrafficStats
	}
	return nil
}

func (m *ContainerBaseStats) GetCgroupUdpStats() *ContainerCgroupUdpStats {
	if m != nil {
		return m.CgroupUdpStats
	}
	return nil
}

func (m *ContainerBaseStats) GetCgroupVm() *ContainerCgroupVm {
	if m != nil {
		return m.CgroupVm
	}
	return nil
}

func (m *ContainerBaseStats) GetPartitionStats() *ContainerPartitionStats {
	if m != nil {
		return m.PartitionStats
	}
	return nil
}

type ContainerCgroupCpu struct {
	User                 uint64   `protobuf:"varint,1,opt,name=user,proto3" json:"user,omitempty"`
	Sys                  uint64   `protobuf:"varint,2,opt,name=sys,proto3" json:"sys,omitempty"`
	Nice                 uint64   `protobuf:"varint,3,opt,name=nice,proto3" json:"nice,omitempty"`
	Iowait               uint64   `protobuf:"varint,4,opt,name=iowait,proto3" json:"iowait,omitempty"`
	Idle                 uint64   `protobuf:"varint,5,opt,name=idle,proto3" json:"idle,omitempty"`
	Hirq                 uint64   `protobuf:"varint,6,opt,name=hirq,proto3" json:"hirq,omitempty"`
	Sirq                 uint64   `protobuf:"varint,7,opt,name=sirq,proto3" json:"sirq,omitempty"`
	Steal                uint64   `protobuf:"varint,8,opt,name=steal,proto3" json:"steal,omitempty"`
	TotalTime            uint64   `protobuf:"varint,9,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	Period               uint64   `protobuf:"varint,10,opt,name=period,proto3" json:"period,omitempty"`
	Quota                uint64   `protobuf:"varint,11,opt,name=quota,proto3" json:"quota,omitempty"`
	Ncpu                 uint64   `protobuf:"varint,12,opt,name=ncpu,proto3" json:"ncpu,omitempty"`
	JdkMaxProcessLimit   uint64   `protobuf:"varint,13,opt,name=jdk_max_process_limit,json=jdkMaxProcessLimit,proto3" json:"jdk_max_process_limit,omitempty"`
	Shares               uint64   `protobuf:"varint,14,opt,name=shares,proto3" json:"shares,omitempty"`
	OriSteal             uint64   `protobuf:"varint,15,opt,name=ori_steal,json=oriSteal,proto3" json:"ori_steal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerCgroupCpu) Reset()         { *m = ContainerCgroupCpu{} }
func (m *ContainerCgroupCpu) String() string { return proto.CompactTextString(m) }
func (*ContainerCgroupCpu) ProtoMessage()    {}
func (*ContainerCgroupCpu) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{83}
}
func (m *ContainerCgroupCpu) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerCgroupCpu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerCgroupCpu.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerCgroupCpu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerCgroupCpu.Merge(m, src)
}
func (m *ContainerCgroupCpu) XXX_Size() int {
	return m.Size()
}
func (m *ContainerCgroupCpu) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerCgroupCpu.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerCgroupCpu proto.InternalMessageInfo

func (m *ContainerCgroupCpu) GetUser() uint64 {
	if m != nil {
		return m.User
	}
	return 0
}

func (m *ContainerCgroupCpu) GetSys() uint64 {
	if m != nil {
		return m.Sys
	}
	return 0
}

func (m *ContainerCgroupCpu) GetNice() uint64 {
	if m != nil {
		return m.Nice
	}
	return 0
}

func (m *ContainerCgroupCpu) GetIowait() uint64 {
	if m != nil {
		return m.Iowait
	}
	return 0
}

func (m *ContainerCgroupCpu) GetIdle() uint64 {
	if m != nil {
		return m.Idle
	}
	return 0
}

func (m *ContainerCgroupCpu) GetHirq() uint64 {
	if m != nil {
		return m.Hirq
	}
	return 0
}

func (m *ContainerCgroupCpu) GetSirq() uint64 {
	if m != nil {
		return m.Sirq
	}
	return 0
}

func (m *ContainerCgroupCpu) GetSteal() uint64 {
	if m != nil {
		return m.Steal
	}
	return 0
}

func (m *ContainerCgroupCpu) GetTotalTime() uint64 {
	if m != nil {
		return m.TotalTime
	}
	return 0
}

func (m *ContainerCgroupCpu) GetPeriod() uint64 {
	if m != nil {
		return m.Period
	}
	return 0
}

func (m *ContainerCgroupCpu) GetQuota() uint64 {
	if m != nil {
		return m.Quota
	}
	return 0
}

func (m *ContainerCgroupCpu) GetNcpu() uint64 {
	if m != nil {
		return m.Ncpu
	}
	return 0
}

func (m *ContainerCgroupCpu) GetJdkMaxProcessLimit() uint64 {
	if m != nil {
		return m.JdkMaxProcessLimit
	}
	return 0
}

func (m *ContainerCgroupCpu) GetShares() uint64 {
	if m != nil {
		return m.Shares
	}
	return 0
}

func (m *ContainerCgroupCpu) GetOriSteal() uint64 {
	if m != nil {
		return m.OriSteal
	}
	return 0
}

type ContainerCgroupCpushare struct {
	NrThrottled          uint64   `protobuf:"varint,1,opt,name=nr_throttled,json=nrThrottled,proto3" json:"nr_throttled,omitempty"`
	NrPeriod             uint64   `protobuf:"varint,2,opt,name=nr_period,json=nrPeriod,proto3" json:"nr_period,omitempty"`
	PeriodTime           uint64   `protobuf:"varint,3,opt,name=period_time,json=periodTime,proto3" json:"period_time,omitempty"`
	ThrottleTime         uint64   `protobuf:"varint,4,opt,name=throttle_time,json=throttleTime,proto3" json:"throttle_time,omitempty"`
	OsServe              uint64   `protobuf:"varint,5,opt,name=os_serve,json=osServe,proto3" json:"os_serve,omitempty"`
	OnCpu                uint64   `protobuf:"varint,6,opt,name=on_cpu,json=onCpu,proto3" json:"on_cpu,omitempty"`
	GOther               uint64   `protobuf:"varint,7,opt,name=g_other,json=gOther,proto3" json:"g_other,omitempty"`
	GSibling             uint64   `protobuf:"varint,8,opt,name=g_sibling,json=gSibling,proto3" json:"g_sibling,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerCgroupCpushare) Reset()         { *m = ContainerCgroupCpushare{} }
func (m *ContainerCgroupCpushare) String() string { return proto.CompactTextString(m) }
func (*ContainerCgroupCpushare) ProtoMessage()    {}
func (*ContainerCgroupCpushare) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{84}
}
func (m *ContainerCgroupCpushare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerCgroupCpushare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerCgroupCpushare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerCgroupCpushare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerCgroupCpushare.Merge(m, src)
}
func (m *ContainerCgroupCpushare) XXX_Size() int {
	return m.Size()
}
func (m *ContainerCgroupCpushare) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerCgroupCpushare.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerCgroupCpushare proto.InternalMessageInfo

func (m *ContainerCgroupCpushare) GetNrThrottled() uint64 {
	if m != nil {
		return m.NrThrottled
	}
	return 0
}

func (m *ContainerCgroupCpushare) GetNrPeriod() uint64 {
	if m != nil {
		return m.NrPeriod
	}
	return 0
}

func (m *ContainerCgroupCpushare) GetPeriodTime() uint64 {
	if m != nil {
		return m.PeriodTime
	}
	return 0
}

func (m *ContainerCgroupCpushare) GetThrottleTime() uint64 {
	if m != nil {
		return m.ThrottleTime
	}
	return 0
}

func (m *ContainerCgroupCpushare) GetOsServe() uint64 {
	if m != nil {
		return m.OsServe
	}
	return 0
}

func (m *ContainerCgroupCpushare) GetOnCpu() uint64 {
	if m != nil {
		return m.OnCpu
	}
	return 0
}

func (m *ContainerCgroupCpushare) GetGOther() uint64 {
	if m != nil {
		return m.GOther
	}
	return 0
}

func (m *ContainerCgroupCpushare) GetGSibling() uint64 {
	if m != nil {
		return m.GSibling
	}
	return 0
}

type ContainerCgroupIO struct {
	Rio                  uint64   `protobuf:"varint,1,opt,name=rio,proto3" json:"rio,omitempty"`
	Wio                  uint64   `protobuf:"varint,2,opt,name=wio,proto3" json:"wio,omitempty"`
	Rbytes               uint64   `protobuf:"varint,3,opt,name=rbytes,proto3" json:"rbytes,omitempty"`
	Wbytes               uint64   `protobuf:"varint,4,opt,name=wbytes,proto3" json:"wbytes,omitempty"`
	IoQueued             uint64   `protobuf:"varint,5,opt,name=io_queued,json=ioQueued,proto3" json:"io_queued,omitempty"`
	WaitTime             uint64   `protobuf:"varint,6,opt,name=wait_time,json=waitTime,proto3" json:"wait_time,omitempty"`
	ServiceTime          uint64   `protobuf:"varint,7,opt,name=service_time,json=serviceTime,proto3" json:"service_time,omitempty"`
	Major                int32    `protobuf:"varint,8,opt,name=major,proto3" json:"major,omitempty"`
	Minor                int32    `protobuf:"varint,9,opt,name=minor,proto3" json:"minor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerCgroupIO) Reset()         { *m = ContainerCgroupIO{} }
func (m *ContainerCgroupIO) String() string { return proto.CompactTextString(m) }
func (*ContainerCgroupIO) ProtoMessage()    {}
func (*ContainerCgroupIO) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{85}
}
func (m *ContainerCgroupIO) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerCgroupIO) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerCgroupIO.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerCgroupIO) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerCgroupIO.Merge(m, src)
}
func (m *ContainerCgroupIO) XXX_Size() int {
	return m.Size()
}
func (m *ContainerCgroupIO) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerCgroupIO.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerCgroupIO proto.InternalMessageInfo

func (m *ContainerCgroupIO) GetRio() uint64 {
	if m != nil {
		return m.Rio
	}
	return 0
}

func (m *ContainerCgroupIO) GetWio() uint64 {
	if m != nil {
		return m.Wio
	}
	return 0
}

func (m *ContainerCgroupIO) GetRbytes() uint64 {
	if m != nil {
		return m.Rbytes
	}
	return 0
}

func (m *ContainerCgroupIO) GetWbytes() uint64 {
	if m != nil {
		return m.Wbytes
	}
	return 0
}

func (m *ContainerCgroupIO) GetIoQueued() uint64 {
	if m != nil {
		return m.IoQueued
	}
	return 0
}

func (m *ContainerCgroupIO) GetWaitTime() uint64 {
	if m != nil {
		return m.WaitTime
	}
	return 0
}

func (m *ContainerCgroupIO) GetServiceTime() uint64 {
	if m != nil {
		return m.ServiceTime
	}
	return 0
}

func (m *ContainerCgroupIO) GetMajor() int32 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *ContainerCgroupIO) GetMinor() int32 {
	if m != nil {
		return m.Minor
	}
	return 0
}

type ContainerCgroupIOTime struct {
	ReadServiceTime      uint64   `protobuf:"varint,1,opt,name=read_service_time,json=readServiceTime,proto3" json:"read_service_time,omitempty"`
	WriteServiceTime     uint64   `protobuf:"varint,2,opt,name=write_service_time,json=writeServiceTime,proto3" json:"write_service_time,omitempty"`
	ReadWaitTime         uint64   `protobuf:"varint,3,opt,name=read_wait_time,json=readWaitTime,proto3" json:"read_wait_time,omitempty"`
	WriteWaitTime        uint64   `protobuf:"varint,4,opt,name=write_wait_time,json=writeWaitTime,proto3" json:"write_wait_time,omitempty"`
	SyncServiceTime      uint64   `protobuf:"varint,5,opt,name=sync_service_time,json=syncServiceTime,proto3" json:"sync_service_time,omitempty"`
	AsyncServiceTime     uint64   `protobuf:"varint,6,opt,name=async_service_time,json=asyncServiceTime,proto3" json:"async_service_time,omitempty"`
	SyncWaitTime         uint64   `protobuf:"varint,7,opt,name=sync_wait_time,json=syncWaitTime,proto3" json:"sync_wait_time,omitempty"`
	AsyncWaitTime        uint64   `protobuf:"varint,8,opt,name=async_wait_time,json=asyncWaitTime,proto3" json:"async_wait_time,omitempty"`
	IoReadComplete       uint64   `protobuf:"varint,9,opt,name=io_read_complete,json=ioReadComplete,proto3" json:"io_read_complete,omitempty"`
	IoWriteCompelte      uint64   `protobuf:"varint,10,opt,name=io_write_compelte,json=ioWriteCompelte,proto3" json:"io_write_compelte,omitempty"`
	IoSyncComplete       uint64   `protobuf:"varint,11,opt,name=io_sync_complete,json=ioSyncComplete,proto3" json:"io_sync_complete,omitempty"`
	IoAsyncComplete      uint64   `protobuf:"varint,12,opt,name=io_async_complete,json=ioAsyncComplete,proto3" json:"io_async_complete,omitempty"`
	Major                int32    `protobuf:"varint,13,opt,name=major,proto3" json:"major,omitempty"`
	Minor                int32    `protobuf:"varint,14,opt,name=minor,proto3" json:"minor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerCgroupIOTime) Reset()         { *m = ContainerCgroupIOTime{} }
func (m *ContainerCgroupIOTime) String() string { return proto.CompactTextString(m) }
func (*ContainerCgroupIOTime) ProtoMessage()    {}
func (*ContainerCgroupIOTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{86}
}
func (m *ContainerCgroupIOTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerCgroupIOTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerCgroupIOTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerCgroupIOTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerCgroupIOTime.Merge(m, src)
}
func (m *ContainerCgroupIOTime) XXX_Size() int {
	return m.Size()
}
func (m *ContainerCgroupIOTime) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerCgroupIOTime.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerCgroupIOTime proto.InternalMessageInfo

func (m *ContainerCgroupIOTime) GetReadServiceTime() uint64 {
	if m != nil {
		return m.ReadServiceTime
	}
	return 0
}

func (m *ContainerCgroupIOTime) GetWriteServiceTime() uint64 {
	if m != nil {
		return m.WriteServiceTime
	}
	return 0
}

func (m *ContainerCgroupIOTime) GetReadWaitTime() uint64 {
	if m != nil {
		return m.ReadWaitTime
	}
	return 0
}

func (m *ContainerCgroupIOTime) GetWriteWaitTime() uint64 {
	if m != nil {
		return m.WriteWaitTime
	}
	return 0
}

func (m *ContainerCgroupIOTime) GetSyncServiceTime() uint64 {
	if m != nil {
		return m.SyncServiceTime
	}
	return 0
}

func (m *ContainerCgroupIOTime) GetAsyncServiceTime() uint64 {
	if m != nil {
		return m.AsyncServiceTime
	}
	return 0
}

func (m *ContainerCgroupIOTime) GetSyncWaitTime() uint64 {
	if m != nil {
		return m.SyncWaitTime
	}
	return 0
}

func (m *ContainerCgroupIOTime) GetAsyncWaitTime() uint64 {
	if m != nil {
		return m.AsyncWaitTime
	}
	return 0
}

func (m *ContainerCgroupIOTime) GetIoReadComplete() uint64 {
	if m != nil {
		return m.IoReadComplete
	}
	return 0
}

func (m *ContainerCgroupIOTime) GetIoWriteCompelte() uint64 {
	if m != nil {
		return m.IoWriteCompelte
	}
	return 0
}

func (m *ContainerCgroupIOTime) GetIoSyncComplete() uint64 {
	if m != nil {
		return m.IoSyncComplete
	}
	return 0
}

func (m *ContainerCgroupIOTime) GetIoAsyncComplete() uint64 {
	if m != nil {
		return m.IoAsyncComplete
	}
	return 0
}

func (m *ContainerCgroupIOTime) GetMajor() int32 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *ContainerCgroupIOTime) GetMinor() int32 {
	if m != nil {
		return m.Minor
	}
	return 0
}

type ContainerCgroupIOX struct {
	Sio                  uint64   `protobuf:"varint,1,opt,name=sio,proto3" json:"sio,omitempty"`
	Asio                 uint64   `protobuf:"varint,2,opt,name=asio,proto3" json:"asio,omitempty"`
	Syncbytes            uint64   `protobuf:"varint,3,opt,name=syncbytes,proto3" json:"syncbytes,omitempty"`
	Asyncbytes           uint64   `protobuf:"varint,4,opt,name=asyncbytes,proto3" json:"asyncbytes,omitempty"`
	MetaWrites           uint64   `protobuf:"varint,5,opt,name=meta_writes,json=metaWrites,proto3" json:"meta_writes,omitempty"`
	IoUp                 uint64   `protobuf:"varint,6,opt,name=io_up,json=ioUp,proto3" json:"io_up,omitempty"`
	IoDown               uint64   `protobuf:"varint,7,opt,name=io_down,json=ioDown,proto3" json:"io_down,omitempty"`
	Major                int32    `protobuf:"varint,8,opt,name=major,proto3" json:"major,omitempty"`
	Minor                int32    `protobuf:"varint,9,opt,name=minor,proto3" json:"minor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerCgroupIOX) Reset()         { *m = ContainerCgroupIOX{} }
func (m *ContainerCgroupIOX) String() string { return proto.CompactTextString(m) }
func (*ContainerCgroupIOX) ProtoMessage()    {}
func (*ContainerCgroupIOX) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{87}
}
func (m *ContainerCgroupIOX) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerCgroupIOX) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerCgroupIOX.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerCgroupIOX) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerCgroupIOX.Merge(m, src)
}
func (m *ContainerCgroupIOX) XXX_Size() int {
	return m.Size()
}
func (m *ContainerCgroupIOX) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerCgroupIOX.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerCgroupIOX proto.InternalMessageInfo

func (m *ContainerCgroupIOX) GetSio() uint64 {
	if m != nil {
		return m.Sio
	}
	return 0
}

func (m *ContainerCgroupIOX) GetAsio() uint64 {
	if m != nil {
		return m.Asio
	}
	return 0
}

func (m *ContainerCgroupIOX) GetSyncbytes() uint64 {
	if m != nil {
		return m.Syncbytes
	}
	return 0
}

func (m *ContainerCgroupIOX) GetAsyncbytes() uint64 {
	if m != nil {
		return m.Asyncbytes
	}
	return 0
}

func (m *ContainerCgroupIOX) GetMetaWrites() uint64 {
	if m != nil {
		return m.MetaWrites
	}
	return 0
}

func (m *ContainerCgroupIOX) GetIoUp() uint64 {
	if m != nil {
		return m.IoUp
	}
	return 0
}

func (m *ContainerCgroupIOX) GetIoDown() uint64 {
	if m != nil {
		return m.IoDown
	}
	return 0
}

func (m *ContainerCgroupIOX) GetMajor() int32 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *ContainerCgroupIOX) GetMinor() int32 {
	if m != nil {
		return m.Minor
	}
	return 0
}

type ContainerCgroupLoad struct {
	Load1                uint64   `protobuf:"varint,1,opt,name=load1,proto3" json:"load1,omitempty"`
	Load5                uint64   `protobuf:"varint,2,opt,name=load5,proto3" json:"load5,omitempty"`
	Load15               uint64   `protobuf:"varint,3,opt,name=load15,proto3" json:"load15,omitempty"`
	RLoad1               uint64   `protobuf:"varint,4,opt,name=r_load1,json=rLoad1,proto3" json:"r_load1,omitempty"`
	RLoad5               uint64   `protobuf:"varint,5,opt,name=r_load5,json=rLoad5,proto3" json:"r_load5,omitempty"`
	RLoad15              uint64   `protobuf:"varint,6,opt,name=r_load15,json=rLoad15,proto3" json:"r_load15,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerCgroupLoad) Reset()         { *m = ContainerCgroupLoad{} }
func (m *ContainerCgroupLoad) String() string { return proto.CompactTextString(m) }
func (*ContainerCgroupLoad) ProtoMessage()    {}
func (*ContainerCgroupLoad) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{88}
}
func (m *ContainerCgroupLoad) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerCgroupLoad) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerCgroupLoad.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerCgroupLoad) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerCgroupLoad.Merge(m, src)
}
func (m *ContainerCgroupLoad) XXX_Size() int {
	return m.Size()
}
func (m *ContainerCgroupLoad) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerCgroupLoad.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerCgroupLoad proto.InternalMessageInfo

func (m *ContainerCgroupLoad) GetLoad1() uint64 {
	if m != nil {
		return m.Load1
	}
	return 0
}

func (m *ContainerCgroupLoad) GetLoad5() uint64 {
	if m != nil {
		return m.Load5
	}
	return 0
}

func (m *ContainerCgroupLoad) GetLoad15() uint64 {
	if m != nil {
		return m.Load15
	}
	return 0
}

func (m *ContainerCgroupLoad) GetRLoad1() uint64 {
	if m != nil {
		return m.RLoad1
	}
	return 0
}

func (m *ContainerCgroupLoad) GetRLoad5() uint64 {
	if m != nil {
		return m.RLoad5
	}
	return 0
}

func (m *ContainerCgroupLoad) GetRLoad15() uint64 {
	if m != nil {
		return m.RLoad15
	}
	return 0
}

type ContainerCgroupMem struct {
	Total                uint64   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Rss                  uint64   `protobuf:"varint,2,opt,name=rss,proto3" json:"rss,omitempty"`
	Cache                uint64   `protobuf:"varint,3,opt,name=cache,proto3" json:"cache,omitempty"`
	Avail                uint64   `protobuf:"varint,4,opt,name=avail,proto3" json:"avail,omitempty"`
	Slab                 uint64   `protobuf:"varint,5,opt,name=slab,proto3" json:"slab,omitempty"`
	Swap                 uint64   `protobuf:"varint,6,opt,name=swap,proto3" json:"swap,omitempty"`
	Map                  uint64   `protobuf:"varint,7,opt,name=map,proto3" json:"map,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerCgroupMem) Reset()         { *m = ContainerCgroupMem{} }
func (m *ContainerCgroupMem) String() string { return proto.CompactTextString(m) }
func (*ContainerCgroupMem) ProtoMessage()    {}
func (*ContainerCgroupMem) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{89}
}
func (m *ContainerCgroupMem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerCgroupMem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerCgroupMem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerCgroupMem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerCgroupMem.Merge(m, src)
}
func (m *ContainerCgroupMem) XXX_Size() int {
	return m.Size()
}
func (m *ContainerCgroupMem) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerCgroupMem.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerCgroupMem proto.InternalMessageInfo

func (m *ContainerCgroupMem) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ContainerCgroupMem) GetRss() uint64 {
	if m != nil {
		return m.Rss
	}
	return 0
}

func (m *ContainerCgroupMem) GetCache() uint64 {
	if m != nil {
		return m.Cache
	}
	return 0
}

func (m *ContainerCgroupMem) GetAvail() uint64 {
	if m != nil {
		return m.Avail
	}
	return 0
}

func (m *ContainerCgroupMem) GetSlab() uint64 {
	if m != nil {
		return m.Slab
	}
	return 0
}

func (m *ContainerCgroupMem) GetSwap() uint64 {
	if m != nil {
		return m.Swap
	}
	return 0
}

func (m *ContainerCgroupMem) GetMap() uint64 {
	if m != nil {
		return m.Map
	}
	return 0
}

type ContainerCgroupMemDelay struct {
	AggregateDirect      uint64   `protobuf:"varint,1,opt,name=aggregate_direct,json=aggregateDirect,proto3" json:"aggregate_direct,omitempty"`
	AggregateBackgroud   uint64   `protobuf:"varint,2,opt,name=aggregate_backgroud,json=aggregateBackgroud,proto3" json:"aggregate_backgroud,omitempty"`
	AggregateTotal       uint64   `protobuf:"varint,3,opt,name=aggregate_total,json=aggregateTotal,proto3" json:"aggregate_total,omitempty"`
	MdsSomeLoad1         uint64   `protobuf:"varint,4,opt,name=mds_some_load1,json=mdsSomeLoad1,proto3" json:"mds_some_load1,omitempty"`
	MdsSomeLoad5         uint64   `protobuf:"varint,5,opt,name=mds_some_load5,json=mdsSomeLoad5,proto3" json:"mds_some_load5,omitempty"`
	MdsSomeLoad15        uint64   `protobuf:"varint,6,opt,name=mds_some_load15,json=mdsSomeLoad15,proto3" json:"mds_some_load15,omitempty"`
	MdsFullLoad1         uint64   `protobuf:"varint,7,opt,name=mds_full_load1,json=mdsFullLoad1,proto3" json:"mds_full_load1,omitempty"`
	MdsFullLoad5         uint64   `protobuf:"varint,8,opt,name=mds_full_load5,json=mdsFullLoad5,proto3" json:"mds_full_load5,omitempty"`
	MdsFullLoad15        uint64   `protobuf:"varint,9,opt,name=mds_full_load15,json=mdsFullLoad15,proto3" json:"mds_full_load15,omitempty"`
	DelayData            []uint64 `protobuf:"varint,10,rep,packed,name=delay_data,json=delayData,proto3" json:"delay_data,omitempty"`
	WaitIf               uint64   `protobuf:"varint,11,opt,name=wait_if,json=waitIf,proto3" json:"wait_if,omitempty"`
	WbWait               uint64   `protobuf:"varint,12,opt,name=wb_wait,json=wbWait,proto3" json:"wb_wait,omitempty"`
	WaitOnPageWb         uint64   `protobuf:"varint,13,opt,name=wait_on_page_wb,json=waitOnPageWb,proto3" json:"wait_on_page_wb,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerCgroupMemDelay) Reset()         { *m = ContainerCgroupMemDelay{} }
func (m *ContainerCgroupMemDelay) String() string { return proto.CompactTextString(m) }
func (*ContainerCgroupMemDelay) ProtoMessage()    {}
func (*ContainerCgroupMemDelay) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{90}
}
func (m *ContainerCgroupMemDelay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerCgroupMemDelay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerCgroupMemDelay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerCgroupMemDelay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerCgroupMemDelay.Merge(m, src)
}
func (m *ContainerCgroupMemDelay) XXX_Size() int {
	return m.Size()
}
func (m *ContainerCgroupMemDelay) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerCgroupMemDelay.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerCgroupMemDelay proto.InternalMessageInfo

func (m *ContainerCgroupMemDelay) GetAggregateDirect() uint64 {
	if m != nil {
		return m.AggregateDirect
	}
	return 0
}

func (m *ContainerCgroupMemDelay) GetAggregateBackgroud() uint64 {
	if m != nil {
		return m.AggregateBackgroud
	}
	return 0
}

func (m *ContainerCgroupMemDelay) GetAggregateTotal() uint64 {
	if m != nil {
		return m.AggregateTotal
	}
	return 0
}

func (m *ContainerCgroupMemDelay) GetMdsSomeLoad1() uint64 {
	if m != nil {
		return m.MdsSomeLoad1
	}
	return 0
}

func (m *ContainerCgroupMemDelay) GetMdsSomeLoad5() uint64 {
	if m != nil {
		return m.MdsSomeLoad5
	}
	return 0
}

func (m *ContainerCgroupMemDelay) GetMdsSomeLoad15() uint64 {
	if m != nil {
		return m.MdsSomeLoad15
	}
	return 0
}

func (m *ContainerCgroupMemDelay) GetMdsFullLoad1() uint64 {
	if m != nil {
		return m.MdsFullLoad1
	}
	return 0
}

func (m *ContainerCgroupMemDelay) GetMdsFullLoad5() uint64 {
	if m != nil {
		return m.MdsFullLoad5
	}
	return 0
}

func (m *ContainerCgroupMemDelay) GetMdsFullLoad15() uint64 {
	if m != nil {
		return m.MdsFullLoad15
	}
	return 0
}

func (m *ContainerCgroupMemDelay) GetDelayData() []uint64 {
	if m != nil {
		return m.DelayData
	}
	return nil
}

func (m *ContainerCgroupMemDelay) GetWaitIf() uint64 {
	if m != nil {
		return m.WaitIf
	}
	return 0
}

func (m *ContainerCgroupMemDelay) GetWbWait() uint64 {
	if m != nil {
		return m.WbWait
	}
	return 0
}

func (m *ContainerCgroupMemDelay) GetWaitOnPageWb() uint64 {
	if m != nil {
		return m.WaitOnPageWb
	}
	return 0
}

type ContainerCgroupLatencyStat struct {
	Ticks                []uint64 `protobuf:"varint,1,rep,packed,name=ticks,proto3" json:"ticks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerCgroupLatencyStat) Reset()         { *m = ContainerCgroupLatencyStat{} }
func (m *ContainerCgroupLatencyStat) String() string { return proto.CompactTextString(m) }
func (*ContainerCgroupLatencyStat) ProtoMessage()    {}
func (*ContainerCgroupLatencyStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{91}
}
func (m *ContainerCgroupLatencyStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerCgroupLatencyStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerCgroupLatencyStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerCgroupLatencyStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerCgroupLatencyStat.Merge(m, src)
}
func (m *ContainerCgroupLatencyStat) XXX_Size() int {
	return m.Size()
}
func (m *ContainerCgroupLatencyStat) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerCgroupLatencyStat.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerCgroupLatencyStat proto.InternalMessageInfo

func (m *ContainerCgroupLatencyStat) GetTicks() []uint64 {
	if m != nil {
		return m.Ticks
	}
	return nil
}

type ContainerCgroupMemx struct {
	Aanon                uint64   `protobuf:"varint,1,opt,name=aanon,proto3" json:"aanon,omitempty"`
	Ianon                uint64   `protobuf:"varint,2,opt,name=ianon,proto3" json:"ianon,omitempty"`
	Afile                uint64   `protobuf:"varint,3,opt,name=afile,proto3" json:"afile,omitempty"`
	Ifile                uint64   `protobuf:"varint,4,opt,name=ifile,proto3" json:"ifile,omitempty"`
	Mpfile               uint64   `protobuf:"varint,5,opt,name=mpfile,proto3" json:"mpfile,omitempty"`
	Dirty                uint64   `protobuf:"varint,6,opt,name=dirty,proto3" json:"dirty,omitempty"`
	Wback                uint64   `protobuf:"varint,7,opt,name=wback,proto3" json:"wback,omitempty"`
	Slab                 uint64   `protobuf:"varint,8,opt,name=slab,proto3" json:"slab,omitempty"`
	Lock                 uint64   `protobuf:"varint,9,opt,name=lock,proto3" json:"lock,omitempty"`
	Rss                  uint64   `protobuf:"varint,10,opt,name=rss,proto3" json:"rss,omitempty"`
	Huge                 uint64   `protobuf:"varint,11,opt,name=huge,proto3" json:"huge,omitempty"`
	Swap                 uint64   `protobuf:"varint,12,opt,name=swap,proto3" json:"swap,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerCgroupMemx) Reset()         { *m = ContainerCgroupMemx{} }
func (m *ContainerCgroupMemx) String() string { return proto.CompactTextString(m) }
func (*ContainerCgroupMemx) ProtoMessage()    {}
func (*ContainerCgroupMemx) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{92}
}
func (m *ContainerCgroupMemx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerCgroupMemx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerCgroupMemx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerCgroupMemx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerCgroupMemx.Merge(m, src)
}
func (m *ContainerCgroupMemx) XXX_Size() int {
	return m.Size()
}
func (m *ContainerCgroupMemx) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerCgroupMemx.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerCgroupMemx proto.InternalMessageInfo

func (m *ContainerCgroupMemx) GetAanon() uint64 {
	if m != nil {
		return m.Aanon
	}
	return 0
}

func (m *ContainerCgroupMemx) GetIanon() uint64 {
	if m != nil {
		return m.Ianon
	}
	return 0
}

func (m *ContainerCgroupMemx) GetAfile() uint64 {
	if m != nil {
		return m.Afile
	}
	return 0
}

func (m *ContainerCgroupMemx) GetIfile() uint64 {
	if m != nil {
		return m.Ifile
	}
	return 0
}

func (m *ContainerCgroupMemx) GetMpfile() uint64 {
	if m != nil {
		return m.Mpfile
	}
	return 0
}

func (m *ContainerCgroupMemx) GetDirty() uint64 {
	if m != nil {
		return m.Dirty
	}
	return 0
}

func (m *ContainerCgroupMemx) GetWback() uint64 {
	if m != nil {
		return m.Wback
	}
	return 0
}

func (m *ContainerCgroupMemx) GetSlab() uint64 {
	if m != nil {
		return m.Slab
	}
	return 0
}

func (m *ContainerCgroupMemx) GetLock() uint64 {
	if m != nil {
		return m.Lock
	}
	return 0
}

func (m *ContainerCgroupMemx) GetRss() uint64 {
	if m != nil {
		return m.Rss
	}
	return 0
}

func (m *ContainerCgroupMemx) GetHuge() uint64 {
	if m != nil {
		return m.Huge
	}
	return 0
}

func (m *ContainerCgroupMemx) GetSwap() uint64 {
	if m != nil {
		return m.Swap
	}
	return 0
}

type ContainerCgroupPcsw struct {
	NTasks               uint64   `protobuf:"varint,1,opt,name=n_tasks,json=nTasks,proto3" json:"n_tasks,omitempty"`
	NRunning             uint64   `protobuf:"varint,2,opt,name=n_running,json=nRunning,proto3" json:"n_running,omitempty"`
	NDrunning            uint64   `protobuf:"varint,3,opt,name=n_drunning,json=nDrunning,proto3" json:"n_drunning,omitempty"`
	NSwch                uint64   `protobuf:"varint,4,opt,name=n_swch,json=nSwch,proto3" json:"n_swch,omitempty"`
	NewTask              uint64   `protobuf:"varint,5,opt,name=new_task,json=newTask,proto3" json:"new_task,omitempty"`
	MaxPid               uint64   `protobuf:"varint,6,opt,name=max_pid,json=maxPid,proto3" json:"max_pid,omitempty"`
	NrVolSwch            uint64   `protobuf:"varint,7,opt,name=nr_vol_swch,json=nrVolSwch,proto3" json:"nr_vol_swch,omitempty"`
	NrInvolSwch          uint64   `protobuf:"varint,8,opt,name=nr_invol_swch,json=nrInvolSwch,proto3" json:"nr_invol_swch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerCgroupPcsw) Reset()         { *m = ContainerCgroupPcsw{} }
func (m *ContainerCgroupPcsw) String() string { return proto.CompactTextString(m) }
func (*ContainerCgroupPcsw) ProtoMessage()    {}
func (*ContainerCgroupPcsw) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{93}
}
func (m *ContainerCgroupPcsw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerCgroupPcsw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerCgroupPcsw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerCgroupPcsw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerCgroupPcsw.Merge(m, src)
}
func (m *ContainerCgroupPcsw) XXX_Size() int {
	return m.Size()
}
func (m *ContainerCgroupPcsw) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerCgroupPcsw.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerCgroupPcsw proto.InternalMessageInfo

func (m *ContainerCgroupPcsw) GetNTasks() uint64 {
	if m != nil {
		return m.NTasks
	}
	return 0
}

func (m *ContainerCgroupPcsw) GetNRunning() uint64 {
	if m != nil {
		return m.NRunning
	}
	return 0
}

func (m *ContainerCgroupPcsw) GetNDrunning() uint64 {
	if m != nil {
		return m.NDrunning
	}
	return 0
}

func (m *ContainerCgroupPcsw) GetNSwch() uint64 {
	if m != nil {
		return m.NSwch
	}
	return 0
}

func (m *ContainerCgroupPcsw) GetNewTask() uint64 {
	if m != nil {
		return m.NewTask
	}
	return 0
}

func (m *ContainerCgroupPcsw) GetMaxPid() uint64 {
	if m != nil {
		return m.MaxPid
	}
	return 0
}

func (m *ContainerCgroupPcsw) GetNrVolSwch() uint64 {
	if m != nil {
		return m.NrVolSwch
	}
	return 0
}

func (m *ContainerCgroupPcsw) GetNrInvolSwch() uint64 {
	if m != nil {
		return m.NrInvolSwch
	}
	return 0
}

type ContainerCgroupPercpu struct {
	Ncpu                 int32                   `protobuf:"varint,1,opt,name=ncpu,proto3" json:"ncpu,omitempty"`
	PercpuStats          []*ContainerPercpuStats `protobuf:"bytes,2,rep,name=percpu_stats,json=percpuStats,proto3" json:"percpu_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ContainerCgroupPercpu) Reset()         { *m = ContainerCgroupPercpu{} }
func (m *ContainerCgroupPercpu) String() string { return proto.CompactTextString(m) }
func (*ContainerCgroupPercpu) ProtoMessage()    {}
func (*ContainerCgroupPercpu) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{94}
}
func (m *ContainerCgroupPercpu) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerCgroupPercpu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerCgroupPercpu.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerCgroupPercpu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerCgroupPercpu.Merge(m, src)
}
func (m *ContainerCgroupPercpu) XXX_Size() int {
	return m.Size()
}
func (m *ContainerCgroupPercpu) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerCgroupPercpu.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerCgroupPercpu proto.InternalMessageInfo

func (m *ContainerCgroupPercpu) GetNcpu() int32 {
	if m != nil {
		return m.Ncpu
	}
	return 0
}

func (m *ContainerCgroupPercpu) GetPercpuStats() []*ContainerPercpuStats {
	if m != nil {
		return m.PercpuStats
	}
	return nil
}

type ContainerPercpuStats struct {
	CpuUser              uint64   `protobuf:"varint,1,opt,name=cpu_user,json=cpuUser,proto3" json:"cpu_user,omitempty"`
	CpuSys               uint64   `protobuf:"varint,2,opt,name=cpu_sys,json=cpuSys,proto3" json:"cpu_sys,omitempty"`
	CpuUsage             uint64   `protobuf:"varint,3,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	CpuName              string   `protobuf:"bytes,4,opt,name=cpu_name,json=cpuName,proto3" json:"cpu_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerPercpuStats) Reset()         { *m = ContainerPercpuStats{} }
func (m *ContainerPercpuStats) String() string { return proto.CompactTextString(m) }
func (*ContainerPercpuStats) ProtoMessage()    {}
func (*ContainerPercpuStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{95}
}
func (m *ContainerPercpuStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerPercpuStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerPercpuStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerPercpuStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerPercpuStats.Merge(m, src)
}
func (m *ContainerPercpuStats) XXX_Size() int {
	return m.Size()
}
func (m *ContainerPercpuStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerPercpuStats.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerPercpuStats proto.InternalMessageInfo

func (m *ContainerPercpuStats) GetCpuUser() uint64 {
	if m != nil {
		return m.CpuUser
	}
	return 0
}

func (m *ContainerPercpuStats) GetCpuSys() uint64 {
	if m != nil {
		return m.CpuSys
	}
	return 0
}

func (m *ContainerPercpuStats) GetCpuUsage() uint64 {
	if m != nil {
		return m.CpuUsage
	}
	return 0
}

func (m *ContainerPercpuStats) GetCpuName() string {
	if m != nil {
		return m.CpuName
	}
	return ""
}

type ContainerCgroupSchedbvt struct {
	BatchDelayStrict       uint64   `protobuf:"varint,1,opt,name=batch_delay_strict,json=batchDelayStrict,proto3" json:"batch_delay_strict,omitempty"`
	StrictNoiseCleanBatch  uint64   `protobuf:"varint,2,opt,name=strict_noise_clean_batch,json=strictNoiseCleanBatch,proto3" json:"strict_noise_clean_batch,omitempty"`
	BatchNoiseCleanDelayed uint64   `protobuf:"varint,3,opt,name=batch_noise_clean_delayed,json=batchNoiseCleanDelayed,proto3" json:"batch_noise_clean_delayed,omitempty"`
	Ncpu                   uint64   `protobuf:"varint,4,opt,name=ncpu,proto3" json:"ncpu,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *ContainerCgroupSchedbvt) Reset()         { *m = ContainerCgroupSchedbvt{} }
func (m *ContainerCgroupSchedbvt) String() string { return proto.CompactTextString(m) }
func (*ContainerCgroupSchedbvt) ProtoMessage()    {}
func (*ContainerCgroupSchedbvt) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{96}
}
func (m *ContainerCgroupSchedbvt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerCgroupSchedbvt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerCgroupSchedbvt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerCgroupSchedbvt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerCgroupSchedbvt.Merge(m, src)
}
func (m *ContainerCgroupSchedbvt) XXX_Size() int {
	return m.Size()
}
func (m *ContainerCgroupSchedbvt) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerCgroupSchedbvt.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerCgroupSchedbvt proto.InternalMessageInfo

func (m *ContainerCgroupSchedbvt) GetBatchDelayStrict() uint64 {
	if m != nil {
		return m.BatchDelayStrict
	}
	return 0
}

func (m *ContainerCgroupSchedbvt) GetStrictNoiseCleanBatch() uint64 {
	if m != nil {
		return m.StrictNoiseCleanBatch
	}
	return 0
}

func (m *ContainerCgroupSchedbvt) GetBatchNoiseCleanDelayed() uint64 {
	if m != nil {
		return m.BatchNoiseCleanDelayed
	}
	return 0
}

func (m *ContainerCgroupSchedbvt) GetNcpu() uint64 {
	if m != nil {
		return m.Ncpu
	}
	return 0
}

type ContainerCgroupSchedcg struct {
	CgDelayMs            []uint64 `protobuf:"varint,1,rep,packed,name=cg_delay_ms,json=cgDelayMs,proto3" json:"cg_delay_ms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerCgroupSchedcg) Reset()         { *m = ContainerCgroupSchedcg{} }
func (m *ContainerCgroupSchedcg) String() string { return proto.CompactTextString(m) }
func (*ContainerCgroupSchedcg) ProtoMessage()    {}
func (*ContainerCgroupSchedcg) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{97}
}
func (m *ContainerCgroupSchedcg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerCgroupSchedcg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerCgroupSchedcg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerCgroupSchedcg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerCgroupSchedcg.Merge(m, src)
}
func (m *ContainerCgroupSchedcg) XXX_Size() int {
	return m.Size()
}
func (m *ContainerCgroupSchedcg) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerCgroupSchedcg.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerCgroupSchedcg proto.InternalMessageInfo

func (m *ContainerCgroupSchedcg) GetCgDelayMs() []uint64 {
	if m != nil {
		return m.CgDelayMs
	}
	return nil
}

type ContainerCgroupSchedTask struct {
	TasksDelayMs         []uint64 `protobuf:"varint,1,rep,packed,name=tasks_delay_ms,json=tasksDelayMs,proto3" json:"tasks_delay_ms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerCgroupSchedTask) Reset()         { *m = ContainerCgroupSchedTask{} }
func (m *ContainerCgroupSchedTask) String() string { return proto.CompactTextString(m) }
func (*ContainerCgroupSchedTask) ProtoMessage()    {}
func (*ContainerCgroupSchedTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{98}
}
func (m *ContainerCgroupSchedTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerCgroupSchedTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerCgroupSchedTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerCgroupSchedTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerCgroupSchedTask.Merge(m, src)
}
func (m *ContainerCgroupSchedTask) XXX_Size() int {
	return m.Size()
}
func (m *ContainerCgroupSchedTask) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerCgroupSchedTask.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerCgroupSchedTask proto.InternalMessageInfo

func (m *ContainerCgroupSchedTask) GetTasksDelayMs() []uint64 {
	if m != nil {
		return m.TasksDelayMs
	}
	return nil
}

type ContainerCgroupTcpStats struct {
	ActiveOpens          uint64   `protobuf:"varint,1,opt,name=active_opens,json=activeOpens,proto3" json:"active_opens,omitempty"`
	PassiveOpens         uint64   `protobuf:"varint,2,opt,name=passive_opens,json=passiveOpens,proto3" json:"passive_opens,omitempty"`
	InSegs               uint64   `protobuf:"varint,3,opt,name=in_segs,json=inSegs,proto3" json:"in_segs,omitempty"`
	OutSegs              uint64   `protobuf:"varint,4,opt,name=out_segs,json=outSegs,proto3" json:"out_segs,omitempty"`
	AttemptFails         uint64   `protobuf:"varint,5,opt,name=attempt_fails,json=attemptFails,proto3" json:"attempt_fails,omitempty"`
	EstabResets          uint64   `protobuf:"varint,6,opt,name=estab_resets,json=estabResets,proto3" json:"estab_resets,omitempty"`
	CurrEstab            uint64   `protobuf:"varint,7,opt,name=curr_estab,json=currEstab,proto3" json:"curr_estab,omitempty"`
	RetransSegs          uint64   `protobuf:"varint,8,opt,name=retrans_segs,json=retransSegs,proto3" json:"retrans_segs,omitempty"`
	InErrs               uint64   `protobuf:"varint,9,opt,name=in_errs,json=inErrs,proto3" json:"in_errs,omitempty"`
	OutRsts              uint64   `protobuf:"varint,10,opt,name=out_rsts,json=outRsts,proto3" json:"out_rsts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerCgroupTcpStats) Reset()         { *m = ContainerCgroupTcpStats{} }
func (m *ContainerCgroupTcpStats) String() string { return proto.CompactTextString(m) }
func (*ContainerCgroupTcpStats) ProtoMessage()    {}
func (*ContainerCgroupTcpStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{99}
}
func (m *ContainerCgroupTcpStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerCgroupTcpStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerCgroupTcpStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerCgroupTcpStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerCgroupTcpStats.Merge(m, src)
}
func (m *ContainerCgroupTcpStats) XXX_Size() int {
	return m.Size()
}
func (m *ContainerCgroupTcpStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerCgroupTcpStats.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerCgroupTcpStats proto.InternalMessageInfo

func (m *ContainerCgroupTcpStats) GetActiveOpens() uint64 {
	if m != nil {
		return m.ActiveOpens
	}
	return 0
}

func (m *ContainerCgroupTcpStats) GetPassiveOpens() uint64 {
	if m != nil {
		return m.PassiveOpens
	}
	return 0
}

func (m *ContainerCgroupTcpStats) GetInSegs() uint64 {
	if m != nil {
		return m.InSegs
	}
	return 0
}

func (m *ContainerCgroupTcpStats) GetOutSegs() uint64 {
	if m != nil {
		return m.OutSegs
	}
	return 0
}

func (m *ContainerCgroupTcpStats) GetAttemptFails() uint64 {
	if m != nil {
		return m.AttemptFails
	}
	return 0
}

func (m *ContainerCgroupTcpStats) GetEstabResets() uint64 {
	if m != nil {
		return m.EstabResets
	}
	return 0
}

func (m *ContainerCgroupTcpStats) GetCurrEstab() uint64 {
	if m != nil {
		return m.CurrEstab
	}
	return 0
}

func (m *ContainerCgroupTcpStats) GetRetransSegs() uint64 {
	if m != nil {
		return m.RetransSegs
	}
	return 0
}

func (m *ContainerCgroupTcpStats) GetInErrs() uint64 {
	if m != nil {
		return m.InErrs
	}
	return 0
}

func (m *ContainerCgroupTcpStats) GetOutRsts() uint64 {
	if m != nil {
		return m.OutRsts
	}
	return 0
}

type ContainerCgroupTcpxStats struct {
	TcpLostRetrans       uint64   `protobuf:"varint,1,opt,name=tcp_lost_retrans,json=tcpLostRetrans,proto3" json:"tcp_lost_retrans,omitempty"`
	TcpSynRetrans        uint64   `protobuf:"varint,2,opt,name=tcp_syn_retrans,json=tcpSynRetrans,proto3" json:"tcp_syn_retrans,omitempty"`
	TcpFastRetrans       uint64   `protobuf:"varint,3,opt,name=tcp_fast_retrans,json=tcpFastRetrans,proto3" json:"tcp_fast_retrans,omitempty"`
	TcpForwardRetrans    uint64   `protobuf:"varint,4,opt,name=tcp_forward_retrans,json=tcpForwardRetrans,proto3" json:"tcp_forward_retrans,omitempty"`
	TcpSlowstartRetrans  uint64   `protobuf:"varint,5,opt,name=tcp_slowstart_retrans,json=tcpSlowstartRetrans,proto3" json:"tcp_slowstart_retrans,omitempty"`
	TcpListenOverflow    uint64   `protobuf:"varint,6,opt,name=tcp_listen_overflow,json=tcpListenOverflow,proto3" json:"tcp_listen_overflow,omitempty"`
	TcpListenDrop        uint64   `protobuf:"varint,7,opt,name=tcp_listen_drop,json=tcpListenDrop,proto3" json:"tcp_listen_drop,omitempty"`
	TcpAbortData         uint64   `protobuf:"varint,8,opt,name=tcp_abort_data,json=tcpAbortData,proto3" json:"tcp_abort_data,omitempty"`
	TcpAbortClose        uint64   `protobuf:"varint,9,opt,name=tcp_abort_close,json=tcpAbortClose,proto3" json:"tcp_abort_close,omitempty"`
	TcpAbortMem          uint64   `protobuf:"varint,10,opt,name=tcp_abort_mem,json=tcpAbortMem,proto3" json:"tcp_abort_mem,omitempty"`
	TcpAbortTimeout      uint64   `protobuf:"varint,11,opt,name=tcp_abort_timeout,json=tcpAbortTimeout,proto3" json:"tcp_abort_timeout,omitempty"`
	TcpAbortLinger       uint64   `protobuf:"varint,12,opt,name=tcp_abort_linger,json=tcpAbortLinger,proto3" json:"tcp_abort_linger,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerCgroupTcpxStats) Reset()         { *m = ContainerCgroupTcpxStats{} }
func (m *ContainerCgroupTcpxStats) String() string { return proto.CompactTextString(m) }
func (*ContainerCgroupTcpxStats) ProtoMessage()    {}
func (*ContainerCgroupTcpxStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{100}
}
func (m *ContainerCgroupTcpxStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerCgroupTcpxStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerCgroupTcpxStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerCgroupTcpxStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerCgroupTcpxStats.Merge(m, src)
}
func (m *ContainerCgroupTcpxStats) XXX_Size() int {
	return m.Size()
}
func (m *ContainerCgroupTcpxStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerCgroupTcpxStats.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerCgroupTcpxStats proto.InternalMessageInfo

func (m *ContainerCgroupTcpxStats) GetTcpLostRetrans() uint64 {
	if m != nil {
		return m.TcpLostRetrans
	}
	return 0
}

func (m *ContainerCgroupTcpxStats) GetTcpSynRetrans() uint64 {
	if m != nil {
		return m.TcpSynRetrans
	}
	return 0
}

func (m *ContainerCgroupTcpxStats) GetTcpFastRetrans() uint64 {
	if m != nil {
		return m.TcpFastRetrans
	}
	return 0
}

func (m *ContainerCgroupTcpxStats) GetTcpForwardRetrans() uint64 {
	if m != nil {
		return m.TcpForwardRetrans
	}
	return 0
}

func (m *ContainerCgroupTcpxStats) GetTcpSlowstartRetrans() uint64 {
	if m != nil {
		return m.TcpSlowstartRetrans
	}
	return 0
}

func (m *ContainerCgroupTcpxStats) GetTcpListenOverflow() uint64 {
	if m != nil {
		return m.TcpListenOverflow
	}
	return 0
}

func (m *ContainerCgroupTcpxStats) GetTcpListenDrop() uint64 {
	if m != nil {
		return m.TcpListenDrop
	}
	return 0
}

func (m *ContainerCgroupTcpxStats) GetTcpAbortData() uint64 {
	if m != nil {
		return m.TcpAbortData
	}
	return 0
}

func (m *ContainerCgroupTcpxStats) GetTcpAbortClose() uint64 {
	if m != nil {
		return m.TcpAbortClose
	}
	return 0
}

func (m *ContainerCgroupTcpxStats) GetTcpAbortMem() uint64 {
	if m != nil {
		return m.TcpAbortMem
	}
	return 0
}

func (m *ContainerCgroupTcpxStats) GetTcpAbortTimeout() uint64 {
	if m != nil {
		return m.TcpAbortTimeout
	}
	return 0
}

func (m *ContainerCgroupTcpxStats) GetTcpAbortLinger() uint64 {
	if m != nil {
		return m.TcpAbortLinger
	}
	return 0
}

type ContainerCgroupTrafficStats struct {
	Bytein               uint64   `protobuf:"varint,1,opt,name=bytein,proto3" json:"bytein,omitempty"`
	Byteout              uint64   `protobuf:"varint,2,opt,name=byteout,proto3" json:"byteout,omitempty"`
	Pktin                uint64   `protobuf:"varint,3,opt,name=pktin,proto3" json:"pktin,omitempty"`
	Pktout               uint64   `protobuf:"varint,4,opt,name=pktout,proto3" json:"pktout,omitempty"`
	Pkterrin             uint64   `protobuf:"varint,5,opt,name=pkterrin,proto3" json:"pkterrin,omitempty"`
	Pktdrpin             uint64   `protobuf:"varint,6,opt,name=pktdrpin,proto3" json:"pktdrpin,omitempty"`
	Pkterrout            uint64   `protobuf:"varint,7,opt,name=pkterrout,proto3" json:"pkterrout,omitempty"`
	Pktdrpout            uint64   `protobuf:"varint,8,opt,name=pktdrpout,proto3" json:"pktdrpout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerCgroupTrafficStats) Reset()         { *m = ContainerCgroupTrafficStats{} }
func (m *ContainerCgroupTrafficStats) String() string { return proto.CompactTextString(m) }
func (*ContainerCgroupTrafficStats) ProtoMessage()    {}
func (*ContainerCgroupTrafficStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{101}
}
func (m *ContainerCgroupTrafficStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerCgroupTrafficStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerCgroupTrafficStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerCgroupTrafficStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerCgroupTrafficStats.Merge(m, src)
}
func (m *ContainerCgroupTrafficStats) XXX_Size() int {
	return m.Size()
}
func (m *ContainerCgroupTrafficStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerCgroupTrafficStats.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerCgroupTrafficStats proto.InternalMessageInfo

func (m *ContainerCgroupTrafficStats) GetBytein() uint64 {
	if m != nil {
		return m.Bytein
	}
	return 0
}

func (m *ContainerCgroupTrafficStats) GetByteout() uint64 {
	if m != nil {
		return m.Byteout
	}
	return 0
}

func (m *ContainerCgroupTrafficStats) GetPktin() uint64 {
	if m != nil {
		return m.Pktin
	}
	return 0
}

func (m *ContainerCgroupTrafficStats) GetPktout() uint64 {
	if m != nil {
		return m.Pktout
	}
	return 0
}

func (m *ContainerCgroupTrafficStats) GetPkterrin() uint64 {
	if m != nil {
		return m.Pkterrin
	}
	return 0
}

func (m *ContainerCgroupTrafficStats) GetPktdrpin() uint64 {
	if m != nil {
		return m.Pktdrpin
	}
	return 0
}

func (m *ContainerCgroupTrafficStats) GetPkterrout() uint64 {
	if m != nil {
		return m.Pkterrout
	}
	return 0
}

func (m *ContainerCgroupTrafficStats) GetPktdrpout() uint64 {
	if m != nil {
		return m.Pktdrpout
	}
	return 0
}

type ContainerCgroupUdpStats struct {
	InDatagrams          uint64   `protobuf:"varint,1,opt,name=in_datagrams,json=inDatagrams,proto3" json:"in_datagrams,omitempty"`
	OutDatagrams         uint64   `protobuf:"varint,2,opt,name=out_datagrams,json=outDatagrams,proto3" json:"out_datagrams,omitempty"`
	NoPorts              uint64   `protobuf:"varint,3,opt,name=no_ports,json=noPorts,proto3" json:"no_ports,omitempty"`
	InErrors             uint64   `protobuf:"varint,4,opt,name=in_errors,json=inErrors,proto3" json:"in_errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerCgroupUdpStats) Reset()         { *m = ContainerCgroupUdpStats{} }
func (m *ContainerCgroupUdpStats) String() string { return proto.CompactTextString(m) }
func (*ContainerCgroupUdpStats) ProtoMessage()    {}
func (*ContainerCgroupUdpStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{102}
}
func (m *ContainerCgroupUdpStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerCgroupUdpStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerCgroupUdpStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerCgroupUdpStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerCgroupUdpStats.Merge(m, src)
}
func (m *ContainerCgroupUdpStats) XXX_Size() int {
	return m.Size()
}
func (m *ContainerCgroupUdpStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerCgroupUdpStats.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerCgroupUdpStats proto.InternalMessageInfo

func (m *ContainerCgroupUdpStats) GetInDatagrams() uint64 {
	if m != nil {
		return m.InDatagrams
	}
	return 0
}

func (m *ContainerCgroupUdpStats) GetOutDatagrams() uint64 {
	if m != nil {
		return m.OutDatagrams
	}
	return 0
}

func (m *ContainerCgroupUdpStats) GetNoPorts() uint64 {
	if m != nil {
		return m.NoPorts
	}
	return 0
}

func (m *ContainerCgroupUdpStats) GetInErrors() uint64 {
	if m != nil {
		return m.InErrors
	}
	return 0
}

type ContainerCgroupVm struct {
	PageIn               uint64   `protobuf:"varint,1,opt,name=page_in,json=pageIn,proto3" json:"page_in,omitempty"`
	PageOut              uint64   `protobuf:"varint,2,opt,name=page_out,json=pageOut,proto3" json:"page_out,omitempty"`
	PageFault            uint64   `protobuf:"varint,3,opt,name=page_fault,json=pageFault,proto3" json:"page_fault,omitempty"`
	Steal                uint64   `protobuf:"varint,4,opt,name=steal,proto3" json:"steal,omitempty"`
	Dsteal               uint64   `protobuf:"varint,5,opt,name=dsteal,proto3" json:"dsteal,omitempty"`
	Scan                 uint64   `protobuf:"varint,6,opt,name=scan,proto3" json:"scan,omitempty"`
	Dirty                uint64   `protobuf:"varint,7,opt,name=dirty,proto3" json:"dirty,omitempty"`
	Failcnt              uint64   `protobuf:"varint,8,opt,name=failcnt,proto3" json:"failcnt,omitempty"`
	Allocstall           uint64   `protobuf:"varint,9,opt,name=allocstall,proto3" json:"allocstall,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerCgroupVm) Reset()         { *m = ContainerCgroupVm{} }
func (m *ContainerCgroupVm) String() string { return proto.CompactTextString(m) }
func (*ContainerCgroupVm) ProtoMessage()    {}
func (*ContainerCgroupVm) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{103}
}
func (m *ContainerCgroupVm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerCgroupVm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerCgroupVm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerCgroupVm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerCgroupVm.Merge(m, src)
}
func (m *ContainerCgroupVm) XXX_Size() int {
	return m.Size()
}
func (m *ContainerCgroupVm) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerCgroupVm.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerCgroupVm proto.InternalMessageInfo

func (m *ContainerCgroupVm) GetPageIn() uint64 {
	if m != nil {
		return m.PageIn
	}
	return 0
}

func (m *ContainerCgroupVm) GetPageOut() uint64 {
	if m != nil {
		return m.PageOut
	}
	return 0
}

func (m *ContainerCgroupVm) GetPageFault() uint64 {
	if m != nil {
		return m.PageFault
	}
	return 0
}

func (m *ContainerCgroupVm) GetSteal() uint64 {
	if m != nil {
		return m.Steal
	}
	return 0
}

func (m *ContainerCgroupVm) GetDsteal() uint64 {
	if m != nil {
		return m.Dsteal
	}
	return 0
}

func (m *ContainerCgroupVm) GetScan() uint64 {
	if m != nil {
		return m.Scan
	}
	return 0
}

func (m *ContainerCgroupVm) GetDirty() uint64 {
	if m != nil {
		return m.Dirty
	}
	return 0
}

func (m *ContainerCgroupVm) GetFailcnt() uint64 {
	if m != nil {
		return m.Failcnt
	}
	return 0
}

func (m *ContainerCgroupVm) GetAllocstall() uint64 {
	if m != nil {
		return m.Allocstall
	}
	return 0
}

type ContainerPartitionStats struct {
	Bsize                int32    `protobuf:"varint,1,opt,name=bsize,proto3" json:"bsize,omitempty"`
	Blocks               uint64   `protobuf:"varint,2,opt,name=blocks,proto3" json:"blocks,omitempty"`
	Bfree                uint64   `protobuf:"varint,3,opt,name=bfree,proto3" json:"bfree,omitempty"`
	Bavail               uint64   `protobuf:"varint,4,opt,name=bavail,proto3" json:"bavail,omitempty"`
	Itotal               uint64   `protobuf:"varint,5,opt,name=itotal,proto3" json:"itotal,omitempty"`
	Ifree                uint64   `protobuf:"varint,6,opt,name=ifree,proto3" json:"ifree,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerPartitionStats) Reset()         { *m = ContainerPartitionStats{} }
func (m *ContainerPartitionStats) String() string { return proto.CompactTextString(m) }
func (*ContainerPartitionStats) ProtoMessage()    {}
func (*ContainerPartitionStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{104}
}
func (m *ContainerPartitionStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerPartitionStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerPartitionStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerPartitionStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerPartitionStats.Merge(m, src)
}
func (m *ContainerPartitionStats) XXX_Size() int {
	return m.Size()
}
func (m *ContainerPartitionStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerPartitionStats.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerPartitionStats proto.InternalMessageInfo

func (m *ContainerPartitionStats) GetBsize() int32 {
	if m != nil {
		return m.Bsize
	}
	return 0
}

func (m *ContainerPartitionStats) GetBlocks() uint64 {
	if m != nil {
		return m.Blocks
	}
	return 0
}

func (m *ContainerPartitionStats) GetBfree() uint64 {
	if m != nil {
		return m.Bfree
	}
	return 0
}

func (m *ContainerPartitionStats) GetBavail() uint64 {
	if m != nil {
		return m.Bavail
	}
	return 0
}

func (m *ContainerPartitionStats) GetItotal() uint64 {
	if m != nil {
		return m.Itotal
	}
	return 0
}

func (m *ContainerPartitionStats) GetIfree() uint64 {
	if m != nil {
		return m.Ifree
	}
	return 0
}

type ProcessStats struct {
	Pid                  int32                `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	PidStats             *ProcessPidStats     `protobuf:"bytes,2,opt,name=pid_stats,json=pidStats,proto3" json:"pid_stats,omitempty"`
	CgroupSched          *ProcessCgroupSched  `protobuf:"bytes,3,opt,name=cgroup_sched,json=cgroupSched,proto3" json:"cgroup_sched,omitempty"`
	ProcCpuStats         *ProcessProcCpuStats `protobuf:"bytes,4,opt,name=proc_cpu_stats,json=procCpuStats,proto3" json:"proc_cpu_stats,omitempty"`
	ProcIoStats          *ProcessProcIOStats  `protobuf:"bytes,5,opt,name=proc_io_stats,json=procIoStats,proto3" json:"proc_io_stats,omitempty"`
	ProcMemStats         *ProcessProcMemStats `protobuf:"bytes,6,opt,name=proc_mem_stats,json=procMemStats,proto3" json:"proc_mem_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ProcessStats) Reset()         { *m = ProcessStats{} }
func (m *ProcessStats) String() string { return proto.CompactTextString(m) }
func (*ProcessStats) ProtoMessage()    {}
func (*ProcessStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{105}
}
func (m *ProcessStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessStats.Merge(m, src)
}
func (m *ProcessStats) XXX_Size() int {
	return m.Size()
}
func (m *ProcessStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessStats.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessStats proto.InternalMessageInfo

func (m *ProcessStats) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ProcessStats) GetPidStats() *ProcessPidStats {
	if m != nil {
		return m.PidStats
	}
	return nil
}

func (m *ProcessStats) GetCgroupSched() *ProcessCgroupSched {
	if m != nil {
		return m.CgroupSched
	}
	return nil
}

func (m *ProcessStats) GetProcCpuStats() *ProcessProcCpuStats {
	if m != nil {
		return m.ProcCpuStats
	}
	return nil
}

func (m *ProcessStats) GetProcIoStats() *ProcessProcIOStats {
	if m != nil {
		return m.ProcIoStats
	}
	return nil
}

func (m *ProcessStats) GetProcMemStats() *ProcessProcMemStats {
	if m != nil {
		return m.ProcMemStats
	}
	return nil
}

type ProcessPidStats struct {
	UserCpu              uint64   `protobuf:"varint,1,opt,name=user_cpu,json=userCpu,proto3" json:"user_cpu,omitempty"`
	SysCpu               uint64   `protobuf:"varint,2,opt,name=sys_cpu,json=sysCpu,proto3" json:"sys_cpu,omitempty"`
	Mem                  uint64   `protobuf:"varint,3,opt,name=mem,proto3" json:"mem,omitempty"`
	ReadBytes            uint64   `protobuf:"varint,4,opt,name=read_bytes,json=readBytes,proto3" json:"read_bytes,omitempty"`
	WriteBytes           uint64   `protobuf:"varint,5,opt,name=write_bytes,json=writeBytes,proto3" json:"write_bytes,omitempty"`
	Fdcnt                uint64   `protobuf:"varint,6,opt,name=fdcnt,proto3" json:"fdcnt,omitempty"`
	Minflt               uint64   `protobuf:"varint,7,opt,name=minflt,proto3" json:"minflt,omitempty"`
	Majflt               uint64   `protobuf:"varint,8,opt,name=majflt,proto3" json:"majflt,omitempty"`
	Thread               uint64   `protobuf:"varint,9,opt,name=thread,proto3" json:"thread,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessPidStats) Reset()         { *m = ProcessPidStats{} }
func (m *ProcessPidStats) String() string { return proto.CompactTextString(m) }
func (*ProcessPidStats) ProtoMessage()    {}
func (*ProcessPidStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{106}
}
func (m *ProcessPidStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessPidStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessPidStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessPidStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessPidStats.Merge(m, src)
}
func (m *ProcessPidStats) XXX_Size() int {
	return m.Size()
}
func (m *ProcessPidStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessPidStats.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessPidStats proto.InternalMessageInfo

func (m *ProcessPidStats) GetUserCpu() uint64 {
	if m != nil {
		return m.UserCpu
	}
	return 0
}

func (m *ProcessPidStats) GetSysCpu() uint64 {
	if m != nil {
		return m.SysCpu
	}
	return 0
}

func (m *ProcessPidStats) GetMem() uint64 {
	if m != nil {
		return m.Mem
	}
	return 0
}

func (m *ProcessPidStats) GetReadBytes() uint64 {
	if m != nil {
		return m.ReadBytes
	}
	return 0
}

func (m *ProcessPidStats) GetWriteBytes() uint64 {
	if m != nil {
		return m.WriteBytes
	}
	return 0
}

func (m *ProcessPidStats) GetFdcnt() uint64 {
	if m != nil {
		return m.Fdcnt
	}
	return 0
}

func (m *ProcessPidStats) GetMinflt() uint64 {
	if m != nil {
		return m.Minflt
	}
	return 0
}

func (m *ProcessPidStats) GetMajflt() uint64 {
	if m != nil {
		return m.Majflt
	}
	return 0
}

func (m *ProcessPidStats) GetThread() uint64 {
	if m != nil {
		return m.Thread
	}
	return 0
}

type ProcessCgroupSched struct {
	TasksDelayMs         []uint64 `protobuf:"varint,1,rep,packed,name=tasks_delay_ms,json=tasksDelayMs,proto3" json:"tasks_delay_ms,omitempty"`
	BvtDelay             uint64   `protobuf:"varint,2,opt,name=bvt_delay,json=bvtDelay,proto3" json:"bvt_delay,omitempty"`
	NoiseKickDelay       uint64   `protobuf:"varint,3,opt,name=noise_kick_delay,json=noiseKickDelay,proto3" json:"noise_kick_delay,omitempty"`
	LossTime             uint64   `protobuf:"varint,4,opt,name=loss_time,json=lossTime,proto3" json:"loss_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessCgroupSched) Reset()         { *m = ProcessCgroupSched{} }
func (m *ProcessCgroupSched) String() string { return proto.CompactTextString(m) }
func (*ProcessCgroupSched) ProtoMessage()    {}
func (*ProcessCgroupSched) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{107}
}
func (m *ProcessCgroupSched) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessCgroupSched) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessCgroupSched.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessCgroupSched) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessCgroupSched.Merge(m, src)
}
func (m *ProcessCgroupSched) XXX_Size() int {
	return m.Size()
}
func (m *ProcessCgroupSched) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessCgroupSched.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessCgroupSched proto.InternalMessageInfo

func (m *ProcessCgroupSched) GetTasksDelayMs() []uint64 {
	if m != nil {
		return m.TasksDelayMs
	}
	return nil
}

func (m *ProcessCgroupSched) GetBvtDelay() uint64 {
	if m != nil {
		return m.BvtDelay
	}
	return 0
}

func (m *ProcessCgroupSched) GetNoiseKickDelay() uint64 {
	if m != nil {
		return m.NoiseKickDelay
	}
	return 0
}

func (m *ProcessCgroupSched) GetLossTime() uint64 {
	if m != nil {
		return m.LossTime
	}
	return 0
}

type ProcessProcCpuStats struct {
	UserCpu              uint64   `protobuf:"varint,1,opt,name=user_cpu,json=userCpu,proto3" json:"user_cpu,omitempty"`
	SysCpu               uint64   `protobuf:"varint,2,opt,name=sys_cpu,json=sysCpu,proto3" json:"sys_cpu,omitempty"`
	BlkioDelay           uint64   `protobuf:"varint,3,opt,name=blkio_delay,json=blkioDelay,proto3" json:"blkio_delay,omitempty"`
	RunOnCpu             uint64   `protobuf:"varint,4,opt,name=run_on_cpu,json=runOnCpu,proto3" json:"run_on_cpu,omitempty"`
	WaitOnRq             uint64   `protobuf:"varint,5,opt,name=wait_on_rq,json=waitOnRq,proto3" json:"wait_on_rq,omitempty"`
	NThreads             uint64   `protobuf:"varint,6,opt,name=n_threads,json=nThreads,proto3" json:"n_threads,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessProcCpuStats) Reset()         { *m = ProcessProcCpuStats{} }
func (m *ProcessProcCpuStats) String() string { return proto.CompactTextString(m) }
func (*ProcessProcCpuStats) ProtoMessage()    {}
func (*ProcessProcCpuStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{108}
}
func (m *ProcessProcCpuStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessProcCpuStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessProcCpuStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessProcCpuStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessProcCpuStats.Merge(m, src)
}
func (m *ProcessProcCpuStats) XXX_Size() int {
	return m.Size()
}
func (m *ProcessProcCpuStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessProcCpuStats.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessProcCpuStats proto.InternalMessageInfo

func (m *ProcessProcCpuStats) GetUserCpu() uint64 {
	if m != nil {
		return m.UserCpu
	}
	return 0
}

func (m *ProcessProcCpuStats) GetSysCpu() uint64 {
	if m != nil {
		return m.SysCpu
	}
	return 0
}

func (m *ProcessProcCpuStats) GetBlkioDelay() uint64 {
	if m != nil {
		return m.BlkioDelay
	}
	return 0
}

func (m *ProcessProcCpuStats) GetRunOnCpu() uint64 {
	if m != nil {
		return m.RunOnCpu
	}
	return 0
}

func (m *ProcessProcCpuStats) GetWaitOnRq() uint64 {
	if m != nil {
		return m.WaitOnRq
	}
	return 0
}

func (m *ProcessProcCpuStats) GetNThreads() uint64 {
	if m != nil {
		return m.NThreads
	}
	return 0
}

type ProcessProcIOStats struct {
	Rchar                uint64   `protobuf:"varint,1,opt,name=rchar,proto3" json:"rchar,omitempty"`
	Wchar                uint64   `protobuf:"varint,2,opt,name=wchar,proto3" json:"wchar,omitempty"`
	Rbytes               uint64   `protobuf:"varint,3,opt,name=rbytes,proto3" json:"rbytes,omitempty"`
	Wbytes               uint64   `protobuf:"varint,4,opt,name=wbytes,proto3" json:"wbytes,omitempty"`
	Iolat                uint64   `protobuf:"varint,5,opt,name=iolat,proto3" json:"iolat,omitempty"`
	Syscr                uint64   `protobuf:"varint,6,opt,name=syscr,proto3" json:"syscr,omitempty"`
	Syscw                uint64   `protobuf:"varint,7,opt,name=syscw,proto3" json:"syscw,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessProcIOStats) Reset()         { *m = ProcessProcIOStats{} }
func (m *ProcessProcIOStats) String() string { return proto.CompactTextString(m) }
func (*ProcessProcIOStats) ProtoMessage()    {}
func (*ProcessProcIOStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{109}
}
func (m *ProcessProcIOStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessProcIOStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessProcIOStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessProcIOStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessProcIOStats.Merge(m, src)
}
func (m *ProcessProcIOStats) XXX_Size() int {
	return m.Size()
}
func (m *ProcessProcIOStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessProcIOStats.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessProcIOStats proto.InternalMessageInfo

func (m *ProcessProcIOStats) GetRchar() uint64 {
	if m != nil {
		return m.Rchar
	}
	return 0
}

func (m *ProcessProcIOStats) GetWchar() uint64 {
	if m != nil {
		return m.Wchar
	}
	return 0
}

func (m *ProcessProcIOStats) GetRbytes() uint64 {
	if m != nil {
		return m.Rbytes
	}
	return 0
}

func (m *ProcessProcIOStats) GetWbytes() uint64 {
	if m != nil {
		return m.Wbytes
	}
	return 0
}

func (m *ProcessProcIOStats) GetIolat() uint64 {
	if m != nil {
		return m.Iolat
	}
	return 0
}

func (m *ProcessProcIOStats) GetSyscr() uint64 {
	if m != nil {
		return m.Syscr
	}
	return 0
}

func (m *ProcessProcIOStats) GetSyscw() uint64 {
	if m != nil {
		return m.Syscw
	}
	return 0
}

type ProcessProcMemStats struct {
	Usage                uint64   `protobuf:"varint,1,opt,name=usage,proto3" json:"usage,omitempty"`
	Cache                uint64   `protobuf:"varint,2,opt,name=cache,proto3" json:"cache,omitempty"`
	Anon                 uint64   `protobuf:"varint,3,opt,name=anon,proto3" json:"anon,omitempty"`
	Shmem                uint64   `protobuf:"varint,4,opt,name=shmem,proto3" json:"shmem,omitempty"`
	Lock                 uint64   `protobuf:"varint,5,opt,name=lock,proto3" json:"lock,omitempty"`
	Swp                  uint64   `protobuf:"varint,6,opt,name=swp,proto3" json:"swp,omitempty"`
	TotalSwp             uint64   `protobuf:"varint,7,opt,name=total_swp,json=totalSwp,proto3" json:"total_swp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessProcMemStats) Reset()         { *m = ProcessProcMemStats{} }
func (m *ProcessProcMemStats) String() string { return proto.CompactTextString(m) }
func (*ProcessProcMemStats) ProtoMessage()    {}
func (*ProcessProcMemStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{110}
}
func (m *ProcessProcMemStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessProcMemStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessProcMemStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessProcMemStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessProcMemStats.Merge(m, src)
}
func (m *ProcessProcMemStats) XXX_Size() int {
	return m.Size()
}
func (m *ProcessProcMemStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessProcMemStats.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessProcMemStats proto.InternalMessageInfo

func (m *ProcessProcMemStats) GetUsage() uint64 {
	if m != nil {
		return m.Usage
	}
	return 0
}

func (m *ProcessProcMemStats) GetCache() uint64 {
	if m != nil {
		return m.Cache
	}
	return 0
}

func (m *ProcessProcMemStats) GetAnon() uint64 {
	if m != nil {
		return m.Anon
	}
	return 0
}

func (m *ProcessProcMemStats) GetShmem() uint64 {
	if m != nil {
		return m.Shmem
	}
	return 0
}

func (m *ProcessProcMemStats) GetLock() uint64 {
	if m != nil {
		return m.Lock
	}
	return 0
}

func (m *ProcessProcMemStats) GetSwp() uint64 {
	if m != nil {
		return m.Swp
	}
	return 0
}

func (m *ProcessProcMemStats) GetTotalSwp() uint64 {
	if m != nil {
		return m.TotalSwp
	}
	return 0
}

func init() {
	proto.RegisterType((*CreateContainerRequest)(nil), "grpc.CreateContainerRequest")
	proto.RegisterType((*StartContainerRequest)(nil), "grpc.StartContainerRequest")
	proto.RegisterType((*RemoveContainerRequest)(nil), "grpc.RemoveContainerRequest")
	proto.RegisterType((*ExecProcessRequest)(nil), "grpc.ExecProcessRequest")
	proto.RegisterType((*SignalProcessRequest)(nil), "grpc.SignalProcessRequest")
	proto.RegisterType((*WaitProcessRequest)(nil), "grpc.WaitProcessRequest")
	proto.RegisterType((*WaitProcessResponse)(nil), "grpc.WaitProcessResponse")
	proto.RegisterType((*ListProcessesRequest)(nil), "grpc.ListProcessesRequest")
	proto.RegisterType((*ListProcessesResponse)(nil), "grpc.ListProcessesResponse")
	proto.RegisterType((*UpdateContainerRequest)(nil), "grpc.UpdateContainerRequest")
	proto.RegisterType((*StatsContainerRequest)(nil), "grpc.StatsContainerRequest")
	proto.RegisterType((*PauseContainerRequest)(nil), "grpc.PauseContainerRequest")
	proto.RegisterType((*ResumeContainerRequest)(nil), "grpc.ResumeContainerRequest")
	proto.RegisterType((*CpuUsage)(nil), "grpc.CpuUsage")
	proto.RegisterType((*ThrottlingData)(nil), "grpc.ThrottlingData")
	proto.RegisterType((*CpuStats)(nil), "grpc.CpuStats")
	proto.RegisterType((*PidsStats)(nil), "grpc.PidsStats")
	proto.RegisterType((*MemoryData)(nil), "grpc.MemoryData")
	proto.RegisterType((*MemoryStats)(nil), "grpc.MemoryStats")
	proto.RegisterMapType((map[string]uint64)(nil), "grpc.MemoryStats.StatsEntry")
	proto.RegisterType((*BlkioStatsEntry)(nil), "grpc.BlkioStatsEntry")
	proto.RegisterType((*BlkioStats)(nil), "grpc.BlkioStats")
	proto.RegisterType((*HugetlbStats)(nil), "grpc.HugetlbStats")
	proto.RegisterType((*CgroupStats)(nil), "grpc.CgroupStats")
	proto.RegisterMapType((map[string]*HugetlbStats)(nil), "grpc.CgroupStats.HugetlbStatsEntry")
	proto.RegisterType((*NetworkStats)(nil), "grpc.NetworkStats")
	proto.RegisterType((*StatsContainerResponse)(nil), "grpc.StatsContainerResponse")
	proto.RegisterType((*WriteStreamRequest)(nil), "grpc.WriteStreamRequest")
	proto.RegisterType((*WriteStreamResponse)(nil), "grpc.WriteStreamResponse")
	proto.RegisterType((*ReadStreamRequest)(nil), "grpc.ReadStreamRequest")
	proto.RegisterType((*ReadStreamResponse)(nil), "grpc.ReadStreamResponse")
	proto.RegisterType((*CloseStdinRequest)(nil), "grpc.CloseStdinRequest")
	proto.RegisterType((*TtyWinResizeRequest)(nil), "grpc.TtyWinResizeRequest")
	proto.RegisterType((*KernelModule)(nil), "grpc.KernelModule")
	proto.RegisterType((*CreateSandboxRequest)(nil), "grpc.CreateSandboxRequest")
	proto.RegisterType((*DestroySandboxRequest)(nil), "grpc.DestroySandboxRequest")
	proto.RegisterType((*Interfaces)(nil), "grpc.Interfaces")
	proto.RegisterType((*Routes)(nil), "grpc.Routes")
	proto.RegisterType((*UpdateInterfaceRequest)(nil), "grpc.UpdateInterfaceRequest")
	proto.RegisterType((*UpdateRoutesRequest)(nil), "grpc.UpdateRoutesRequest")
	proto.RegisterType((*ListInterfacesRequest)(nil), "grpc.ListInterfacesRequest")
	proto.RegisterType((*ListRoutesRequest)(nil), "grpc.ListRoutesRequest")
	proto.RegisterType((*OnlineCPUMemRequest)(nil), "grpc.OnlineCPUMemRequest")
	proto.RegisterType((*ReseedRandomDevRequest)(nil), "grpc.ReseedRandomDevRequest")
	proto.RegisterType((*AgentDetails)(nil), "grpc.AgentDetails")
	proto.RegisterType((*GuestDetailsRequest)(nil), "grpc.GuestDetailsRequest")
	proto.RegisterType((*GuestDetailsResponse)(nil), "grpc.GuestDetailsResponse")
	proto.RegisterType((*MemHotplugByProbeRequest)(nil), "grpc.MemHotplugByProbeRequest")
	proto.RegisterType((*SetGuestDateTimeRequest)(nil), "grpc.SetGuestDateTimeRequest")
	proto.RegisterType((*Storage)(nil), "grpc.Storage")
	proto.RegisterType((*Device)(nil), "grpc.Device")
	proto.RegisterType((*StringUser)(nil), "grpc.StringUser")
	proto.RegisterType((*CopyFileRequest)(nil), "grpc.CopyFileRequest")
	proto.RegisterType((*StartTracingRequest)(nil), "grpc.StartTracingRequest")
	proto.RegisterType((*StopTracingRequest)(nil), "grpc.StopTracingRequest")
	proto.RegisterType((*ExtendedStatsRequest)(nil), "grpc.ExtendedStatsRequest")
	proto.RegisterType((*ExtendedStatsResponse)(nil), "grpc.ExtendedStatsResponse")
	proto.RegisterType((*PodStats)(nil), "grpc.PodStats")
	proto.RegisterType((*PodBuddyStats)(nil), "grpc.PodBuddyStats")
	proto.RegisterType((*PodCpuStats)(nil), "grpc.PodCpuStats")
	proto.RegisterType((*PodIOStats)(nil), "grpc.PodIOStats")
	proto.RegisterType((*PartInfo)(nil), "grpc.PartInfo")
	proto.RegisterType((*BlkIOInfo)(nil), "grpc.BlkIOInfo")
	proto.RegisterType((*PodIrqStats)(nil), "grpc.PodIrqStats")
	proto.RegisterType((*PodLoadStats)(nil), "grpc.PodLoadStats")
	proto.RegisterType((*PodMemStats)(nil), "grpc.PodMemStats")
	proto.RegisterType((*PodMemxStats)(nil), "grpc.PodMemxStats")
	proto.RegisterType((*PodPartitionStats)(nil), "grpc.PodPartitionStats")
	proto.RegisterType((*PodPcswStats)(nil), "grpc.PodPcswStats")
	proto.RegisterType((*PodPercpuStats)(nil), "grpc.PodPercpuStats")
	proto.RegisterType((*PodPercpuSchedStats)(nil), "grpc.PodPercpuSchedStats")
	proto.RegisterType((*PodSoftirqStats)(nil), "grpc.PodSoftirqStats")
	proto.RegisterType((*PodSwapStats)(nil), "grpc.PodSwapStats")
	proto.RegisterType((*PodTcpStats)(nil), "grpc.PodTcpStats")
	proto.RegisterType((*PodTcpxStats)(nil), "grpc.PodTcpxStats")
	proto.RegisterType((*PodTrafficStats)(nil), "grpc.PodTrafficStats")
	proto.RegisterType((*PodUdpStats)(nil), "grpc.PodUdpStats")
	proto.RegisterType((*PodVmstatStats)(nil), "grpc.PodVmstatStats")
	proto.RegisterType((*PodGpuInfo)(nil), "grpc.PodGpuInfo")
	proto.RegisterType((*GStat)(nil), "grpc.GStat")
	proto.RegisterType((*GMem)(nil), "grpc.GMem")
	proto.RegisterType((*GConfigInfo)(nil), "grpc.GConfigInfo")
	proto.RegisterType((*GOtherInfo)(nil), "grpc.GOtherInfo")
	proto.RegisterType((*ContainerStats)(nil), "grpc.ContainerStats")
	proto.RegisterType((*ContainerBaseStats)(nil), "grpc.ContainerBaseStats")
	proto.RegisterType((*ContainerCgroupCpu)(nil), "grpc.ContainerCgroupCpu")
	proto.RegisterType((*ContainerCgroupCpushare)(nil), "grpc.ContainerCgroupCpushare")
	proto.RegisterType((*ContainerCgroupIO)(nil), "grpc.ContainerCgroupIO")
	proto.RegisterType((*ContainerCgroupIOTime)(nil), "grpc.ContainerCgroupIOTime")
	proto.RegisterType((*ContainerCgroupIOX)(nil), "grpc.ContainerCgroupIOX")
	proto.RegisterType((*ContainerCgroupLoad)(nil), "grpc.ContainerCgroupLoad")
	proto.RegisterType((*ContainerCgroupMem)(nil), "grpc.ContainerCgroupMem")
	proto.RegisterType((*ContainerCgroupMemDelay)(nil), "grpc.ContainerCgroupMemDelay")
	proto.RegisterType((*ContainerCgroupLatencyStat)(nil), "grpc.ContainerCgroupLatencyStat")
	proto.RegisterType((*ContainerCgroupMemx)(nil), "grpc.ContainerCgroupMemx")
	proto.RegisterType((*ContainerCgroupPcsw)(nil), "grpc.ContainerCgroupPcsw")
	proto.RegisterType((*ContainerCgroupPercpu)(nil), "grpc.ContainerCgroupPercpu")
	proto.RegisterType((*ContainerPercpuStats)(nil), "grpc.ContainerPercpuStats")
	proto.RegisterType((*ContainerCgroupSchedbvt)(nil), "grpc.ContainerCgroupSchedbvt")
	proto.RegisterType((*ContainerCgroupSchedcg)(nil), "grpc.ContainerCgroupSchedcg")
	proto.RegisterType((*ContainerCgroupSchedTask)(nil), "grpc.ContainerCgroupSchedTask")
	proto.RegisterType((*ContainerCgroupTcpStats)(nil), "grpc.ContainerCgroupTcpStats")
	proto.RegisterType((*ContainerCgroupTcpxStats)(nil), "grpc.ContainerCgroupTcpxStats")
	proto.RegisterType((*ContainerCgroupTrafficStats)(nil), "grpc.ContainerCgroupTrafficStats")
	proto.RegisterType((*ContainerCgroupUdpStats)(nil), "grpc.ContainerCgroupUdpStats")
	proto.RegisterType((*ContainerCgroupVm)(nil), "grpc.ContainerCgroupVm")
	proto.RegisterType((*ContainerPartitionStats)(nil), "grpc.ContainerPartitionStats")
	proto.RegisterType((*ProcessStats)(nil), "grpc.ProcessStats")
	proto.RegisterType((*ProcessPidStats)(nil), "grpc.ProcessPidStats")
	proto.RegisterType((*ProcessCgroupSched)(nil), "grpc.ProcessCgroupSched")
	proto.RegisterType((*ProcessProcCpuStats)(nil), "grpc.ProcessProcCpuStats")
	proto.RegisterType((*ProcessProcIOStats)(nil), "grpc.ProcessProcIOStats")
	proto.RegisterType((*ProcessProcMemStats)(nil), "grpc.ProcessProcMemStats")
}

func init() { proto.RegisterFile("agent.proto", fileDescriptor_56ede974c0020f77) }

var fileDescriptor_56ede974c0020f77 = []byte{
	// 7954 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7c, 0x4b, 0x8c, 0x24, 0x49,
	0x96, 0x90, 0x22, 0x33, 0x32, 0x33, 0xe2, 0x65, 0x44, 0x7e, 0x3c, 0x3f, 0x95, 0x95, 0xdd, 0x5d,
	0xd3, 0xed, 0xfd, 0x99, 0xea, 0xe9, 0x99, 0xea, 0xa9, 0xea, 0xc9, 0xa9, 0xee, 0x1e, 0x86, 0xde,
	0xae, 0xcc, 0xea, 0xaa, 0x9c, 0xa9, 0xea, 0x4a, 0x3c, 0xab, 0xba, 0x07, 0x21, 0xe4, 0xf2, 0x70,
	0xb7, 0x8c, 0xf4, 0xce, 0x70, 0x37, 0x2f, 0x73, 0x8b, 0x8c, 0xcc, 0x01, 0x21, 0xc1, 0x61, 0x57,
	0x1c, 0xe0, 0x82, 0x84, 0xb4, 0x48, 0xcb, 0x01, 0x24, 0x46, 0x20, 0xb4, 0xd2, 0x82, 0x38, 0x71,
	0xe0, 0xc0, 0x4a, 0xac, 0xb8, 0x00, 0xe2, 0x0c, 0x42, 0x23, 0x71, 0xe0, 0xc6, 0x5f, 0xc0, 0x01,
	0xa1, 0xf7, 0xec, 0x99, 0xb9, 0xc7, 0x27, 0x73, 0x76, 0x9a, 0x96, 0x58, 0xa1, 0xbd, 0x44, 0xd8,
	0x7b, 0xf6, 0xec, 0xd9, 0xff, 0xd9, 0xfb, 0x98, 0x1b, 0x2c, 0x47, 0x7d, 0x91, 0xeb, 0x3b, 0x85,
	0x92, 0x5a, 0x7a, 0xcd, 0xbe, 0x2a, 0xe2, 0xdd, 0xb6, 0x8c, 0x53, 0x83, 0xd8, 0xfd, 0x61, 0x3f,
	0xd5, 0xa7, 0xc3, 0xde, 0x9d, 0x58, 0x66, 0xef, 0x9f, 0x45, 0x3a, 0xfa, 0x5e, 0x2c, 0x73, 0x1d,
	0xa5, 0xb9, 0x50, 0xe5, 0xfb, 0x54, 0xf0, 0xfd, 0xe2, 0xac, 0xff, 0xbe, 0xbe, 0x2c, 0x44, 0x69,
	0x7e, 0xb9, 0xdc, 0x2b, 0x7d, 0x29, 0xfb, 0x03, 0xf1, 0x3e, 0x41, 0xbd, 0xe1, 0xc9, 0xfb, 0x22,
	0x2b, 0xf4, 0xa5, 0xc9, 0xf4, 0x7f, 0x67, 0x0e, 0xb6, 0xf7, 0x95, 0x88, 0xb4, 0xd8, 0xb7, 0xdc,
	0x02, 0xf1, 0x72, 0x28, 0x4a, 0xed, 0xbd, 0x01, 0x1d, 0x57, 0x43, 0x98, 0x26, 0x3b, 0x8d, 0xd7,
	0x1b, 0xb7, 0xdb, 0xc1, 0xb2, 0xc3, 0x1d, 0x26, 0xde, 0x0d, 0x58, 0x12, 0x17, 0x22, 0xc6, 0xdc,
	0x39, 0xca, 0x5d, 0x44, 0xf0, 0x30, 0xf1, 0xee, 0xc2, 0x72, 0xa9, 0x55, 0x9a, 0xf7, 0xc3, 0x61,
	0x29, 0xd4, 0xce, 0xfc, 0xeb, 0x8d, 0xdb, 0xcb, 0xf7, 0xd6, 0xee, 0x60, 0x97, 0xee, 0x1c, 0x53,
	0xc6, 0x8b, 0x52, 0xa8, 0x00, 0x4a, 0x97, 0xf6, 0xde, 0x81, 0xa5, 0x44, 0x9c, 0xa7, 0xb1, 0x28,
	0x77, 0x9a, 0xaf, 0xcf, 0xdf, 0x5e, 0xbe, 0xd7, 0x31, 0xe4, 0x07, 0x84, 0x0c, 0x6c, 0xa6, 0xf7,
	0x2e, 0xb4, 0x4a, 0x2d, 0x55, 0xd4, 0x17, 0xe5, 0xce, 0x02, 0x11, 0x76, 0x2d, 0x5f, 0xc2, 0x06,
	0x2e, 0xdb, 0x7b, 0x15, 0xe6, 0x9f, 0xed, 0x1f, 0xee, 0x2c, 0x52, 0xed, 0xc0, 0x54, 0x85, 0x88,
	0x03, 0x44, 0x7b, 0x6f, 0x42, 0xb7, 0x8c, 0xf2, 0xa4, 0x27, 0x2f, 0xc2, 0x22, 0x4d, 0xf2, 0x72,
	0x67, 0xe9, 0xf5, 0xc6, 0xed, 0x56, 0xd0, 0x61, 0xe4, 0x11, 0xe2, 0xfc, 0x8f, 0x61, 0xeb, 0x58,
	0x47, 0x4a, 0x7f, 0x8d, 0xd1, 0xf1, 0x5f, 0xc0, 0x76, 0x20, 0x32, 0x79, 0xfe, 0xb5, 0x86, 0x76,
	0x07, 0x96, 0x74, 0x9a, 0x09, 0x39, 0xd4, 0x34, 0xb4, 0xdd, 0xc0, 0x82, 0xfe, 0xdf, 0x6f, 0x80,
	0xf7, 0xf0, 0x42, 0xc4, 0x47, 0x4a, 0xc6, 0xa2, 0x2c, 0xff, 0x1f, 0x4d, 0xd7, 0xb7, 0x61, 0xa9,
	0x30, 0x0d, 0xd8, 0x69, 0x12, 0x39, 0xcf, 0x82, 0x6d, 0x95, 0xcd, 0xf5, 0xbf, 0x82, 0xcd, 0xe3,
	0xb4, 0x9f, 0x47, 0x83, 0x6f, 0xb0, 0xbd, 0xdb, 0xb0, 0x58, 0x12, 0x4f, 0x6a, 0x6a, 0x37, 0x60,
	0xc8, 0x3f, 0x02, 0xef, 0xcb, 0x28, 0xd5, 0xdf, 0x5c, 0x4d, 0xfe, 0xf7, 0x60, 0x63, 0x8c, 0x63,
	0x59, 0xc8, 0xbc, 0x14, 0xd4, 0x00, 0x1d, 0xe9, 0x61, 0x49, 0xcc, 0x16, 0x02, 0x86, 0x7c, 0x01,
	0x9b, 0x4f, 0xd2, 0xd2, 0x92, 0x8b, 0x5f, 0xa7, 0x09, 0xdb, 0xb0, 0x78, 0x22, 0x55, 0x16, 0x69,
	0xdb, 0x02, 0x03, 0x79, 0x1e, 0x34, 0x23, 0xd5, 0x2f, 0x77, 0xe6, 0x5f, 0x9f, 0xbf, 0xdd, 0x0e,
	0x28, 0x8d, 0xab, 0x72, 0xa2, 0x1a, 0x6e, 0xd7, 0x1b, 0xd0, 0xe1, 0x71, 0x0f, 0x07, 0x69, 0xa9,
	0xa9, 0x9e, 0x4e, 0xb0, 0xcc, 0x38, 0x2c, 0xe3, 0x4b, 0xd8, 0x7e, 0x51, 0x24, 0x5f, 0x73, 0xc3,
	0xdf, 0x83, 0xb6, 0x12, 0xa5, 0x1c, 0x2a, 0xdc, 0xa6, 0x73, 0x34, 0xef, 0x9b, 0x66, 0xde, 0x9f,
	0xa4, 0xf9, 0xf0, 0x22, 0xb0, 0x79, 0x41, 0x45, 0xc6, 0x5b, 0x48, 0x97, 0x5f, 0x67, 0x0b, 0x7d,
	0x0c, 0x5b, 0x47, 0xd1, 0xb0, 0xfc, 0x3a, 0x6d, 0xf5, 0x7f, 0x84, 0xdb, 0xaf, 0x1c, 0x66, 0x5f,
	0xab, 0xf0, 0xdf, 0x6b, 0x40, 0x6b, 0xbf, 0x18, 0xbe, 0x28, 0xa3, 0xbe, 0xf0, 0xbe, 0x05, 0xcb,
	0x5a, 0xea, 0x68, 0x10, 0x0e, 0x11, 0x24, 0xf2, 0x66, 0x00, 0x84, 0x32, 0x04, 0x38, 0xec, 0x42,
	0xc5, 0xc5, 0x90, 0x29, 0xe6, 0x5e, 0x9f, 0xbf, 0xdd, 0x0c, 0x96, 0x0d, 0xce, 0x90, 0xdc, 0x81,
	0x0d, 0xca, 0x0b, 0xd3, 0x3c, 0x3c, 0x13, 0x2a, 0x17, 0x83, 0x4c, 0x26, 0x82, 0xd6, 0x6f, 0x33,
	0x58, 0xa7, 0xac, 0xc3, 0xfc, 0xa7, 0x2e, 0xc3, 0xfb, 0x0e, 0xac, 0x3b, 0x7a, 0xdc, 0x94, 0x44,
	0xdd, 0x24, 0xea, 0x55, 0xa6, 0x7e, 0xc1, 0x68, 0xff, 0x2f, 0xc0, 0xca, 0xf3, 0x53, 0x25, 0xb5,
	0x1e, 0xa4, 0x79, 0xff, 0x20, 0xd2, 0x11, 0x4a, 0x8f, 0x42, 0xa8, 0x54, 0x26, 0x25, 0xb7, 0xd6,
	0x82, 0xde, 0x7b, 0xb0, 0xae, 0x0d, 0xad, 0x48, 0x42, 0x4b, 0x33, 0x47, 0x34, 0x6b, 0x2e, 0xe3,
	0x88, 0x89, 0xdf, 0x86, 0x95, 0x8a, 0x18, 0xe5, 0x0f, 0xb7, 0xb7, 0xeb, 0xb0, 0xcf, 0xd3, 0x4c,
	0xf8, 0xe7, 0x34, 0x56, 0x34, 0xc9, 0xde, 0x7b, 0xd0, 0xae, 0xc6, 0xa1, 0x41, 0x2b, 0x64, 0xc5,
	0xac, 0x10, 0x3b, 0x9c, 0x41, 0xcb, 0x0d, 0xca, 0x8f, 0x61, 0x55, 0xbb, 0x86, 0x87, 0x49, 0xa4,
	0xa3, 0xf1, 0x45, 0x35, 0xde, 0xab, 0x60, 0x45, 0x8f, 0xc1, 0xfe, 0x8f, 0xa0, 0x7d, 0x94, 0x26,
	0xa5, 0xa9, 0x78, 0x07, 0x96, 0xe2, 0xa1, 0x52, 0x22, 0xd7, 0xb6, 0xcb, 0x0c, 0x7a, 0x9b, 0xb0,
	0x30, 0x48, 0xb3, 0x54, 0x73, 0x37, 0x0d, 0xe0, 0x4b, 0x80, 0xa7, 0x22, 0x93, 0xea, 0x92, 0x06,
	0x6c, 0x13, 0x16, 0xea, 0x93, 0x6b, 0x00, 0xef, 0x15, 0x68, 0x67, 0xd1, 0x85, 0x9b, 0x54, 0xcc,
	0x69, 0x65, 0xd1, 0x85, 0x69, 0xfc, 0x0e, 0x2c, 0x9d, 0x44, 0xe9, 0x20, 0xce, 0x35, 0x8f, 0x8a,
	0x05, 0xab, 0x0a, 0x9b, 0xf5, 0x0a, 0x7f, 0x7f, 0x0e, 0x96, 0x4d, 0x8d, 0xa6, 0xc1, 0x9b, 0xb0,
	0x10, 0x47, 0xf1, 0xa9, 0xab, 0x92, 0x00, 0xef, 0x1d, 0xdb, 0x90, 0xb9, 0xba, 0x10, 0xae, 0x5a,
	0x6a, 0x9b, 0xf6, 0x3e, 0x40, 0x39, 0x8a, 0x0a, 0x6e, 0xdb, 0xfc, 0x15, 0xc4, 0x6d, 0xa4, 0x31,
	0xcd, 0xfd, 0x00, 0x3a, 0x66, 0xdd, 0x71, 0x91, 0xe6, 0x15, 0x45, 0x96, 0x0d, 0x95, 0x29, 0xf4,
	0x26, 0x74, 0x87, 0xa5, 0x08, 0x4f, 0x53, 0xa1, 0x22, 0x15, 0x9f, 0x5e, 0xee, 0x2c, 0x98, 0x33,
	0x72, 0x58, 0x8a, 0xc7, 0x16, 0xe7, 0xdd, 0x83, 0x05, 0x14, 0x7f, 0xe5, 0xce, 0x22, 0x1d, 0xc7,
	0xaf, 0xd6, 0x59, 0x52, 0x57, 0xef, 0xd0, 0xef, 0xc3, 0x5c, 0xab, 0xcb, 0xc0, 0x90, 0xee, 0x7e,
	0x08, 0x50, 0x21, 0xbd, 0x35, 0x98, 0x3f, 0x13, 0x97, 0xbc, 0x0f, 0x31, 0x89, 0x83, 0x73, 0x1e,
	0x0d, 0x86, 0x76, 0xd4, 0x0d, 0xf0, 0xf1, 0xdc, 0x87, 0x0d, 0x3f, 0x86, 0xd5, 0x07, 0x83, 0xb3,
	0x54, 0xd6, 0x8a, 0x6f, 0xc2, 0x42, 0x16, 0x7d, 0x25, 0x95, 0x1d, 0x49, 0x02, 0x08, 0x9b, 0xe6,
	0x52, 0x59, 0x16, 0x04, 0x78, 0x2b, 0x30, 0x27, 0x0b, 0x1a, 0xaf, 0x76, 0x30, 0x27, 0x8b, 0xaa,
	0xa2, 0x66, 0xad, 0x22, 0xff, 0xdf, 0x36, 0x01, 0xaa, 0x5a, 0xbc, 0x00, 0x76, 0x53, 0x19, 0x96,
	0x42, 0xa1, 0x0a, 0x12, 0xf6, 0x2e, 0xb5, 0x28, 0x43, 0x25, 0xe2, 0xa1, 0x2a, 0xd3, 0x73, 0x9c,
	0x3f, 0xec, 0xf6, 0x96, 0xe9, 0xf6, 0x44, 0xdb, 0x82, 0x1b, 0xa9, 0x3c, 0x36, 0xe5, 0x1e, 0x60,
	0xb1, 0xc0, 0x96, 0xf2, 0x0e, 0x61, 0xab, 0xe2, 0x99, 0xd4, 0xd8, 0xcd, 0x5d, 0xc7, 0x6e, 0xc3,
	0xb1, 0x4b, 0x2a, 0x56, 0x0f, 0x61, 0x23, 0x95, 0xe1, 0xcb, 0xa1, 0x18, 0x8e, 0x31, 0x9a, 0xbf,
	0x8e, 0xd1, 0x7a, 0x2a, 0xff, 0x14, 0x15, 0xa8, 0xd8, 0x1c, 0xc1, 0xcd, 0x5a, 0x2f, 0x71, 0xbb,
	0xd7, 0x98, 0x35, 0xaf, 0x63, 0xb6, 0xed, 0x5a, 0x85, 0xf2, 0xa0, 0xe2, 0xf8, 0x13, 0xd8, 0x4e,
	0x65, 0x38, 0x8a, 0x52, 0x3d, 0xc9, 0x6e, 0xe1, 0x57, 0x74, 0x12, 0x0f, 0xdd, 0x71, 0x5e, 0xa6,
	0x93, 0x99, 0x50, 0xfd, 0xb1, 0x4e, 0x2e, 0xfe, 0x8a, 0x4e, 0x3e, 0xa5, 0x02, 0x15, 0x9b, 0x4f,
	0x61, 0x3d, 0x95, 0x93, 0xad, 0x59, 0xba, 0x8e, 0xc9, 0x6a, 0x2a, 0xc7, 0x5b, 0xf2, 0x00, 0xd6,
	0x4b, 0x11, 0x6b, 0xa9, 0xea, 0x8b, 0xa0, 0x75, 0x1d, 0x8b, 0x35, 0xa6, 0x77, 0x3c, 0xfc, 0x3f,
	0x03, 0x9d, 0xc7, 0xc3, 0xbe, 0xd0, 0x83, 0x9e, 0x13, 0x06, 0xdf, 0x98, 0xfc, 0xf1, 0xff, 0xf3,
	0x1c, 0x2c, 0xef, 0xf7, 0x95, 0x1c, 0x16, 0x63, 0x32, 0xd9, 0x6c, 0xd2, 0x49, 0x99, 0x4c, 0x24,
	0x24, 0x93, 0x0d, 0xf1, 0x0f, 0xa0, 0x93, 0xd1, 0xd6, 0x65, 0x7a, 0x23, 0x87, 0xd6, 0xa7, 0x36,
	0x75, 0xb0, 0x9c, 0xd5, 0x84, 0xd9, 0x1d, 0x80, 0x22, 0x4d, 0x4a, 0x2e, 0x63, 0xc4, 0xd1, 0x2a,
	0x6b, 0x84, 0x56, 0x44, 0x07, 0xed, 0xc2, 0x49, 0xeb, 0xbb, 0xb0, 0xdc, 0xc3, 0x41, 0xe2, 0x02,
	0x63, 0xc2, 0xa8, 0x1a, 0xbd, 0x00, 0x7a, 0xd5, 0x26, 0x7c, 0x0c, 0xdd, 0x53, 0x33, 0x64, 0x5c,
	0xc8, 0xac, 0xa1, 0x37, 0xb9, 0x27, 0x55, 0x7f, 0xef, 0xd4, 0x47, 0xd6, 0x4c, 0x40, 0xe7, 0xb4,
	0x86, 0xda, 0x3d, 0x86, 0xf5, 0x29, 0x92, 0x19, 0x32, 0xe8, 0x76, 0x5d, 0x06, 0x2d, 0xdf, 0xf3,
	0x4c, 0x45, 0xf5, 0x92, 0x75, 0xb9, 0xf4, 0x57, 0xe7, 0xa0, 0xf3, 0xb9, 0xd0, 0x23, 0xa9, 0xce,
	0x4c, 0x7b, 0x3d, 0x68, 0xe6, 0x51, 0x26, 0x98, 0x23, 0xa5, 0xbd, 0x9b, 0xd0, 0x52, 0x17, 0x46,
	0x80, 0xf0, 0x7c, 0x2e, 0xa9, 0x0b, 0x12, 0x0c, 0xde, 0x6b, 0x00, 0xea, 0x22, 0x2c, 0xa2, 0xf8,
	0x4c, 0xf0, 0x08, 0x36, 0x83, 0xb6, 0xba, 0x38, 0x32, 0x08, 0x5c, 0x0a, 0xea, 0x22, 0x14, 0x4a,
	0x49, 0x55, 0xb2, 0xac, 0x6a, 0xa9, 0x8b, 0x87, 0x04, 0x73, 0xd9, 0x44, 0xc9, 0xa2, 0x10, 0x09,
	0xc9, 0x68, 0x2a, 0x7b, 0x60, 0x10, 0x58, 0xab, 0xb6, 0xb5, 0x2e, 0x9a, 0x5a, 0x75, 0x55, 0xab,
	0xae, 0x6a, 0x5d, 0x32, 0x25, 0x75, 0xbd, 0x56, 0xed, 0x6a, 0x6d, 0x99, 0x5a, 0x75, 0xad, 0x56,
	0x5d, 0xd5, 0xda, 0xb6, 0x65, 0xb9, 0x56, 0xff, 0xb7, 0x1a, 0xb0, 0x3d, 0xa9, 0xf8, 0xb1, 0x9a,
	0xfa, 0x03, 0xe8, 0xc4, 0x34, 0x5f, 0x63, 0x6b, 0x72, 0x7d, 0x6a, 0x26, 0x83, 0xe5, 0xb8, 0xb6,
	0x8c, 0xef, 0x43, 0x37, 0x37, 0x03, 0xec, 0x96, 0xe6, 0x7c, 0x35, 0x2f, 0xf5, 0xb1, 0x0f, 0x3a,
	0x79, 0x0d, 0xf2, 0x13, 0xf0, 0xbe, 0x54, 0xa9, 0x16, 0xc7, 0x5a, 0x89, 0x28, 0xfb, 0x26, 0x0c,
	0x10, 0x0f, 0x9a, 0xa4, 0xad, 0xcc, 0x93, 0x7e, 0x4d, 0x69, 0xff, 0xdb, 0xb0, 0x31, 0x56, 0x0b,
	0xf7, 0x75, 0x0d, 0xe6, 0x07, 0x22, 0x27, 0xee, 0xdd, 0x00, 0x93, 0x7e, 0x04, 0xeb, 0x81, 0x88,
	0x92, 0x6f, 0xae, 0x35, 0x5c, 0xc5, 0x7c, 0x55, 0xc5, 0x6d, 0xf0, 0xea, 0x55, 0x70, 0x53, 0x6c,
	0xab, 0x1b, 0xb5, 0x56, 0x3f, 0x83, 0xf5, 0xfd, 0x81, 0x2c, 0xc5, 0xb1, 0x4e, 0xd2, 0xfc, 0x9b,
	0xb0, 0x98, 0xfe, 0x1c, 0x6c, 0x3c, 0xd7, 0x97, 0x5f, 0x22, 0xb3, 0x32, 0xfd, 0xb9, 0xf8, 0x86,
	0xfa, 0xa7, 0xe4, 0xc8, 0xf6, 0x4f, 0xc9, 0x11, 0x1a, 0x4b, 0xb1, 0x1c, 0x0c, 0xb3, 0x9c, 0xb6,
	0x42, 0x37, 0x60, 0xc8, 0x7f, 0x00, 0x1d, 0xa3, 0x43, 0x3f, 0x95, 0xc9, 0x70, 0x20, 0x66, 0xee,
	0xc1, 0x5b, 0x00, 0x45, 0xa4, 0xa2, 0x4c, 0x68, 0xa1, 0xcc, 0x1a, 0x6a, 0x07, 0x35, 0x8c, 0xff,
	0xd7, 0xe7, 0x60, 0xd3, 0xb8, 0x44, 0x8e, 0x8d, 0x27, 0xc0, 0x76, 0x61, 0x17, 0x5a, 0xa7, 0xb2,
	0xd4, 0x35, 0x86, 0x0e, 0xc6, 0x26, 0x26, 0xb9, 0xe5, 0x86, 0xc9, 0x31, 0x3f, 0xc5, 0xfc, 0xf5,
	0x7e, 0x8a, 0x29, 0x4f, 0x44, 0x73, 0xda, 0x13, 0x81, 0xbb, 0xcd, 0x12, 0xa5, 0x66, 0x8f, 0xb7,
	0x83, 0x36, 0x63, 0x0e, 0x13, 0xef, 0x1d, 0x58, 0xed, 0x63, 0x2b, 0xc3, 0x53, 0x29, 0xcf, 0xc2,
	0x22, 0xd2, 0xa7, 0xb4, 0xd5, 0xdb, 0x41, 0x97, 0xd0, 0x8f, 0xa5, 0x3c, 0x3b, 0x8a, 0xf4, 0xa9,
	0xf7, 0x11, 0xac, 0xb0, 0x1a, 0x98, 0xd1, 0x10, 0x95, 0x7c, 0xf8, 0xf1, 0x2e, 0xaa, 0x8f, 0x5e,
	0xd0, 0x3d, 0xab, 0x41, 0xa5, 0x7f, 0x03, 0xb6, 0x0e, 0x44, 0xa9, 0x95, 0xbc, 0x1c, 0x1f, 0x18,
	0xff, 0x4f, 0x02, 0x1c, 0xe6, 0x5a, 0xa8, 0x93, 0x28, 0x16, 0xa5, 0xf7, 0xfd, 0x3a, 0xc4, 0xca,
	0xd1, 0xda, 0x1d, 0xe3, 0x91, 0x72, 0x19, 0x41, 0x8d, 0xc6, 0xbf, 0x03, 0x8b, 0x81, 0x1c, 0xa2,
	0x38, 0x7a, 0xcb, 0xa6, 0xb8, 0x5c, 0x87, 0xcb, 0x11, 0x32, 0xe0, 0x3c, 0xff, 0xb1, 0x35, 0x61,
	0x2b, 0x76, 0x3c, 0x45, 0x77, 0xa0, 0x9d, 0x5a, 0x1c, 0x4b, 0x95, 0xe9, 0xaa, 0x2b, 0x12, 0xff,
	0x47, 0xb0, 0x61, 0x38, 0x19, 0xce, 0x96, 0xcd, 0x5b, 0xb0, 0xa8, 0x6c, 0x33, 0x1a, 0x95, 0x2b,
	0x8a, 0x89, 0x38, 0x0f, 0xc7, 0x03, 0x2d, 0xea, 0xaa, 0x23, 0x76, 0x3c, 0x36, 0x60, 0x1d, 0x33,
	0xc6, 0x78, 0xfa, 0x7f, 0x16, 0x36, 0x9e, 0xe5, 0x83, 0x34, 0x17, 0xfb, 0x47, 0x2f, 0x9e, 0x0a,
	0xb7, 0xef, 0x3d, 0x68, 0xa2, 0x7e, 0x44, 0x15, 0xb5, 0x02, 0x4a, 0xe3, 0x46, 0xc8, 0x7b, 0x61,
	0x5c, 0x0c, 0x4b, 0xf6, 0xfd, 0x2c, 0xe6, 0xbd, 0xfd, 0x62, 0x58, 0xa2, 0x20, 0xc7, 0x83, 0x5c,
	0xe6, 0x83, 0x4b, 0xda, 0x0d, 0xad, 0x60, 0x29, 0x2e, 0x86, 0xcf, 0xf2, 0xc1, 0xa5, 0xff, 0x5d,
	0xb2, 0x76, 0x85, 0x48, 0x82, 0x28, 0x4f, 0x64, 0x76, 0x20, 0xce, 0x6b, 0x35, 0x38, 0xcb, 0xca,
	0xee, 0xfa, 0x3f, 0x68, 0x40, 0xe7, 0xd3, 0xbe, 0xc8, 0xf5, 0x81, 0xd0, 0x51, 0x3a, 0x20, 0xeb,
	0xe9, 0x5c, 0xa8, 0x32, 0x95, 0x39, 0x2f, 0x6d, 0x0b, 0xa2, 0xf1, 0x9b, 0xe6, 0xa9, 0x0e, 0x93,
	0x48, 0x64, 0x32, 0x27, 0x2e, 0xad, 0x00, 0x10, 0x75, 0x40, 0x18, 0xef, 0xdb, 0xb0, 0x6a, 0x7c,
	0x73, 0xe1, 0x69, 0x94, 0x27, 0x03, 0xdc, 0x54, 0xc6, 0x57, 0xb1, 0x62, 0xd0, 0x8f, 0x19, 0xeb,
	0xbd, 0x0b, 0x6b, 0xbc, 0xe4, 0x2b, 0xca, 0x26, 0x51, 0xae, 0x32, 0x7e, 0x8c, 0x74, 0x58, 0x14,
	0x52, 0xe9, 0x32, 0x2c, 0x45, 0x1c, 0xcb, 0xac, 0x60, 0xd3, 0x63, 0xd5, 0xe2, 0x8f, 0x0d, 0xda,
	0xef, 0xc3, 0xc6, 0x23, 0xec, 0x27, 0xf7, 0xa4, 0x9a, 0xc2, 0x95, 0x4c, 0x64, 0x61, 0x6f, 0x20,
	0xe3, 0xb3, 0x10, 0x05, 0x11, 0x8f, 0x30, 0x2a, 0x37, 0x0f, 0x10, 0x79, 0x9c, 0xfe, 0x9c, 0xac,
	0x6c, 0xa4, 0x3a, 0x95, 0xba, 0x18, 0x0c, 0xfb, 0x61, 0xa1, 0x64, 0x4f, 0x70, 0x17, 0x57, 0x33,
	0x91, 0x3d, 0x36, 0xf8, 0x23, 0x44, 0xfb, 0xff, 0xb8, 0x01, 0x9b, 0xe3, 0x35, 0xb1, 0x58, 0x7d,
	0x1f, 0x36, 0xc7, 0xab, 0xe2, 0xa3, 0xd6, 0xa8, 0x72, 0xeb, 0xf5, 0x0a, 0xcd, 0xa1, 0x7b, 0x1f,
	0xba, 0xe4, 0xb0, 0x0d, 0x13, 0xc3, 0x69, 0x5c, 0xc1, 0xa8, 0xcf, 0x4b, 0xd0, 0x89, 0xea, 0xb3,
	0xf4, 0x11, 0xdc, 0xe4, 0xee, 0x87, 0xd3, 0xcd, 0x36, 0x0b, 0x62, 0x9b, 0x09, 0x9e, 0x4e, 0xb4,
	0xfe, 0x09, 0xec, 0x54, 0xa8, 0x07, 0x97, 0x84, 0xb4, 0x63, 0xf5, 0x7d, 0xd8, 0x98, 0xe8, 0xec,
	0xa7, 0x49, 0xa2, 0x68, 0x0b, 0x36, 0x83, 0x59, 0x59, 0xfe, 0x27, 0x70, 0xe3, 0x58, 0x68, 0x33,
	0x1a, 0x91, 0x66, 0xad, 0xdf, 0x30, 0x5b, 0x83, 0xf9, 0x63, 0x11, 0x53, 0xe7, 0xe7, 0x03, 0x4c,
	0xe2, 0x02, 0x7c, 0x51, 0x8a, 0x98, 0x7a, 0x39, 0x1f, 0x50, 0xda, 0xff, 0x87, 0x0d, 0x58, 0x62,
	0x41, 0x88, 0xc2, 0x3c, 0x51, 0xe9, 0xb9, 0x50, 0xbc, 0xf4, 0x18, 0xf2, 0xde, 0x86, 0x15, 0x93,
	0x0a, 0x65, 0xa1, 0x53, 0xe9, 0xc4, 0x6b, 0xd7, 0x60, 0x9f, 0x19, 0x24, 0xf9, 0xe2, 0xc8, 0xd5,
	0xc4, 0x56, 0x1d, 0x43, 0xe4, 0x50, 0x2b, 0x71, 0xef, 0x93, 0x38, 0x6d, 0x07, 0x0c, 0xe1, 0x52,
	0xb7, 0xfc, 0x16, 0x88, 0x9f, 0x05, 0x71, 0xa9, 0x67, 0x72, 0x98, 0xeb, 0xb0, 0x90, 0x69, 0xae,
	0x59, 0x7e, 0x02, 0xa1, 0x8e, 0x10, 0xe3, 0xff, 0x66, 0x03, 0x16, 0x8d, 0x3f, 0x1a, 0xed, 0x48,
	0x77, 0x8a, 0xcd, 0xa5, 0xa4, 0x11, 0x50, 0x5d, 0xe6, 0xe4, 0xa2, 0x34, 0xee, 0xe3, 0xf3, 0xcc,
	0xc8, 0x62, 0x6e, 0xda, 0x79, 0x46, 0x42, 0xf8, 0x6d, 0x58, 0xa9, 0x0e, 0x43, 0xca, 0x37, 0x4d,
	0xec, 0x3a, 0x2c, 0x91, 0x5d, 0xd9, 0x52, 0xff, 0x67, 0x68, 0x3e, 0x3b, 0x5f, 0xec, 0x1a, 0xcc,
	0x0f, 0x5d, 0x63, 0x30, 0x89, 0x98, 0xbe, 0x3b, 0x46, 0x31, 0xe9, 0xbd, 0x03, 0x2b, 0x51, 0x92,
	0xa4, 0x58, 0x3c, 0x1a, 0x3c, 0x4a, 0x13, 0xb7, 0x49, 0xc7, 0xb1, 0xfe, 0x3f, 0x6f, 0xc0, 0xea,
	0xbe, 0x2c, 0x2e, 0x3f, 0x4b, 0x07, 0xa2, 0x26, 0x41, 0xa8, 0x91, 0x7c, 0x8a, 0x62, 0x1a, 0x35,
	0xc3, 0x93, 0x74, 0x20, 0xcc, 0xd6, 0x32, 0x33, 0xdb, 0x42, 0x04, 0x6d, 0x2b, 0x9b, 0xe9, 0x5c,
	0x5c, 0x5d, 0x93, 0xf9, 0x54, 0x26, 0xa4, 0x03, 0x27, 0xa9, 0x0a, 0x9d, 0x43, 0xab, 0x1b, 0x2c,
	0x25, 0xa9, 0xa2, 0x2c, 0xee, 0xc8, 0x02, 0xf9, 0x54, 0xeb, 0x1d, 0x59, 0x34, 0x18, 0xec, 0xc8,
	0x36, 0x2c, 0xca, 0x93, 0x93, 0x52, 0x68, 0xd2, 0x56, 0xe7, 0x03, 0x86, 0x9c, 0x98, 0x6b, 0xd5,
	0xc4, 0xdc, 0x16, 0x6c, 0x90, 0xf7, 0xfe, 0xb9, 0x8a, 0xe2, 0x34, 0xef, 0x5b, 0x51, 0xbc, 0x09,
	0xde, 0xb1, 0x96, 0xc5, 0x04, 0x76, 0x1b, 0x36, 0x1f, 0x5e, 0x68, 0x91, 0x27, 0x22, 0x31, 0x4a,
	0x24, 0xe3, 0x47, 0xb0, 0x35, 0x81, 0xe7, 0x7d, 0xff, 0x1e, 0xb4, 0x0b, 0x99, 0xcc, 0x32, 0xab,
	0x8e, 0x24, 0x93, 0xb6, 0x0a, 0x4e, 0x79, 0x77, 0xa1, 0x1d, 0xcb, 0x7c, 0x4c, 0x71, 0x65, 0x27,
	0x97, 0x53, 0x8f, 0xad, 0x25, 0x26, 0x73, 0xa3, 0xb6, 0xfe, 0x87, 0x25, 0x68, 0x59, 0x4e, 0xde,
	0xbb, 0xb0, 0xd0, 0x1b, 0x26, 0xc9, 0x25, 0x57, 0xb4, 0xe1, 0x2a, 0x7a, 0x80, 0x58, 0xb6, 0x46,
	0x88, 0x02, 0x0f, 0xc1, 0xca, 0xdc, 0x33, 0x55, 0xad, 0x3b, 0xf2, 0x19, 0x16, 0xdf, 0x7b, 0xd0,
	0x72, 0x86, 0xd8, 0x3c, 0x1f, 0xd7, 0x96, 0xfc, 0xf0, 0x99, 0xa1, 0x5e, 0xb2, 0x56, 0x18, 0x9e,
	0xb0, 0xea, 0xa5, 0x33, 0xdb, 0xc6, 0x99, 0x1f, 0xaa, 0x97, 0xcc, 0x3c, 0xe5, 0x94, 0x77, 0x17,
	0x60, 0x20, 0xa3, 0xc4, 0x99, 0x6c, 0x35, 0x41, 0x77, 0x24, 0x93, 0x27, 0x32, 0xe2, 0x91, 0x6a,
	0x0f, 0x6c, 0x12, 0xab, 0x40, 0xe9, 0x66, 0x7d, 0x4a, 0x8d, 0xb1, 0x2a, 0x9e, 0x8a, 0x8c, 0xab,
	0xc8, 0x38, 0x85, 0x55, 0x64, 0x22, 0xbb, 0xe0, 0x02, 0x4b, 0x13, 0x55, 0x3c, 0x15, 0xd9, 0x05,
	0x57, 0x91, 0xd9, 0xa4, 0xf7, 0x43, 0xd2, 0x01, 0x35, 0x17, 0x31, 0xb6, 0xfb, 0x0d, 0x57, 0xe4,
	0x28, 0x52, 0x9a, 0xf6, 0x84, 0x35, 0x5b, 0x23, 0xa5, 0x5d, 0x55, 0x45, 0x5c, 0x8e, 0xb8, 0x5c,
	0x7b, 0xa2, 0xaa, 0xa3, 0xb8, 0x1c, 0xd9, 0x22, 0x36, 0xe9, 0xdd, 0x77, 0xbe, 0x61, 0x53, 0x08,
	0xea, 0x73, 0x8f, 0x85, 0x28, 0x93, 0xcd, 0x9d, 0xa2, 0x02, 0xbc, 0x47, 0xe0, 0xd9, 0x82, 0xf1,
	0xa9, 0xb0, 0x23, 0xb8, 0x4c, 0xc5, 0x6f, 0x4e, 0x16, 0x47, 0x0a, 0xc3, 0x63, 0xad, 0x98, 0xc0,
	0x78, 0x1f, 0x43, 0xb7, 0x94, 0x27, 0xba, 0x9a, 0xb6, 0x0e, 0xb5, 0x7b, 0xab, 0x5a, 0xab, 0x26,
	0x97, 0x4d, 0xa7, 0xb2, 0x06, 0x61, 0x87, 0xc9, 0xcd, 0x68, 0x0a, 0x76, 0x27, 0x3a, 0x7c, 0x3c,
	0x8a, 0xd8, 0x50, 0x23, 0x47, 0xa3, 0x9b, 0x3e, 0x1d, 0xdb, 0x12, 0x2b, 0x13, 0xd3, 0xf7, 0x3c,
	0xe6, 0x02, 0x2d, 0xcd, 0x29, 0xac, 0x42, 0xc7, 0x85, 0x9d, 0xbe, 0xd5, 0x89, 0x2a, 0x9e, 0xc7,
	0x85, 0x9d, 0x3e, 0x6d, 0x93, 0xd8, 0x23, 0xad, 0xa2, 0x93, 0x93, 0x34, 0xe6, 0x52, 0x6b, 0x13,
	0x3d, 0x7a, 0x6e, 0x72, 0xb9, 0x47, 0xba, 0x06, 0x61, 0xf3, 0x86, 0x89, 0x6d, 0xde, 0xfa, 0x44,
	0xf3, 0x5e, 0x24, 0xb6, 0x79, 0xc3, 0xc4, 0x59, 0x9d, 0x9d, 0xf3, 0x0c, 0xa9, 0xb9, 0x88, 0x57,
	0x77, 0x50, 0x1f, 0xc9, 0xe4, 0x0b, 0xca, 0xe4, 0xf9, 0x3b, 0xaf, 0x00, 0xdc, 0x56, 0xfd, 0x62,
	0x18, 0xa6, 0xf9, 0x89, 0xdc, 0xd9, 0xa8, 0xfb, 0x37, 0x8e, 0x64, 0xf2, 0xa8, 0x18, 0x1e, 0xe6,
	0x27, 0x32, 0x58, 0xea, 0x9b, 0x84, 0xff, 0xdb, 0x73, 0xd0, 0x1d, 0xdb, 0xcc, 0x24, 0xe7, 0x54,
	0x22, 0xd4, 0xf7, 0x6d, 0x88, 0xc9, 0x40, 0x0e, 0x7f, 0x97, 0xa4, 0xae, 0xc5, 0xdf, 0x75, 0xf8,
	0x7b, 0x24, 0x70, 0x2d, 0xfe, 0x9e, 0xc3, 0x7f, 0x40, 0xc2, 0xd6, 0xe2, 0x3f, 0x70, 0xf8, 0x1f,
	0xb0, 0xb8, 0x65, 0xc8, 0xe1, 0xf7, 0x58, 0xe8, 0x32, 0xe4, 0xf0, 0x3f, 0xa4, 0x1d, 0x66, 0xf1,
	0x3f, 0x74, 0xf8, 0xfb, 0x24, 0x79, 0x2d, 0xfe, 0xbe, 0xc3, 0x7f, 0x48, 0xdb, 0xc4, 0xe2, 0x3f,
	0x74, 0xf8, 0x8f, 0x76, 0xa0, 0x86, 0xff, 0x88, 0x0e, 0x3b, 0xea, 0xc9, 0xf7, 0x77, 0x96, 0x29,
	0xc3, 0x82, 0xfe, 0xef, 0xcd, 0xc1, 0x72, 0x4d, 0x72, 0x59, 0x2d, 0x98, 0x42, 0x95, 0xd6, 0xd5,
	0x5f, 0x0c, 0xe9, 0x24, 0xe4, 0xac, 0x3c, 0x8d, 0xad, 0xbf, 0x0c, 0xb3, 0x3e, 0xc7, 0x03, 0xfb,
	0x06, 0x2c, 0xd1, 0x5e, 0xba, 0xb4, 0xce, 0x95, 0x45, 0xdc, 0x25, 0x97, 0x8e, 0x5d, 0x9a, 0x0c,
	0xac, 0x13, 0x18, 0x09, 0x0f, 0x93, 0x81, 0x40, 0x9b, 0x8b, 0xb2, 0x24, 0xa9, 0xe8, 0xec, 0x57,
	0xc1, 0x4c, 0x42, 0xe0, 0x31, 0x67, 0xf6, 0xb5, 0x88, 0x06, 0xec, 0x58, 0x31, 0x52, 0x55, 0x44,
	0x03, 0x54, 0x26, 0x30, 0xf3, 0x34, 0x52, 0x49, 0xaa, 0x5e, 0xb2, 0x6b, 0x05, 0xd9, 0x3d, 0x36,
	0x18, 0x4b, 0xc0, 0xdb, 0x8d, 0xbd, 0x2b, 0x48, 0xc0, 0xdb, 0xd1, 0xb2, 0x27, 0xfb, 0x8d, 0xdd,
	0x2b, 0xc8, 0x9e, 0xb4, 0x2e, 0xdb, 0xb4, 0x7c, 0x98, 0xf5, 0x84, 0xa2, 0xa1, 0x34, 0x4d, 0xfb,
	0x9c, 0x10, 0xfe, 0x97, 0x00, 0x95, 0xf4, 0xf6, 0x7c, 0x3c, 0xc0, 0x95, 0x9e, 0x38, 0xa4, 0x22,
	0xa5, 0x69, 0x11, 0x52, 0x9e, 0xf7, 0x36, 0x2c, 0x90, 0xb3, 0x8d, 0x95, 0xd1, 0x55, 0xe7, 0x8b,
	0x3b, 0x7c, 0x46, 0x54, 0x26, 0xd7, 0xff, 0x09, 0xb4, 0x6c, 0xc1, 0x71, 0xbf, 0x7b, 0x77, 0xa6,
	0xdf, 0xbd, 0x6b, 0xfd, 0xee, 0xd6, 0x12, 0x9f, 0xaf, 0x2c, 0x71, 0xff, 0xbf, 0x37, 0xa0, 0xed,
	0x2a, 0xf0, 0xb6, 0x60, 0x51, 0x25, 0x61, 0x2a, 0xad, 0xe2, 0xbc, 0xa0, 0x92, 0x43, 0x69, 0x1c,
	0x5f, 0x89, 0xf1, 0xfb, 0x5a, 0x9f, 0x59, 0x4b, 0x25, 0xe4, 0xd6, 0x35, 0x8e, 0xaf, 0x24, 0x64,
	0xef, 0xaa, 0x73, 0x9a, 0x25, 0xc7, 0x06, 0x81, 0x2c, 0x47, 0x8a, 0x58, 0xb2, 0x77, 0x7f, 0xa4,
	0x98, 0xe5, 0x48, 0x59, 0x96, 0x66, 0x56, 0x5b, 0x23, 0x55, 0xb1, 0x1c, 0x29, 0xc7, 0xd2, 0xcc,
	0x6a, 0x7b, 0xa4, 0x2c, 0xcb, 0x9b, 0xd0, 0x1a, 0xa9, 0x50, 0xa7, 0xf1, 0x99, 0x75, 0x97, 0x2d,
	0x8d, 0xd4, 0x73, 0x04, 0xb1, 0xe3, 0x06, 0x6f, 0xa6, 0xd2, 0x00, 0x14, 0xbf, 0x3d, 0x17, 0x2f,
	0x79, 0x02, 0x29, 0xed, 0xef, 0xd3, 0x82, 0xb6, 0xa7, 0x25, 0x2e, 0x4d, 0x14, 0xce, 0xf9, 0x30,
	0xe3, 0x91, 0x5c, 0x4c, 0xd5, 0xcb, 0xcf, 0x87, 0x19, 0x36, 0x14, 0x33, 0x62, 0xd4, 0x40, 0x39,
	0xa8, 0x88, 0x27, 0xeb, 0x3e, 0xc2, 0xb8, 0x2d, 0x3a, 0xf5, 0x23, 0x14, 0x5b, 0x9e, 0xab, 0x50,
	0x0d, 0xf3, 0x3c, 0xcd, 0xfb, 0x3c, 0x88, 0xed, 0x5c, 0x05, 0x06, 0xe1, 0xbd, 0xca, 0x27, 0x71,
	0x74, 0xde, 0x0f, 0xef, 0xf2, 0xe4, 0xb4, 0x10, 0xf3, 0xe9, 0x79, 0xff, 0xee, 0x58, 0xee, 0x9e,
	0xd5, 0xd9, 0x38, 0x77, 0xcf, 0xbb, 0x05, 0xcb, 0x55, 0xd9, 0x3d, 0x56, 0xdb, 0xda, 0xb6, 0xf0,
	0x9e, 0xf7, 0x1e, 0x78, 0x5c, 0x6f, 0x58, 0xab, 0x63, 0x81, 0xc8, 0x56, 0x39, 0xe7, 0x89, 0xad,
	0x6a, 0x16, 0xb1, 0x91, 0x36, 0x53, 0xc4, 0x7b, 0xde, 0xf7, 0x60, 0x63, 0x9a, 0xf3, 0x1e, 0x0d,
	0x7d, 0x37, 0x58, 0x9b, 0x60, 0xbd, 0xc7, 0x63, 0xa0, 0x4f, 0x95, 0x88, 0x12, 0x33, 0x11, 0x5d,
	0x1c, 0x83, 0xe7, 0x06, 0xe1, 0xff, 0xa2, 0x41, 0x23, 0x6f, 0x95, 0x08, 0x9c, 0xb2, 0x13, 0x95,
	0x9d, 0xf5, 0xec, 0x92, 0x23, 0x00, 0xb1, 0xd1, 0x39, 0x62, 0x39, 0x72, 0x44, 0x00, 0x62, 0x7b,
	0xc3, 0x93, 0xb3, 0x1e, 0x2f, 0x33, 0x03, 0x98, 0x28, 0x1e, 0xd2, 0x36, 0x6d, 0x14, 0x8f, 0x69,
	0xf5, 0x00, 0xb1, 0x0b, 0xbc, 0x14, 0x06, 0x8c, 0x8d, 0x25, 0x62, 0x17, 0x99, 0x56, 0x32, 0x56,
	0x95, 0xe5, 0x59, 0x8f, 0x97, 0x93, 0x01, 0xfc, 0xff, 0xda, 0xa0, 0xd9, 0x75, 0xda, 0x0b, 0x35,
	0x0a, 0x75, 0x68, 0xdb, 0x54, 0x02, 0x10, 0x9b, 0x12, 0x96, 0x9b, 0x9a, 0x5a, 0x6c, 0x14, 0xe5,
	0x32, 0xb7, 0x4d, 0x25, 0x80, 0x68, 0x09, 0xcb, 0x4d, 0x4d, 0x2d, 0x36, 0x49, 0x95, 0xbe, 0xb4,
	0x4d, 0x25, 0xc0, 0x7b, 0x15, 0xb7, 0x48, 0xaa, 0x45, 0x2f, 0x8a, 0xcf, 0xaa, 0x4d, 0xc0, 0x08,
	0xd3, 0xe4, 0x41, 0x54, 0x6b, 0xf2, 0x20, 0xea, 0x99, 0x18, 0x06, 0x62, 0x5b, 0x36, 0x86, 0x81,
	0xd8, 0x6d, 0x58, 0xcc, 0x0a, 0x6a, 0xa2, 0xd9, 0x01, 0x0c, 0x21, 0x75, 0x79, 0x9a, 0x89, 0x8c,
	0x65, 0x97, 0x01, 0xfc, 0xdf, 0x69, 0xc0, 0xfa, 0x94, 0x06, 0x46, 0x43, 0xef, 0x6c, 0xf8, 0x85,
	0xc0, 0x00, 0xc8, 0x99, 0x6c, 0x6e, 0x2b, 0x16, 0x18, 0x22, 0xea, 0x13, 0x25, 0x84, 0x9b, 0x28,
	0x04, 0x88, 0x3a, 0x3a, 0x8f, 0xd2, 0x01, 0x77, 0x9f, 0x21, 0xc4, 0xa7, 0x14, 0xca, 0xe7, 0x01,
	0x60, 0xc8, 0x8c, 0x2c, 0x72, 0x59, 0xb4, 0x23, 0xab, 0x84, 0xf0, 0xff, 0xae, 0x99, 0x16, 0xa7,
	0xe9, 0x59, 0x53, 0x4e, 0x5c, 0xe8, 0xb0, 0x1c, 0xa5, 0x3a, 0x3e, 0xe5, 0xf9, 0xe9, 0x32, 0xf6,
	0x98, 0x90, 0x78, 0xba, 0xe5, 0x62, 0xa4, 0xa3, 0xf2, 0xcc, 0x9e, 0x4b, 0x0c, 0x72, 0xdc, 0x9a,
	0x72, 0xe6, 0x5d, 0xdc, 0x9a, 0x72, 0x3c, 0x68, 0x06, 0xba, 0x3c, 0xe3, 0xf6, 0x52, 0x1a, 0x71,
	0x07, 0x88, 0x33, 0x6d, 0xa5, 0x34, 0x8d, 0x70, 0x74, 0x51, 0xb0, 0x99, 0x84, 0x23, 0x4c, 0x90,
	0xff, 0x9b, 0xf3, 0xb0, 0x32, 0xae, 0x60, 0xfe, 0xf1, 0xd1, 0x89, 0x47, 0x27, 0xb7, 0x9a, 0xee,
	0x33, 0x80, 0x6b, 0xf5, 0xf3, 0x34, 0xa3, 0x8b, 0x1c, 0x98, 0xa5, 0x86, 0x79, 0x22, 0x06, 0xd1,
	0x25, 0x69, 0x22, 0xcd, 0x00, 0x2b, 0x0b, 0x18, 0x65, 0x3b, 0x56, 0x18, 0xa1, 0xdc, 0x71, 0x1d,
	0x3b, 0x22, 0x84, 0x3b, 0xe7, 0xba, 0xb5, 0x73, 0xee, 0xf7, 0xe7, 0x61, 0x63, 0x86, 0xaa, 0x8e,
	0xdd, 0x30, 0xaa, 0xfd, 0x65, 0x2a, 0x06, 0x89, 0xbd, 0x57, 0x42, 0xa8, 0x3f, 0x8d, 0x18, 0xf2,
	0xf9, 0x12, 0x81, 0xb8, 0x28, 0x6c, 0x1c, 0xbb, 0x4d, 0x98, 0x87, 0x17, 0x05, 0x9d, 0xb4, 0x04,
	0xd8, 0x85, 0x4e, 0x40, 0x55, 0xa8, 0x36, 0x2d, 0xa6, 0x10, 0x4d, 0xcc, 0x77, 0xc1, 0xab, 0xb2,
	0x43, 0x34, 0x16, 0x44, 0xae, 0x59, 0x54, 0xaf, 0x39, 0xb2, 0x23, 0x83, 0x27, 0xb7, 0x86, 0x1e,
	0x0d, 0x79, 0x8a, 0x28, 0x4d, 0x71, 0x1f, 0x3d, 0x1a, 0x86, 0x03, 0x19, 0x47, 0x03, 0x17, 0x33,
	0xd2, 0xa3, 0xe1, 0x13, 0x44, 0x60, 0x05, 0x55, 0xb6, 0xab, 0xc0, 0x88, 0xe2, 0x35, 0x47, 0x66,
	0x2b, 0xd8, 0xa1, 0xb5, 0x45, 0x73, 0xd1, 0x76, 0x73, 0x81, 0xa0, 0xb7, 0x0b, 0x2d, 0x37, 0x0f,
	0xc0, 0xe7, 0xbe, 0x9d, 0x84, 0x57, 0xa0, 0x5d, 0x0e, 0xd2, 0x58, 0x84, 0x71, 0xae, 0x79, 0x92,
	0x5a, 0x84, 0xd8, 0xcf, 0x35, 0x0e, 0x2b, 0x9e, 0x12, 0x96, 0x6d, 0x87, 0x6a, 0x86, 0xe8, 0xbc,
	0xbf, 0xcf, 0x9c, 0xdf, 0x80, 0x0e, 0x12, 0x38, 0xee, 0x5d, 0xa2, 0xc0, 0x42, 0x6e, 0x96, 0xed,
	0x34, 0xae, 0xd4, 0xa6, 0xf1, 0x17, 0x0d, 0x58, 0x9d, 0xb0, 0x96, 0xcc, 0x99, 0x9f, 0xb9, 0xdd,
	0x64, 0x00, 0xc4, 0xe6, 0x42, 0xeb, 0x0b, 0x2b, 0x95, 0x09, 0x60, 0xac, 0xba, 0xb0, 0xd3, 0x45,
	0x00, 0x49, 0x2b, 0x94, 0x5b, 0x56, 0x2a, 0x13, 0x50, 0x4d, 0xed, 0x42, 0x7d, 0x6a, 0x37, 0x61,
	0xe1, 0x54, 0xe9, 0x34, 0xb3, 0x32, 0x89, 0x00, 0x0a, 0x8f, 0xc4, 0x43, 0x9e, 0x08, 0x4c, 0xfa,
	0x3f, 0x27, 0x21, 0xe5, 0xac, 0x33, 0x94, 0x10, 0x45, 0x39, 0x2a, 0xd2, 0x9c, 0x9b, 0xc9, 0x10,
	0x5d, 0x13, 0x2a, 0x47, 0x85, 0xbd, 0x64, 0xd8, 0x0c, 0x2c, 0x88, 0xf2, 0x1f, 0x2d, 0x3a, 0x23,
	0x18, 0x59, 0xaf, 0x72, 0x08, 0x9c, 0x1a, 0x04, 0x48, 0x3c, 0x72, 0x2c, 0xd2, 0xc2, 0xfe, 0x3f,
	0x33, 0xda, 0xba, 0x35, 0xf4, 0x68, 0xb0, 0x63, 0x9d, 0x9e, 0x8b, 0x50, 0x16, 0x22, 0xb7, 0xca,
	0xdd, 0xb2, 0xc1, 0x3d, 0x43, 0x94, 0xf7, 0x26, 0x74, 0x8b, 0xa8, 0x2c, 0x2b, 0x1a, 0xd3, 0x98,
	0x0e, 0x23, 0x0d, 0x11, 0x2a, 0x49, 0x79, 0x58, 0x8a, 0xbe, 0x13, 0x42, 0x69, 0x7e, 0x2c, 0xfa,
	0x24, 0x84, 0xe4, 0x50, 0x9b, 0x1c, 0x16, 0x42, 0x72, 0xa8, 0x29, 0xeb, 0x4d, 0xe8, 0x46, 0x5a,
	0x8b, 0xac, 0xd0, 0xe1, 0x09, 0x39, 0x5a, 0xcd, 0x68, 0x76, 0x18, 0xf9, 0x19, 0x39, 0x55, 0xdf,
	0x80, 0x8e, 0x28, 0x75, 0xd4, 0x0b, 0x95, 0x28, 0x85, 0xb6, 0x2a, 0xdf, 0x32, 0xe1, 0x02, 0x42,
	0xd1, 0x9e, 0x1f, 0x2a, 0x15, 0x12, 0xce, 0xae, 0x78, 0xc4, 0x3c, 0x44, 0x04, 0x72, 0x50, 0x42,
	0xab, 0x28, 0x2f, 0x4d, 0x2b, 0x8c, 0x3c, 0x5a, 0x66, 0x1c, 0xb5, 0xc4, 0xb4, 0x5e, 0x28, 0x55,
	0xda, 0x63, 0x30, 0xcd, 0x1f, 0x2a, 0xe5, 0x5a, 0xaf, 0x4a, 0x72, 0x0d, 0xd8, 0xd6, 0x07, 0xa5,
	0x2e, 0xfd, 0xff, 0x35, 0x4f, 0xd3, 0xe8, 0x2c, 0x60, 0xba, 0x13, 0x1a, 0x17, 0x4a, 0x9c, 0xbf,
	0xb4, 0xc2, 0x9b, 0x41, 0x9c, 0x10, 0x1d, 0x17, 0xa5, 0xc8, 0x93, 0x97, 0x56, 0x47, 0xb6, 0x30,
	0x4e, 0xbe, 0x8e, 0x0b, 0x14, 0x84, 0x3c, 0x6e, 0x06, 0xf2, 0x5e, 0x87, 0x65, 0x1d, 0x17, 0xb8,
	0x60, 0x49, 0x44, 0x9b, 0xa1, 0xab, 0xa3, 0x98, 0xe2, 0x24, 0xcd, 0x11, 0xba, 0xcb, 0x83, 0x57,
	0x47, 0x8d, 0x53, 0xdc, 0xb3, 0x43, 0x57, 0x43, 0x79, 0xb7, 0xc8, 0xba, 0x1f, 0xa4, 0xa5, 0x16,
	0xb9, 0x13, 0xe5, 0x15, 0xc6, 0x7b, 0x0b, 0xba, 0x0e, 0x4a, 0xf3, 0xd8, 0x0a, 0xf3, 0x71, 0xe4,
	0x18, 0x95, 0x3c, 0x17, 0x8a, 0x07, 0x71, 0x1c, 0xc9, 0x75, 0xc5, 0x32, 0xcf, 0xb1, 0xb7, 0xe0,
	0xea, 0x62, 0x0c, 0xb7, 0x16, 0xa1, 0x44, 0xc9, 0xc2, 0x0a, 0xf7, 0x1a, 0x0a, 0x97, 0xbd, 0x8e,
	0x8b, 0xac, 0x47, 0xf9, 0x2c, 0xdb, 0x1d, 0x82, 0x5b, 0xa1, 0xc4, 0x45, 0x96, 0x6a, 0xa2, 0xe8,
	0xba, 0x56, 0x54, 0x48, 0xef, 0x1d, 0x58, 0xd1, 0x71, 0x51, 0x08, 0x55, 0xa6, 0xa5, 0x21, 0x5b,
	0x21, 0xb2, 0x09, 0x2c, 0xd7, 0x75, 0x16, 0x11, 0xc9, 0xaa, 0xab, 0xcb, 0x20, 0xfc, 0x7f, 0x6f,
	0x84, 0x4d, 0xdd, 0x91, 0x41, 0x2a, 0xcc, 0xa5, 0x16, 0xd5, 0x36, 0x36, 0x10, 0xae, 0x0b, 0x4c,
	0xd5, 0xb6, 0x31, 0x83, 0x28, 0x30, 0x8a, 0x33, 0x9d, 0x3a, 0x45, 0x90, 0x00, 0x12, 0x07, 0x67,
	0x1a, 0xc9, 0x59, 0x15, 0x32, 0x10, 0xae, 0xa2, 0xe2, 0x4c, 0x0b, 0xa5, 0xd2, 0xdc, 0x9a, 0x45,
	0x16, 0xe6, 0xbc, 0x44, 0xa1, 0x10, 0x59, 0x74, 0x79, 0x04, 0x63, 0x4f, 0x0c, 0x1d, 0xb2, 0xe4,
	0xdd, 0xe1, 0x10, 0x9c, 0x9b, 0x28, 0x12, 0x33, 0x2d, 0x97, 0x6b, 0x10, 0xfe, 0x5f, 0x31, 0x1a,
	0xb9, 0x75, 0xbc, 0xe0, 0x5e, 0x4a, 0x73, 0xba, 0x0a, 0xd8, 0x57, 0x51, 0xe6, 0xc4, 0x45, 0x9a,
	0x1f, 0x58, 0x14, 0xee, 0x6a, 0xdc, 0x32, 0x15, 0x0d, 0x8b, 0x0b, 0x39, 0xd4, 0x15, 0xd1, 0x4d,
	0x68, 0xe5, 0x32, 0xa4, 0x48, 0x91, 0xd5, 0xab, 0x72, 0x79, 0x84, 0x20, 0x59, 0x55, 0xf9, 0xc4,
	0x55, 0x0a, 0xda, 0x8d, 0x52, 0x95, 0xfe, 0xef, 0xce, 0x91, 0xd2, 0x54, 0xf3, 0xea, 0x90, 0xfb,
	0xbb, 0xef, 0x06, 0x9d, 0xd2, 0x34, 0xb0, 0xfd, 0x6a, 0xc0, 0x0d, 0x40, 0xf2, 0xb4, 0x7f, 0x12,
	0x0d, 0x07, 0xee, 0x4a, 0x0e, 0x83, 0x98, 0x83, 0x8a, 0x75, 0x2a, 0x12, 0x2b, 0xa3, 0x18, 0xc4,
	0x9c, 0x68, 0x30, 0x90, 0x71, 0x2e, 0x79, 0xcc, 0x2d, 0x48, 0x47, 0x63, 0x56, 0xa0, 0xe0, 0xb2,
	0xb7, 0x36, 0x18, 0xe4, 0x9c, 0x72, 0x18, 0xc7, 0xd6, 0x06, 0x65, 0xb0, 0x7e, 0x29, 0xa8, 0x35,
	0x7e, 0x29, 0xd1, 0x83, 0x66, 0x19, 0x47, 0xb9, 0xb5, 0x43, 0x31, 0x4d, 0xa7, 0x0c, 0x69, 0x60,
	0x56, 0x07, 0x27, 0xf5, 0x6b, 0x1b, 0x16, 0x13, 0x83, 0x36, 0x3b, 0x84, 0x21, 0xba, 0x2a, 0x97,
	0x89, 0x93, 0x13, 0xde, 0x18, 0x06, 0xf0, 0xff, 0x51, 0x83, 0x5c, 0x0d, 0xec, 0xd1, 0xf2, 0xbe,
	0x05, 0x4d, 0x1c, 0x39, 0x76, 0x35, 0x2c, 0x1b, 0x2f, 0xc2, 0x23, 0x1c, 0xc8, 0x80, 0x32, 0xbc,
	0x37, 0x60, 0xb1, 0xa4, 0xf0, 0x15, 0x3b, 0x1a, 0xf8, 0x5e, 0xfe, 0xa3, 0xa7, 0x22, 0xc3, 0x06,
	0x3c, 0x15, 0x19, 0x36, 0x75, 0x38, 0x4c, 0x13, 0x72, 0x46, 0x37, 0x03, 0x4a, 0x7b, 0xef, 0xc2,
	0x62, 0x2c, 0xf3, 0x93, 0xb4, 0xcf, 0x77, 0x85, 0xd8, 0x67, 0xf7, 0x68, 0x9f, 0x90, 0xe4, 0xa1,
	0x60, 0x02, 0xef, 0x2d, 0x68, 0x92, 0xd3, 0x6d, 0xa1, 0xee, 0x74, 0x7b, 0xf4, 0x4c, 0x9f, 0x0a,
	0x65, 0xfc, 0x1d, 0x98, 0xeb, 0x3f, 0x83, 0x05, 0x6a, 0x16, 0xd5, 0xa6, 0xd3, 0x81, 0x9d, 0x5e,
	0x4c, 0xe3, 0xea, 0xc9, 0x44, 0x16, 0x12, 0x9e, 0xb7, 0x54, 0x26, 0xb2, 0x17, 0x98, 0x75, 0x03,
	0x96, 0x72, 0x15, 0xba, 0xdb, 0x1f, 0xcd, 0x60, 0x31, 0x57, 0x74, 0x1b, 0xf5, 0x00, 0x9a, 0x8f,
	0x6c, 0xeb, 0x4b, 0x91, 0x38, 0x7e, 0xa5, 0xa0, 0xe8, 0x10, 0x1d, 0x96, 0x86, 0x17, 0xa5, 0x49,
	0x75, 0xa8, 0x1d, 0xaf, 0x06, 0xf0, 0x7f, 0x31, 0x07, 0xcb, 0xb5, 0x4e, 0xcd, 0xbc, 0xc1, 0xf0,
	0x26, 0x74, 0xcf, 0x7b, 0xa9, 0x2c, 0x43, 0x1b, 0xb2, 0x35, 0x71, 0x9e, 0x0e, 0x21, 0xbf, 0xe0,
	0xb8, 0x6d, 0x15, 0x3d, 0xb3, 0x54, 0xc6, 0xf5, 0xc2, 0xd1, 0x33, 0x4b, 0xe6, 0x41, 0xb3, 0x76,
	0xb5, 0x98, 0xd2, 0xe6, 0xae, 0x46, 0x56, 0x0c, 0x35, 0x47, 0x70, 0x16, 0xcc, 0x2d, 0x72, 0xc6,
	0x51, 0xa4, 0x86, 0x34, 0x0a, 0x1d, 0x69, 0x63, 0x1e, 0x75, 0x02, 0x86, 0x50, 0xf7, 0x2a, 0xe4,
	0x48, 0xa8, 0xd0, 0x5c, 0x80, 0x65, 0x79, 0x4f, 0xa8, 0x27, 0x88, 0xf1, 0x7c, 0xe8, 0x96, 0x59,
	0x98, 0x45, 0x17, 0x61, 0x6c, 0x6c, 0x37, 0x3e, 0x2c, 0xcb, 0xec, 0x69, 0x74, 0xb1, 0x6f, 0x0c,
	0x38, 0x8e, 0xdd, 0x22, 0x11, 0x1b, 0x78, 0x66, 0xd1, 0x76, 0x32, 0x81, 0x54, 0x14, 0x4d, 0x2d,
	0xfd, 0xbf, 0xdc, 0x00, 0xa8, 0x66, 0x95, 0x54, 0xc2, 0xcc, 0x32, 0x6d, 0xb0, 0x52, 0x92, 0x31,
	0xc7, 0xd7, 0x28, 0x44, 0x60, 0x73, 0x59, 0x91, 0xce, 0x44, 0x2d, 0xdb, 0xb4, 0x3a, 0x51, 0xd1,
	0xc8, 0xaa, 0x3b, 0x84, 0x39, 0x50, 0xd1, 0x88, 0xce, 0x0d, 0x91, 0x15, 0x42, 0x45, 0x7a, 0xa8,
	0x84, 0x3b, 0x29, 0x2b, 0x94, 0xff, 0xe7, 0x61, 0x65, 0x3c, 0x8c, 0xe3, 0xdd, 0x07, 0xe8, 0x45,
	0xa5, 0x18, 0x8b, 0x0e, 0xed, 0x4c, 0x04, 0x7c, 0x1e, 0x44, 0xa5, 0x60, 0xdf, 0x76, 0xcf, 0x26,
	0x29, 0xc4, 0xa0, 0x64, 0x3c, 0xeb, 0x8a, 0x13, 0xdf, 0xf7, 0xb7, 0x21, 0x06, 0x25, 0xcd, 0xb9,
	0xe0, 0xff, 0xde, 0x32, 0x78, 0xd3, 0x4c, 0xff, 0x30, 0x57, 0x6e, 0xee, 0x03, 0xf0, 0x45, 0xac,
	0xb8, 0x18, 0xf2, 0x86, 0x9c, 0x6c, 0xa5, 0xb9, 0x8f, 0xb5, 0x5f, 0x0c, 0x83, 0x76, 0x6c, 0x93,
	0xde, 0x67, 0xb0, 0x5a, 0x15, 0x2c, 0x4f, 0x23, 0x65, 0xef, 0x20, 0xbf, 0x76, 0x55, 0x69, 0x22,
	0x0a, 0x56, 0xe2, 0x31, 0xd8, 0xfb, 0x01, 0x30, 0xd3, 0x30, 0x95, 0x1c, 0x4e, 0xba, 0x31, 0x93,
	0xc3, 0xe1, 0xb3, 0xa0, 0x65, 0x28, 0x0f, 0xa5, 0xf7, 0x1b, 0xd0, 0x75, 0xa5, 0x48, 0xc7, 0x37,
	0x57, 0x01, 0x5f, 0xb9, 0xa2, 0x24, 0x85, 0xa7, 0x3b, 0xb6, 0x34, 0x99, 0x00, 0x55, 0xc7, 0x53,
	0x79, 0xc1, 0x97, 0x48, 0x77, 0xae, 0x28, 0xfe, 0x33, 0xdb, 0xf1, 0x43, 0x79, 0xe1, 0x7d, 0x0c,
	0x7c, 0x27, 0x8d, 0xdc, 0x51, 0x1c, 0x6d, 0xba, 0x39, 0xb3, 0xe4, 0x13, 0x19, 0x25, 0x01, 0x57,
	0x83, 0xe9, 0x5a, 0xa5, 0x28, 0xfe, 0x5a, 0xd7, 0x8c, 0x36, 0x0a, 0x43, 0xae, 0x14, 0x45, 0x4a,
	0x35, 0xda, 0x99, 0xc8, 0x8c, 0xcd, 0xd2, 0xbe, 0x66, 0xb4, 0x9f, 0x8a, 0xec, 0x00, 0x89, 0xec,
	0x68, 0x3f, 0xe5, 0x42, 0xde, 0x11, 0x6c, 0xd8, 0xc6, 0x47, 0x5a, 0xe4, 0xb1, 0xb9, 0xe3, 0x49,
	0xd2, 0x7f, 0xf9, 0xde, 0xeb, 0xb3, 0x3b, 0x61, 0x08, 0x49, 0x80, 0xaf, 0xc7, 0x93, 0xa8, 0xda,
	0x70, 0x64, 0x22, 0xbb, 0xa0, 0x03, 0xe3, 0xaa, 0xe1, 0x78, 0x2a, 0xb2, 0x0b, 0x3b, 0x1c, 0x98,
	0xae, 0x95, 0x2d, 0xe2, 0x72, 0xc4, 0x51, 0xa9, 0xd9, 0x65, 0x8f, 0xe2, 0x72, 0x64, 0xcb, 0x62,
	0xba, 0xb6, 0x02, 0x4c, 0xb8, 0x8b, 0x43, 0x53, 0xb3, 0x57, 0x80, 0x31, 0xbc, 0xed, 0x0a, 0x30,
	0x50, 0x6d, 0x4c, 0xc9, 0xb6, 0xea, 0x9d, 0x6b, 0x0e, 0x56, 0xcd, 0x1e, 0xd3, 0x63, 0x26, 0xb2,
	0x63, 0x6a, 0x61, 0x6f, 0x1f, 0x56, 0xea, 0x7c, 0xe2, 0x3e, 0x87, 0xb0, 0x5e, 0xbd, 0x9a, 0x4d,
	0xdc, 0x0f, 0xba, 0x71, 0x1d, 0xf4, 0x3e, 0x71, 0x43, 0x41, 0x8e, 0x20, 0x13, 0xce, 0xba, 0x75,
	0x35, 0x87, 0xe7, 0x51, 0x79, 0x66, 0xc7, 0x03, 0xd3, 0xde, 0x23, 0x58, 0xb3, 0x0c, 0xe2, 0xf1,
	0xe0, 0xd6, 0xec, 0xee, 0xb8, 0x38, 0x1c, 0x37, 0xde, 0x99, 0x6b, 0x3f, 0x81, 0xf5, 0x8a, 0xd1,
	0xc5, 0x58, 0xcc, 0xeb, 0xd6, 0x55, 0x9c, 0x38, 0x40, 0xb7, 0x1a, 0x8f, 0x23, 0xbc, 0x63, 0xd8,
	0xb4, 0xbc, 0xc6, 0xa2, 0x75, 0x26, 0x1a, 0xf6, 0xc6, 0x6c, 0x76, 0xf5, 0xc8, 0x9d, 0x17, 0x4f,
	0xe1, 0x6a, 0x3d, 0xad, 0xc2, 0x78, 0x9b, 0xd7, 0xf4, 0xd4, 0x85, 0xf4, 0xb8, 0xa7, 0x4e, 0xd3,
	0xac, 0x44, 0xcf, 0x79, 0xb6, 0xb3, 0x45, 0x1c, 0x66, 0x8b, 0x9e, 0x2f, 0x32, 0x2b, 0x7a, 0xbe,
	0xa0, 0xad, 0x58, 0x58, 0xe7, 0x24, 0xd7, 0xbe, 0x3d, 0xb3, 0xf6, 0x89, 0x20, 0xf2, 0x4a, 0x31,
	0x06, 0xfb, 0x7f, 0x71, 0xbe, 0x26, 0xb3, 0x9d, 0x90, 0x64, 0xe5, 0x41, 0xd5, 0x94, 0x07, 0xba,
	0xde, 0x51, 0x5e, 0xda, 0x53, 0x0b, 0x93, 0xa4, 0x14, 0xa4, 0xb1, 0x75, 0x70, 0x52, 0x9a, 0xfc,
	0x98, 0xb2, 0x66, 0xc9, 0x31, 0x84, 0xb4, 0xe4, 0x08, 0x62, 0x8f, 0x21, 0xa6, 0x11, 0x77, 0x9a,
	0xaa, 0x97, 0xd6, 0xab, 0x83, 0x69, 0xd2, 0x0f, 0x2b, 0x6f, 0x1b, 0xa5, 0x2b, 0xfd, 0xb0, 0x55,
	0xd7, 0x0f, 0x5f, 0x03, 0xf3, 0xed, 0x53, 0x58, 0xf3, 0xda, 0xb4, 0x09, 0x43, 0x3e, 0x34, 0x54,
	0x0d, 0xe8, 0xfb, 0x21, 0xd6, 0x2a, 0x19, 0x42, 0x66, 0x2f, 0x87, 0x52, 0x47, 0xac, 0x55, 0x1a,
	0x80, 0xba, 0x82, 0xfb, 0xb7, 0xc3, 0x5d, 0xc1, 0xad, 0x79, 0x17, 0xb6, 0xbe, 0x4a, 0xce, 0xe8,
	0xfc, 0xaf, 0xbe, 0x66, 0x43, 0x75, 0xc2, 0xd8, 0x5b, 0xde, 0x57, 0xc9, 0xd9, 0xd3, 0xe8, 0xe2,
	0xc8, 0x7e, 0xd4, 0x86, 0x6a, 0xc5, 0x36, 0x2c, 0xd2, 0x81, 0x52, 0xb2, 0xb1, 0xc5, 0x10, 0x6a,
	0x05, 0x52, 0xa5, 0xec, 0x67, 0x34, 0x46, 0x56, 0x4b, 0xaa, 0x94, 0xfc, 0x8c, 0xfe, 0x6f, 0xcd,
	0xc1, 0x8d, 0x2b, 0x0e, 0x2a, 0x3c, 0x3c, 0x4d, 0x20, 0xc1, 0x7c, 0xe7, 0x64, 0xed, 0x10, 0x0a,
	0x25, 0x18, 0x14, 0xf2, 0xce, 0x15, 0x7f, 0x43, 0x65, 0xad, 0xee, 0x5c, 0x99, 0x6f, 0xa7, 0x48,
	0x11, 0xa2, 0x54, 0xfd, 0xbb, 0x29, 0x30, 0x28, 0x1a, 0xa6, 0x37, 0xc1, 0x7d, 0x45, 0x65, 0x48,
	0xcc, 0xb4, 0x75, 0x2c, 0x92, 0x88, 0x6e, 0x42, 0x4b, 0x96, 0xf4, 0x49, 0x86, 0x9d, 0xc0, 0x25,
	0x59, 0x1e, 0x23, 0xe8, 0x6d, 0xc1, 0xa2, 0xcc, 0xe9, 0xd8, 0x66, 0x67, 0x90, 0xcc, 0x71, 0x01,
	0xdd, 0x80, 0xa5, 0x7e, 0x28, 0x51, 0x2b, 0xe2, 0x99, 0x5c, 0xec, 0x93, 0x8e, 0x84, 0xad, 0xed,
	0x87, 0x65, 0xda, 0x1b, 0xa4, 0x79, 0xdf, 0x5e, 0xe5, 0xee, 0x1f, 0x1b, 0xd8, 0xff, 0x8f, 0x0d,
	0x58, 0x9f, 0x3a, 0xf7, 0xc8, 0xb1, 0x94, 0x4a, 0xee, 0x3a, 0x26, 0x11, 0x33, 0xe2, 0x10, 0x61,
	0x33, 0xc0, 0x24, 0x0e, 0xbc, 0x32, 0xd7, 0xdd, 0x58, 0x1b, 0x36, 0x10, 0xe2, 0x47, 0x06, 0xcf,
	0xcb, 0xd1, 0x40, 0x64, 0x7c, 0xd9, 0x6f, 0x55, 0xac, 0x91, 0x69, 0x3f, 0x45, 0xa1, 0xc0, 0x9c,
	0xfd, 0x58, 0xc4, 0x5a, 0x99, 0x23, 0xfe, 0x12, 0x04, 0x67, 0xa4, 0xfe, 0x6d, 0x0a, 0x77, 0x6f,
	0xb9, 0xac, 0x3e, 0x3c, 0xa9, 0x02, 0x92, 0x26, 0x14, 0x3d, 0x19, 0x90, 0x6c, 0x33, 0x16, 0x01,
	0xff, 0x9f, 0x34, 0x61, 0x6b, 0xa6, 0xa6, 0xe0, 0x7d, 0x07, 0xd6, 0x95, 0x88, 0x92, 0xb1, 0x2f,
	0x61, 0x78, 0x10, 0x56, 0x31, 0xa3, 0xf6, 0xa9, 0x8b, 0xf7, 0x5d, 0xf0, 0x28, 0x2c, 0x32, 0x4e,
	0xcc, 0xdf, 0xd3, 0x51, 0x4e, 0x9d, 0xfa, 0x2d, 0x58, 0x21, 0xce, 0x55, 0x27, 0xcd, 0xa0, 0x75,
	0x10, 0x6b, 0x3f, 0x79, 0xf1, 0xde, 0x81, 0x55, 0xc3, 0xb3, 0x22, 0x33, 0x63, 0xd8, 0x25, 0xb4,
	0xa3, 0xfb, 0x0e, 0xac, 0x97, 0x97, 0x79, 0x3c, 0x5e, 0xb5, 0x19, 0xd2, 0x55, 0xcc, 0x98, 0x68,
	0x67, 0x34, 0x4d, 0x6c, 0x86, 0x78, 0x2d, 0x9a, 0xa4, 0x7e, 0x0b, 0x56, 0x88, 0xb8, 0x6a, 0x80,
	0x19, 0xec, 0x0e, 0x62, 0xeb, 0xed, 0x8c, 0x26, 0xc8, 0xd8, 0x79, 0x13, 0x8d, 0xd1, 0xdd, 0x86,
	0xb5, 0x54, 0x86, 0xd4, 0x71, 0x34, 0x21, 0x06, 0x42, 0x5b, 0xa9, 0xb1, 0x92, 0xca, 0x40, 0x44,
	0xc9, 0x3e, 0x63, 0xb1, 0x47, 0xa9, 0x0c, 0x4d, 0xe7, 0x91, 0x54, 0x0c, 0xb4, 0x75, 0xd1, 0xaf,
	0xa6, 0x92, 0x6e, 0xd7, 0xef, 0x33, 0x9a, 0xb9, 0x52, 0xfd, 0x8e, 0xeb, 0xb2, 0xe5, 0x7a, 0x7c,
	0x99, 0xc7, 0x13, 0x5c, 0xa3, 0x71, 0xd2, 0x8e, 0xe5, 0xfa, 0x69, 0x59, 0xa7, 0x75, 0x2b, 0xa8,
	0x3b, 0x73, 0x05, 0xad, 0xd4, 0x57, 0xd0, 0x7f, 0x69, 0x4c, 0x89, 0xf0, 0xc3, 0x67, 0x3f, 0x23,
	0x71, 0x5d, 0xed, 0x9a, 0x32, 0x25, 0x1b, 0x2e, 0x2a, 0xdd, 0xb6, 0xa1, 0x34, 0x39, 0x58, 0x2f,
	0xf3, 0xb8, 0xbe, 0x75, 0x2a, 0x84, 0x77, 0x0b, 0x20, 0xaa, 0xb2, 0xcd, 0xec, 0xd7, 0x30, 0x74,
	0x53, 0x51, 0xe8, 0xc8, 0x0c, 0x95, 0x75, 0x6b, 0x02, 0xa2, 0x68, 0x90, 0x4a, 0x6f, 0x03, 0x16,
	0x52, 0x19, 0x0e, 0x0b, 0x2b, 0xe2, 0x53, 0xf9, 0xa2, 0x20, 0x27, 0xa4, 0x0c, 0x13, 0x39, 0xca,
	0xad, 0x6c, 0x48, 0xe5, 0x81, 0x1c, 0xe5, 0xbf, 0xd6, 0xbe, 0xf9, 0x3b, 0x0d, 0xd8, 0x98, 0xa1,
	0xe8, 0xd2, 0x47, 0x8f, 0x32, 0x4a, 0xee, 0x5a, 0x4f, 0x38, 0x01, 0x16, 0xbb, 0xe7, 0xbe, 0xbd,
	0x44, 0x00, 0x85, 0x03, 0x65, 0xef, 0x59, 0xa1, 0x61, 0x20, 0x6c, 0xa0, 0x0a, 0x0d, 0x17, 0x96,
	0x1a, 0xea, 0x09, 0xb1, 0x71, 0x19, 0x7b, 0x36, 0x4a, 0x47, 0x19, 0x7b, 0xf4, 0x41, 0x4d, 0xc8,
	0xbc, 0xd8, 0x49, 0x62, 0x8a, 0xec, 0xf9, 0x7f, 0x6b, 0x7a, 0x7a, 0x50, 0x97, 0x76, 0x66, 0x77,
	0xa3, 0x66, 0x76, 0x93, 0xa8, 0x2b, 0xdd, 0x19, 0xab, 0xca, 0xda, 0xe7, 0x99, 0xf3, 0xf5, 0xcf,
	0x33, 0x29, 0x34, 0x5c, 0x05, 0x11, 0x0d, 0x40, 0x67, 0xe7, 0x20, 0xb2, 0xd1, 0x5e, 0x4a, 0x13,
	0x6e, 0x14, 0xb9, 0x09, 0xc0, 0x34, 0xd6, 0x92, 0x45, 0x85, 0xf5, 0xd4, 0x67, 0x51, 0xe1, 0xff,
	0xef, 0xf9, 0xa9, 0x23, 0xc8, 0x6a, 0xef, 0xde, 0xbb, 0xb0, 0x16, 0xf5, 0xfb, 0x4a, 0xf4, 0x23,
	0x2d, 0xc2, 0x24, 0x55, 0x22, 0xb6, 0x9f, 0xb6, 0xae, 0x3a, 0xfc, 0x01, 0xa1, 0xbd, 0xf7, 0x61,
	0xa3, 0x22, 0xed, 0x45, 0xf1, 0x19, 0x72, 0xb2, 0x87, 0x92, 0xe7, 0xb2, 0x1e, 0xd8, 0x1c, 0xef,
	0xdb, 0x50, 0xf1, 0x08, 0xeb, 0x6e, 0x88, 0x15, 0x87, 0x7e, 0x4e, 0x03, 0x83, 0xb6, 0x78, 0x52,
	0x86, 0xa5, 0xcc, 0xc4, 0xd8, 0xcc, 0x74, 0xb2, 0xa4, 0x3c, 0x96, 0x99, 0x30, 0xf3, 0x33, 0x49,
	0x65, 0xa7, 0xa9, 0x4e, 0xb5, 0x87, 0x02, 0x63, 0x9c, 0x97, 0x9d, 0xb3, 0x6e, 0x9d, 0xd9, 0x9e,
	0xe5, 0x76, 0x32, 0x1c, 0x0c, 0xb8, 0xce, 0x25, 0xc7, 0xed, 0xb3, 0xe1, 0x60, 0x30, 0x56, 0xa7,
	0xa3, 0xda, 0x63, 0xe9, 0x53, 0xa7, 0x72, 0x75, 0x56, 0xbc, 0xf6, 0xac, 0xef, 0xb8, 0xce, 0x8c,
	0x2e, 0x0e, 0x90, 0x8d, 0x64, 0x3c, 0x3b, 0x40, 0x9e, 0xa7, 0x36, 0x61, 0xe8, 0xfb, 0xe0, 0x1b,
	0xb0, 0x44, 0x52, 0x2e, 0x3d, 0xb1, 0x4e, 0x31, 0x04, 0x0f, 0x4f, 0x28, 0xa3, 0x47, 0x12, 0x90,
	0x45, 0xca, 0xe2, 0xa8, 0x87, 0x92, 0xcf, 0x7b, 0x1b, 0x56, 0xa9, 0x84, 0xcc, 0xc3, 0x22, 0xea,
	0x8b, 0x70, 0xd4, 0x63, 0xf5, 0xa5, 0x83, 0xe8, 0x67, 0xf9, 0x51, 0xd4, 0x17, 0x5f, 0xf6, 0xfc,
	0x7b, 0xb0, 0x7b, 0xb5, 0xc5, 0x55, 0x5d, 0x29, 0x31, 0x77, 0xb1, 0x0d, 0xe0, 0xff, 0xb5, 0xb9,
	0xa9, 0x2d, 0x48, 0x06, 0x95, 0x0b, 0xfb, 0x37, 0x66, 0x86, 0xfd, 0xe7, 0x26, 0xc2, 0xfe, 0xe6,
	0x3a, 0xc1, 0xfc, 0xcc, 0xeb, 0x04, 0xcd, 0xfa, 0x75, 0x82, 0x2a, 0x84, 0xbf, 0x30, 0x19, 0xc2,
	0x37, 0x57, 0x07, 0x16, 0xeb, 0x57, 0x07, 0x36, 0x61, 0x61, 0x44, 0xd7, 0x06, 0xf8, 0x72, 0x00,
	0x01, 0x6e, 0x8b, 0xb4, 0xc6, 0xb7, 0x08, 0x45, 0xbe, 0xd8, 0x25, 0x49, 0x81, 0x2f, 0xde, 0x88,
	0x50, 0x6d, 0x44, 0x54, 0x56, 0x87, 0x7d, 0x2b, 0xdc, 0x29, 0xed, 0x36, 0x57, 0xa7, 0xda, 0x5c,
	0xfe, 0xff, 0x9c, 0x16, 0x4c, 0x64, 0x2a, 0xde, 0x80, 0xa5, 0x9c, 0xcc, 0x2a, 0xeb, 0x16, 0x5a,
	0xcc, 0xd1, 0x64, 0x22, 0x55, 0x24, 0x77, 0xd7, 0x65, 0xac, 0xfe, 0x66, 0x6f, 0xcb, 0xbc, 0x06,
	0x90, 0x87, 0x89, 0xcd, 0x65, 0x01, 0x9d, 0x1f, 0x30, 0x02, 0xb5, 0xaf, 0x3c, 0x2c, 0x47, 0xf1,
	0xa9, 0x1d, 0xa9, 0xfc, 0x78, 0x14, 0x9f, 0x92, 0xd7, 0x59, 0x8c, 0x8c, 0x11, 0xb7, 0xe0, 0xe2,
	0xfc, 0x64, 0xa1, 0xdd, 0x80, 0x25, 0x52, 0x68, 0xc7, 0xc2, 0xf4, 0x47, 0x69, 0xe2, 0xdd, 0x82,
	0xe5, 0x5c, 0x85, 0xe7, 0x72, 0x60, 0xf8, 0x2d, 0xd9, 0x7b, 0x3b, 0x5f, 0xc8, 0x01, 0xf1, 0xf4,
	0xa1, 0x9b, 0xab, 0x30, 0xcd, 0x1d, 0x45, 0xcb, 0xaa, 0xa2, 0x87, 0x88, 0x43, 0x1a, 0xff, 0xab,
	0x29, 0x5d, 0x86, 0xad, 0x5c, 0xab, 0x5e, 0x9b, 0x8b, 0x13, 0x46, 0xbd, 0xfe, 0xf1, 0xc4, 0x8d,
	0x54, 0xe3, 0x63, 0xda, 0x9d, 0xb4, 0x5f, 0xae, 0xb8, 0x97, 0xea, 0xff, 0xa5, 0x06, 0x6c, 0xce,
	0xa2, 0xba, 0xee, 0x72, 0x41, 0xed, 0x06, 0xc1, 0xdc, 0xd8, 0x0d, 0x82, 0x57, 0xea, 0xcf, 0x05,
	0xcc, 0xbb, 0x40, 0xbd, 0xf9, 0xc2, 0xd5, 0x5e, 0x49, 0x88, 0x32, 0x7b, 0x87, 0x9f, 0xae, 0x24,
	0x44, 0x99, 0xf0, 0xff, 0x45, 0x63, 0x4a, 0x6e, 0x3a, 0x8b, 0xfc, 0xbb, 0xe0, 0xf5, 0x22, 0x1d,
	0x9f, 0x86, 0x66, 0x43, 0x97, 0x5a, 0xa5, 0x4e, 0x72, 0xae, 0x51, 0x0e, 0xc9, 0xd7, 0x63, 0xc2,
	0x7b, 0xf7, 0x61, 0xc7, 0x50, 0x84, 0xb9, 0x4c, 0x4b, 0x11, 0xc6, 0x03, 0x11, 0xe5, 0x21, 0x91,
	0x71, 0x5b, 0xb7, 0x4c, 0xfe, 0xe7, 0x98, 0xbd, 0x8f, 0xb9, 0x0f, 0x30, 0xd3, 0xfb, 0x08, 0x6e,
	0x9a, 0x6a, 0xea, 0xe5, 0xa8, 0x4a, 0x17, 0x91, 0xdf, 0x26, 0x82, 0xaa, 0xe0, 0x81, 0xc9, 0x75,
	0xb3, 0xd2, 0xac, 0x8c, 0x1e, 0xff, 0x43, 0xd8, 0x9e, 0xed, 0x2b, 0xc0, 0x05, 0x12, 0xf7, 0xb9,
	0x33, 0x99, 0x15, 0x05, 0xed, 0xb8, 0x4f, 0xdc, 0x9e, 0x96, 0xfe, 0x6f, 0xc0, 0xce, 0x55, 0x3e,
	0x02, 0x14, 0x92, 0xb4, 0xf4, 0x27, 0x8b, 0x77, 0x08, 0x6b, 0x39, 0xfc, 0xeb, 0x69, 0x43, 0xe8,
	0x8f, 0xe3, 0xb7, 0xff, 0xd7, 0xf1, 0xdb, 0xbf, 0xd1, 0x9c, 0x9a, 0x98, 0xca, 0x37, 0x72, 0x1b,
	0xd6, 0x74, 0x5c, 0x84, 0x03, 0x59, 0xea, 0x90, 0x2b, 0xe2, 0xa1, 0x5d, 0xd1, 0x71, 0xf1, 0x44,
	0x96, 0x3a, 0x30, 0x58, 0x3c, 0xc1, 0xc8, 0xa7, 0x73, 0x99, 0x3b, 0xc2, 0x39, 0x17, 0x77, 0x3c,
	0xbe, 0xcc, 0x2d, 0x1d, 0x73, 0x3c, 0x89, 0x6a, 0x1c, 0xe7, 0x1d, 0xc7, 0xcf, 0xa2, 0x8a, 0xe3,
	0x1d, 0xd8, 0x20, 0x4a, 0xa9, 0x46, 0x91, 0x4a, 0x1c, 0xb1, 0x19, 0xfc, 0x75, 0x24, 0x36, 0x39,
	0x96, 0xfe, 0x1e, 0x6c, 0x51, 0x0b, 0x06, 0x72, 0x54, 0xea, 0x48, 0x55, 0xec, 0xcd, 0x74, 0x20,
	0xb3, 0x63, 0x9b, 0x37, 0x51, 0x87, 0x89, 0xce, 0x86, 0xf2, 0x5c, 0xa8, 0x93, 0x81, 0x1c, 0xf1,
	0xe4, 0x60, 0x1d, 0x4f, 0x28, 0xe7, 0x19, 0x67, 0xd8, 0x5e, 0x32, 0x3d, 0xc5, 0x44, 0x97, 0x5c,
	0x2f, 0x0d, 0xed, 0x81, 0x89, 0xc1, 0x62, 0x6f, 0xc2, 0xa8, 0x27, 0x95, 0x09, 0x01, 0xda, 0x53,
	0x5f, 0xc7, 0xc5, 0xa7, 0x88, 0xa4, 0xe3, 0x9a, 0xb9, 0x19, 0xaa, 0x78, 0x20, 0x4b, 0x51, 0x8b,
	0x18, 0x13, 0x19, 0x7d, 0xf4, 0x8a, 0xb2, 0xb5, 0xa2, 0xab, 0x2e, 0xa3, 0x2d, 0x5b, 0x2a, 0x54,
	0x18, 0xbf, 0x03, 0xeb, 0x15, 0x8d, 0x7d, 0x93, 0xc9, 0x1c, 0x46, 0xab, 0x96, 0xee, 0xb9, 0x41,
	0xdb, 0x39, 0x30, 0xb4, 0x68, 0x59, 0x0b, 0xc5, 0x67, 0xd4, 0x8a, 0x25, 0x7d, 0x42, 0x58, 0xff,
	0x3f, 0x35, 0xe0, 0x95, 0x6b, 0x5c, 0x5f, 0xff, 0x5f, 0xc6, 0x7a, 0x7f, 0x7b, 0x5a, 0x68, 0xff,
	0x91, 0x89, 0xfb, 0xfe, 0x8f, 0x69, 0x0f, 0xc8, 0x17, 0x19, 0x6e, 0xfb, 0xc2, 0x3c, 0xc2, 0xe3,
	0x6e, 0xce, 0xd0, 0xd3, 0x3b, 0x58, 0x0d, 0x65, 0xd4, 0xaf, 0xce, 0x44, 0x7d, 0xf1, 0x6c, 0x48,
	0x37, 0xb3, 0x29, 0xab, 0x1e, 0x07, 0x6e, 0x23, 0xe6, 0x33, 0x8a, 0x04, 0x3b, 0x9f, 0x5a, 0x73,
	0x76, 0xcc, 0x75, 0x61, 0x2c, 0xe6, 0x6a, 0xa3, 0xb6, 0x8b, 0xe3, 0x51, 0x5b, 0xa3, 0x76, 0x2d,
	0xd5, 0xd5, 0xae, 0xab, 0x23, 0xbf, 0x68, 0x4c, 0x0e, 0x06, 0x32, 0x2e, 0x75, 0x34, 0x18, 0xf0,
	0x3e, 0xa8, 0x61, 0xfc, 0xbf, 0x5d, 0x9f, 0x96, 0x3f, 0xb2, 0x37, 0x2f, 0xff, 0xd5, 0x1c, 0x74,
	0xea, 0x01, 0x30, 0xd4, 0x14, 0x0b, 0x8e, 0x6a, 0x2d, 0x04, 0x98, 0xf4, 0xee, 0x41, 0xbb, 0x48,
	0x93, 0xb1, 0x77, 0x2b, 0xb6, 0xc6, 0x22, 0x67, 0x47, 0xa9, 0xfb, 0x2e, 0x8b, 0x53, 0xde, 0x8f,
	0xaa, 0xa7, 0x08, 0xdc, 0x55, 0x3a, 0x17, 0x95, 0xe1, 0x62, 0xb5, 0x43, 0xd5, 0xbd, 0x48, 0x40,
	0xf7, 0xb1, 0x3e, 0x81, 0x15, 0x8a, 0xd5, 0x55, 0xba, 0x54, 0xb3, 0x1e, 0xc4, 0xb0, 0xb5, 0x2a,
	0x19, 0xbb, 0xcf, 0xae, 0xe8, 0x7d, 0x2e, 0xf7, 0x29, 0xc3, 0x9f, 0x80, 0x2e, 0x31, 0x70, 0xdf,
	0x5f, 0x2d, 0xcc, 0xa8, 0x1e, 0xff, 0xec, 0x77, 0x58, 0xf4, 0x94, 0xd7, 0x21, 0x7f, 0x8b, 0x65,
	0xab, 0x9f, 0xfc, 0x5a, 0x6a, 0xba, 0x7a, 0xf7, 0xd5, 0x14, 0x55, 0x6f, 0x21, 0xff, 0xbf, 0x35,
	0x60, 0x75, 0x62, 0x68, 0x70, 0x65, 0xa3, 0x06, 0x17, 0x5a, 0xad, 0xb1, 0x19, 0x2c, 0x21, 0xcc,
	0xbe, 0xc5, 0xf2, 0xb2, 0x74, 0xa1, 0xc2, 0x66, 0xb0, 0x58, 0x5e, 0x96, 0x98, 0x81, 0x76, 0xad,
	0xc8, 0x78, 0xd6, 0x31, 0x49, 0x17, 0xf3, 0x45, 0x94, 0x84, 0x75, 0x07, 0x46, 0x1b, 0x31, 0x0f,
	0xac, 0xff, 0xc2, 0x78, 0x79, 0x4c, 0x3e, 0xfb, 0x2f, 0x08, 0x65, 0x08, 0x36, 0x61, 0xe1, 0x24,
	0x89, 0xf9, 0x23, 0xcc, 0x66, 0x60, 0x00, 0x32, 0x44, 0xd2, 0xfc, 0x64, 0x60, 0x25, 0x0f, 0x43,
	0xe6, 0x06, 0xec, 0x57, 0x88, 0x6f, 0x59, 0xd5, 0xfa, 0x2b, 0xc6, 0x9b, 0xab, 0xe0, 0xf6, 0xd0,
	0x36, 0x90, 0xff, 0x37, 0x1b, 0xe0, 0x4d, 0xcf, 0xed, 0x1f, 0x4e, 0x59, 0x42, 0x31, 0xd2, 0x3b,
	0xd7, 0x86, 0xc6, 0x9a, 0x0d, 0xbd, 0x73, 0x6d, 0x6c, 0xf6, 0xdb, 0xb0, 0x66, 0xd4, 0xc1, 0xb3,
	0x34, 0x3e, 0x63, 0x1a, 0x3e, 0x84, 0x09, 0xff, 0xd3, 0x34, 0x3e, 0x3b, 0xb0, 0x57, 0x18, 0x07,
	0xb2, 0x2c, 0xeb, 0xfe, 0xbd, 0x16, 0x22, 0xe8, 0x45, 0xad, 0x7f, 0xda, 0x80, 0x8d, 0x19, 0xab,
	0xe7, 0x6b, 0x4d, 0xce, 0xb7, 0xec, 0x53, 0x2b, 0xf5, 0xd6, 0x98, 0x87, 0x55, 0x4c, 0x4b, 0x5e,
	0x05, 0x50, 0xc3, 0x3c, 0x64, 0x6f, 0x72, 0xd3, 0x5d, 0xb5, 0x7c, 0x46, 0x0e, 0xe5, 0x57, 0x01,
	0xac, 0x1d, 0xab, 0x5e, 0xba, 0xaf, 0x25, 0xc8, 0x84, 0x0d, 0x5e, 0x1a, 0x1b, 0xca, 0x5e, 0xb7,
	0xe7, 0xb3, 0x22, 0xb7, 0xb7, 0xed, 0xff, 0x41, 0x35, 0xcc, 0xb5, 0x35, 0x4c, 0xb7, 0xc7, 0xe3,
	0xd3, 0xc8, 0xdd, 0x99, 0x24, 0x80, 0xcc, 0x46, 0xc2, 0xb2, 0x99, 0x4a, 0xc0, 0xaf, 0xed, 0x5e,
	0x46, 0xd9, 0x21, 0x07, 0x91, 0xbd, 0x71, 0x6c, 0x00, 0x92, 0xb9, 0x97, 0x65, 0xac, 0xec, 0x6a,
	0x22, 0xc0, 0x62, 0x47, 0x56, 0x8e, 0x12, 0xe0, 0xff, 0xee, 0xf8, 0xd0, 0xd7, 0x3f, 0x15, 0x98,
	0xf1, 0x42, 0x8f, 0xf3, 0x12, 0xcd, 0xd5, 0xbd, 0x44, 0x1e, 0x34, 0x6b, 0xd7, 0xef, 0x9b, 0xd6,
	0xe0, 0x36, 0xf7, 0xdd, 0x9b, 0xb5, 0xfb, 0xee, 0xce, 0x04, 0x5e, 0x18, 0x37, 0x81, 0xcb, 0x91,
	0x75, 0x1c, 0x61, 0x92, 0x9e, 0x61, 0xa1, 0x88, 0x0b, 0xe2, 0x97, 0xf8, 0x7e, 0x1f, 0x22, 0x8e,
	0x47, 0xc5, 0xbd, 0x7f, 0xb3, 0xc6, 0xdf, 0xf2, 0xb3, 0x07, 0xd7, 0x7b, 0x04, 0xab, 0x13, 0x4f,
	0x7a, 0x7a, 0x36, 0x18, 0x39, 0xf3, 0xa5, 0xcf, 0xdd, 0xed, 0x3b, 0xe6, 0x89, 0xd0, 0x3b, 0xf6,
	0x89, 0xd0, 0x3b, 0x0f, 0xb3, 0x42, 0x5f, 0x7a, 0x0f, 0x61, 0x65, 0xfc, 0xf1, 0x4b, 0xef, 0x15,
	0xfb, 0x84, 0xc5, 0x8c, 0x27, 0x31, 0xaf, 0x64, 0xf3, 0x08, 0x56, 0x27, 0xde, 0xc1, 0xb4, 0xed,
	0x99, 0xfd, 0x3c, 0xe6, 0x95, 0x8c, 0x3e, 0x81, 0xe5, 0xda, 0xc3, 0x97, 0x1e, 0x4b, 0xc9, 0xe9,
	0xb7, 0x30, 0xaf, 0x64, 0xb0, 0x0f, 0xdd, 0xb1, 0xb7, 0x28, 0x3d, 0x36, 0x7a, 0x67, 0x3d, 0x50,
	0x79, 0x25, 0x93, 0x07, 0xb0, 0x5c, 0x7b, 0x12, 0xd2, 0xb6, 0x62, 0xfa, 0xdd, 0xc9, 0xdd, 0x9b,
	0x33, 0x72, 0xf8, 0xd3, 0xe1, 0xc7, 0xd0, 0x1d, 0x7b, 0xc0, 0xd1, 0x36, 0x64, 0xd6, 0xe3, 0x91,
	0xbb, 0xaf, 0xcc, 0xcc, 0x63, 0x4e, 0x8f, 0x60, 0x75, 0xe2, 0x39, 0x47, 0x3b, 0xb8, 0xb3, 0x5f,
	0x79, 0xbc, 0xb2, 0x5b, 0x3f, 0xa5, 0xc9, 0xae, 0xbd, 0xd6, 0x53, 0x9b, 0xec, 0xe9, 0xc7, 0x1b,
	0x77, 0x5f, 0x9d, 0x9d, 0xc9, 0xad, 0x7a, 0x08, 0x2b, 0xe3, 0xef, 0x36, 0x5a, 0x66, 0x33, 0x5f,
	0x73, 0xbc, 0x7e, 0xe5, 0x8c, 0x3d, 0xe1, 0x58, 0xad, 0x9c, 0x59, 0x2f, 0x3b, 0x5e, 0xc9, 0xe8,
	0x53, 0x00, 0x7e, 0x9b, 0x27, 0x41, 0x1d, 0x9a, 0x27, 0x66, 0xea, 0x4d, 0x20, 0x37, 0x65, 0x33,
	0xde, 0xf1, 0xf9, 0x04, 0xc0, 0x3c, 0xa9, 0x93, 0xa0, 0xa2, 0x7b, 0xc3, 0x36, 0x63, 0xe2, 0x1d,
	0x9f, 0xdd, 0x9d, 0xe9, 0x8c, 0x29, 0x06, 0x42, 0xa9, 0xaf, 0xc3, 0xe0, 0xc7, 0x00, 0xd5, 0x53,
	0x3d, 0x96, 0xc1, 0xd4, 0xe3, 0x3d, 0xd7, 0x8c, 0x41, 0xa7, 0xfe, 0x30, 0x8f, 0xc7, 0x7d, 0x9d,
	0xf1, 0x58, 0xcf, 0x35, 0x2c, 0x56, 0x27, 0x1e, 0x5e, 0x19, 0x5f, 0x6c, 0x93, 0xef, 0xb1, 0xec,
	0x4e, 0x3d, 0xbe, 0xe2, 0xdd, 0x87, 0x4e, 0xfd, 0xc5, 0x15, 0xdb, 0x8a, 0x19, 0xaf, 0xb0, 0xec,
	0x8e, 0xbd, 0xba, 0x82, 0xca, 0xce, 0xf8, 0x6b, 0x2b, 0x5e, 0x6d, 0x5f, 0x4c, 0xbd, 0xc1, 0xb2,
	0xcb, 0xd7, 0xfe, 0x6a, 0xe4, 0x1f, 0x00, 0x54, 0xaf, 0xb2, 0xd8, 0xe1, 0x9b, 0x7a, 0xa7, 0x65,
	0xa2, 0xd6, 0x4f, 0xa1, 0x53, 0x7f, 0x41, 0xc0, 0x36, 0x77, 0xc6, 0xab, 0x02, 0xd7, 0x49, 0xad,
	0xda, 0x6b, 0x03, 0x76, 0xf1, 0x4d, 0x3f, 0x40, 0x70, 0x9d, 0xd4, 0x1a, 0x7b, 0x8f, 0xc8, 0x0a,
	0x8b, 0x59, 0x8f, 0x14, 0x5d, 0x27, 0xcb, 0xc7, 0x1f, 0xef, 0xb1, 0xc3, 0x37, 0xf3, 0x49, 0x9f,
	0xeb, 0x16, 0x51, 0xfd, 0x15, 0x1b, 0x3b, 0x1e, 0x33, 0x5e, 0xb6, 0xf9, 0x15, 0x9b, 0xba, 0xfe,
	0x52, 0x4d, 0x6d, 0x53, 0xcf, 0x78, 0xc0, 0xe6, 0x4a, 0x46, 0x8f, 0x61, 0xf5, 0x91, 0x7d, 0x84,
	0x84, 0x1f, 0x48, 0xe1, 0xe6, 0xcc, 0x78, 0x10, 0x66, 0x77, 0x77, 0x56, 0x16, 0xef, 0xac, 0x9f,
	0xc2, 0xfa, 0xd4, 0xe3, 0x28, 0xde, 0x2d, 0xf7, 0xe4, 0xdd, 0xcc, 0x57, 0x53, 0xae, 0x6c, 0xd6,
	0x21, 0xac, 0x4d, 0xbe, 0x8d, 0xe2, 0xf1, 0xe5, 0x90, 0x2b, 0xde, 0x4c, 0xb9, 0x92, 0xd5, 0x47,
	0xd0, 0xb2, 0x6f, 0x71, 0x78, 0x5b, 0xd6, 0x3f, 0x3b, 0xf6, 0x36, 0xc7, 0x35, 0x83, 0xd3, 0x1d,
	0x7b, 0xb5, 0xc2, 0x2e, 0x9a, 0x59, 0x4f, 0x5c, 0xd8, 0x13, 0x66, 0xe6, 0x33, 0x17, 0x0f, 0x3a,
	0x7f, 0xf0, 0xcb, 0x5b, 0x8d, 0x7f, 0xf9, 0xcb, 0x5b, 0x8d, 0x7f, 0xf7, 0xcb, 0x5b, 0x8d, 0xde,
	0x22, 0xd5, 0xf3, 0xc1, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x7f, 0x9a, 0xf7, 0xac, 0x5c,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgentServiceClient interface {
	// execution
	CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*types1.Empty, error)
	StartContainer(ctx context.Context, in *StartContainerRequest, opts ...grpc.CallOption) (*types1.Empty, error)
	// RemoveContainer will tear down an existing container by forcibly terminating
	// all processes running inside that container and releasing all internal
	// resources associated with it.
	// RemoveContainer will wait for all processes termination before returning.
	// If any process can not be killed or if it can not be killed after
	// the RemoveContainerRequest timeout, RemoveContainer will return an error.
	RemoveContainer(ctx context.Context, in *RemoveContainerRequest, opts ...grpc.CallOption) (*types1.Empty, error)
	ExecProcess(ctx context.Context, in *ExecProcessRequest, opts ...grpc.CallOption) (*types1.Empty, error)
	SignalProcess(ctx context.Context, in *SignalProcessRequest, opts ...grpc.CallOption) (*types1.Empty, error)
	WaitProcess(ctx context.Context, in *WaitProcessRequest, opts ...grpc.CallOption) (*WaitProcessResponse, error)
	ListProcesses(ctx context.Context, in *ListProcessesRequest, opts ...grpc.CallOption) (*ListProcessesResponse, error)
	UpdateContainer(ctx context.Context, in *UpdateContainerRequest, opts ...grpc.CallOption) (*types1.Empty, error)
	StatsContainer(ctx context.Context, in *StatsContainerRequest, opts ...grpc.CallOption) (*StatsContainerResponse, error)
	PauseContainer(ctx context.Context, in *PauseContainerRequest, opts ...grpc.CallOption) (*types1.Empty, error)
	ResumeContainer(ctx context.Context, in *ResumeContainerRequest, opts ...grpc.CallOption) (*types1.Empty, error)
	// stdio
	WriteStdin(ctx context.Context, in *WriteStreamRequest, opts ...grpc.CallOption) (*WriteStreamResponse, error)
	ReadStdout(ctx context.Context, in *ReadStreamRequest, opts ...grpc.CallOption) (*ReadStreamResponse, error)
	ReadStderr(ctx context.Context, in *ReadStreamRequest, opts ...grpc.CallOption) (*ReadStreamResponse, error)
	CloseStdin(ctx context.Context, in *CloseStdinRequest, opts ...grpc.CallOption) (*types1.Empty, error)
	TtyWinResize(ctx context.Context, in *TtyWinResizeRequest, opts ...grpc.CallOption) (*types1.Empty, error)
	// networking
	UpdateInterface(ctx context.Context, in *UpdateInterfaceRequest, opts ...grpc.CallOption) (*types.Interface, error)
	UpdateRoutes(ctx context.Context, in *UpdateRoutesRequest, opts ...grpc.CallOption) (*Routes, error)
	ListInterfaces(ctx context.Context, in *ListInterfacesRequest, opts ...grpc.CallOption) (*Interfaces, error)
	ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*Routes, error)
	// tracing
	StartTracing(ctx context.Context, in *StartTracingRequest, opts ...grpc.CallOption) (*types1.Empty, error)
	StopTracing(ctx context.Context, in *StopTracingRequest, opts ...grpc.CallOption) (*types1.Empty, error)
	// misc (TODO: some rpcs can be replaced by hyperstart-exec)
	CreateSandbox(ctx context.Context, in *CreateSandboxRequest, opts ...grpc.CallOption) (*types1.Empty, error)
	DestroySandbox(ctx context.Context, in *DestroySandboxRequest, opts ...grpc.CallOption) (*types1.Empty, error)
	OnlineCPUMem(ctx context.Context, in *OnlineCPUMemRequest, opts ...grpc.CallOption) (*types1.Empty, error)
	ReseedRandomDev(ctx context.Context, in *ReseedRandomDevRequest, opts ...grpc.CallOption) (*types1.Empty, error)
	GetGuestDetails(ctx context.Context, in *GuestDetailsRequest, opts ...grpc.CallOption) (*GuestDetailsResponse, error)
	MemHotplugByProbe(ctx context.Context, in *MemHotplugByProbeRequest, opts ...grpc.CallOption) (*types1.Empty, error)
	SetGuestDateTime(ctx context.Context, in *SetGuestDateTimeRequest, opts ...grpc.CallOption) (*types1.Empty, error)
	CopyFile(ctx context.Context, in *CopyFileRequest, opts ...grpc.CallOption) (*types1.Empty, error)
	ExtendedStats(ctx context.Context, in *ExtendedStatsRequest, opts ...grpc.CallOption) (*ExtendedStatsResponse, error)
}

type agentServiceClient struct {
	cc *grpc.ClientConn
}

func NewAgentServiceClient(cc *grpc.ClientConn) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*types1.Empty, error) {
	out := new(types1.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/CreateContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) StartContainer(ctx context.Context, in *StartContainerRequest, opts ...grpc.CallOption) (*types1.Empty, error) {
	out := new(types1.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/StartContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) RemoveContainer(ctx context.Context, in *RemoveContainerRequest, opts ...grpc.CallOption) (*types1.Empty, error) {
	out := new(types1.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/RemoveContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ExecProcess(ctx context.Context, in *ExecProcessRequest, opts ...grpc.CallOption) (*types1.Empty, error) {
	out := new(types1.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/ExecProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) SignalProcess(ctx context.Context, in *SignalProcessRequest, opts ...grpc.CallOption) (*types1.Empty, error) {
	out := new(types1.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/SignalProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) WaitProcess(ctx context.Context, in *WaitProcessRequest, opts ...grpc.CallOption) (*WaitProcessResponse, error) {
	out := new(WaitProcessResponse)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/WaitProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ListProcesses(ctx context.Context, in *ListProcessesRequest, opts ...grpc.CallOption) (*ListProcessesResponse, error) {
	out := new(ListProcessesResponse)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/ListProcesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) UpdateContainer(ctx context.Context, in *UpdateContainerRequest, opts ...grpc.CallOption) (*types1.Empty, error) {
	out := new(types1.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/UpdateContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) StatsContainer(ctx context.Context, in *StatsContainerRequest, opts ...grpc.CallOption) (*StatsContainerResponse, error) {
	out := new(StatsContainerResponse)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/StatsContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) PauseContainer(ctx context.Context, in *PauseContainerRequest, opts ...grpc.CallOption) (*types1.Empty, error) {
	out := new(types1.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/PauseContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ResumeContainer(ctx context.Context, in *ResumeContainerRequest, opts ...grpc.CallOption) (*types1.Empty, error) {
	out := new(types1.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/ResumeContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) WriteStdin(ctx context.Context, in *WriteStreamRequest, opts ...grpc.CallOption) (*WriteStreamResponse, error) {
	out := new(WriteStreamResponse)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/WriteStdin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ReadStdout(ctx context.Context, in *ReadStreamRequest, opts ...grpc.CallOption) (*ReadStreamResponse, error) {
	out := new(ReadStreamResponse)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/ReadStdout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ReadStderr(ctx context.Context, in *ReadStreamRequest, opts ...grpc.CallOption) (*ReadStreamResponse, error) {
	out := new(ReadStreamResponse)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/ReadStderr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) CloseStdin(ctx context.Context, in *CloseStdinRequest, opts ...grpc.CallOption) (*types1.Empty, error) {
	out := new(types1.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/CloseStdin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) TtyWinResize(ctx context.Context, in *TtyWinResizeRequest, opts ...grpc.CallOption) (*types1.Empty, error) {
	out := new(types1.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/TtyWinResize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) UpdateInterface(ctx context.Context, in *UpdateInterfaceRequest, opts ...grpc.CallOption) (*types.Interface, error) {
	out := new(types.Interface)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/UpdateInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) UpdateRoutes(ctx context.Context, in *UpdateRoutesRequest, opts ...grpc.CallOption) (*Routes, error) {
	out := new(Routes)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/UpdateRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ListInterfaces(ctx context.Context, in *ListInterfacesRequest, opts ...grpc.CallOption) (*Interfaces, error) {
	out := new(Interfaces)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/ListInterfaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*Routes, error) {
	out := new(Routes)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/ListRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) StartTracing(ctx context.Context, in *StartTracingRequest, opts ...grpc.CallOption) (*types1.Empty, error) {
	out := new(types1.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/StartTracing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) StopTracing(ctx context.Context, in *StopTracingRequest, opts ...grpc.CallOption) (*types1.Empty, error) {
	out := new(types1.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/StopTracing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) CreateSandbox(ctx context.Context, in *CreateSandboxRequest, opts ...grpc.CallOption) (*types1.Empty, error) {
	out := new(types1.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/CreateSandbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) DestroySandbox(ctx context.Context, in *DestroySandboxRequest, opts ...grpc.CallOption) (*types1.Empty, error) {
	out := new(types1.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/DestroySandbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) OnlineCPUMem(ctx context.Context, in *OnlineCPUMemRequest, opts ...grpc.CallOption) (*types1.Empty, error) {
	out := new(types1.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/OnlineCPUMem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ReseedRandomDev(ctx context.Context, in *ReseedRandomDevRequest, opts ...grpc.CallOption) (*types1.Empty, error) {
	out := new(types1.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/ReseedRandomDev", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) GetGuestDetails(ctx context.Context, in *GuestDetailsRequest, opts ...grpc.CallOption) (*GuestDetailsResponse, error) {
	out := new(GuestDetailsResponse)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/GetGuestDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) MemHotplugByProbe(ctx context.Context, in *MemHotplugByProbeRequest, opts ...grpc.CallOption) (*types1.Empty, error) {
	out := new(types1.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/MemHotplugByProbe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) SetGuestDateTime(ctx context.Context, in *SetGuestDateTimeRequest, opts ...grpc.CallOption) (*types1.Empty, error) {
	out := new(types1.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/SetGuestDateTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) CopyFile(ctx context.Context, in *CopyFileRequest, opts ...grpc.CallOption) (*types1.Empty, error) {
	out := new(types1.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/CopyFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ExtendedStats(ctx context.Context, in *ExtendedStatsRequest, opts ...grpc.CallOption) (*ExtendedStatsResponse, error) {
	out := new(ExtendedStatsResponse)
	err := c.cc.Invoke(ctx, "/grpc.AgentService/ExtendedStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServiceServer is the server API for AgentService service.
type AgentServiceServer interface {
	// execution
	CreateContainer(context.Context, *CreateContainerRequest) (*types1.Empty, error)
	StartContainer(context.Context, *StartContainerRequest) (*types1.Empty, error)
	// RemoveContainer will tear down an existing container by forcibly terminating
	// all processes running inside that container and releasing all internal
	// resources associated with it.
	// RemoveContainer will wait for all processes termination before returning.
	// If any process can not be killed or if it can not be killed after
	// the RemoveContainerRequest timeout, RemoveContainer will return an error.
	RemoveContainer(context.Context, *RemoveContainerRequest) (*types1.Empty, error)
	ExecProcess(context.Context, *ExecProcessRequest) (*types1.Empty, error)
	SignalProcess(context.Context, *SignalProcessRequest) (*types1.Empty, error)
	WaitProcess(context.Context, *WaitProcessRequest) (*WaitProcessResponse, error)
	ListProcesses(context.Context, *ListProcessesRequest) (*ListProcessesResponse, error)
	UpdateContainer(context.Context, *UpdateContainerRequest) (*types1.Empty, error)
	StatsContainer(context.Context, *StatsContainerRequest) (*StatsContainerResponse, error)
	PauseContainer(context.Context, *PauseContainerRequest) (*types1.Empty, error)
	ResumeContainer(context.Context, *ResumeContainerRequest) (*types1.Empty, error)
	// stdio
	WriteStdin(context.Context, *WriteStreamRequest) (*WriteStreamResponse, error)
	ReadStdout(context.Context, *ReadStreamRequest) (*ReadStreamResponse, error)
	ReadStderr(context.Context, *ReadStreamRequest) (*ReadStreamResponse, error)
	CloseStdin(context.Context, *CloseStdinRequest) (*types1.Empty, error)
	TtyWinResize(context.Context, *TtyWinResizeRequest) (*types1.Empty, error)
	// networking
	UpdateInterface(context.Context, *UpdateInterfaceRequest) (*types.Interface, error)
	UpdateRoutes(context.Context, *UpdateRoutesRequest) (*Routes, error)
	ListInterfaces(context.Context, *ListInterfacesRequest) (*Interfaces, error)
	ListRoutes(context.Context, *ListRoutesRequest) (*Routes, error)
	// tracing
	StartTracing(context.Context, *StartTracingRequest) (*types1.Empty, error)
	StopTracing(context.Context, *StopTracingRequest) (*types1.Empty, error)
	// misc (TODO: some rpcs can be replaced by hyperstart-exec)
	CreateSandbox(context.Context, *CreateSandboxRequest) (*types1.Empty, error)
	DestroySandbox(context.Context, *DestroySandboxRequest) (*types1.Empty, error)
	OnlineCPUMem(context.Context, *OnlineCPUMemRequest) (*types1.Empty, error)
	ReseedRandomDev(context.Context, *ReseedRandomDevRequest) (*types1.Empty, error)
	GetGuestDetails(context.Context, *GuestDetailsRequest) (*GuestDetailsResponse, error)
	MemHotplugByProbe(context.Context, *MemHotplugByProbeRequest) (*types1.Empty, error)
	SetGuestDateTime(context.Context, *SetGuestDateTimeRequest) (*types1.Empty, error)
	CopyFile(context.Context, *CopyFileRequest) (*types1.Empty, error)
	ExtendedStats(context.Context, *ExtendedStatsRequest) (*ExtendedStatsResponse, error)
}

// UnimplementedAgentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAgentServiceServer struct {
}

func (*UnimplementedAgentServiceServer) CreateContainer(ctx context.Context, req *CreateContainerRequest) (*types1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContainer not implemented")
}
func (*UnimplementedAgentServiceServer) StartContainer(ctx context.Context, req *StartContainerRequest) (*types1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartContainer not implemented")
}
func (*UnimplementedAgentServiceServer) RemoveContainer(ctx context.Context, req *RemoveContainerRequest) (*types1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveContainer not implemented")
}
func (*UnimplementedAgentServiceServer) ExecProcess(ctx context.Context, req *ExecProcessRequest) (*types1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecProcess not implemented")
}
func (*UnimplementedAgentServiceServer) SignalProcess(ctx context.Context, req *SignalProcessRequest) (*types1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalProcess not implemented")
}
func (*UnimplementedAgentServiceServer) WaitProcess(ctx context.Context, req *WaitProcessRequest) (*WaitProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitProcess not implemented")
}
func (*UnimplementedAgentServiceServer) ListProcesses(ctx context.Context, req *ListProcessesRequest) (*ListProcessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProcesses not implemented")
}
func (*UnimplementedAgentServiceServer) UpdateContainer(ctx context.Context, req *UpdateContainerRequest) (*types1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContainer not implemented")
}
func (*UnimplementedAgentServiceServer) StatsContainer(ctx context.Context, req *StatsContainerRequest) (*StatsContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsContainer not implemented")
}
func (*UnimplementedAgentServiceServer) PauseContainer(ctx context.Context, req *PauseContainerRequest) (*types1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseContainer not implemented")
}
func (*UnimplementedAgentServiceServer) ResumeContainer(ctx context.Context, req *ResumeContainerRequest) (*types1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeContainer not implemented")
}
func (*UnimplementedAgentServiceServer) WriteStdin(ctx context.Context, req *WriteStreamRequest) (*WriteStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteStdin not implemented")
}
func (*UnimplementedAgentServiceServer) ReadStdout(ctx context.Context, req *ReadStreamRequest) (*ReadStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadStdout not implemented")
}
func (*UnimplementedAgentServiceServer) ReadStderr(ctx context.Context, req *ReadStreamRequest) (*ReadStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadStderr not implemented")
}
func (*UnimplementedAgentServiceServer) CloseStdin(ctx context.Context, req *CloseStdinRequest) (*types1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseStdin not implemented")
}
func (*UnimplementedAgentServiceServer) TtyWinResize(ctx context.Context, req *TtyWinResizeRequest) (*types1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TtyWinResize not implemented")
}
func (*UnimplementedAgentServiceServer) UpdateInterface(ctx context.Context, req *UpdateInterfaceRequest) (*types.Interface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInterface not implemented")
}
func (*UnimplementedAgentServiceServer) UpdateRoutes(ctx context.Context, req *UpdateRoutesRequest) (*Routes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoutes not implemented")
}
func (*UnimplementedAgentServiceServer) ListInterfaces(ctx context.Context, req *ListInterfacesRequest) (*Interfaces, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInterfaces not implemented")
}
func (*UnimplementedAgentServiceServer) ListRoutes(ctx context.Context, req *ListRoutesRequest) (*Routes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoutes not implemented")
}
func (*UnimplementedAgentServiceServer) StartTracing(ctx context.Context, req *StartTracingRequest) (*types1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTracing not implemented")
}
func (*UnimplementedAgentServiceServer) StopTracing(ctx context.Context, req *StopTracingRequest) (*types1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopTracing not implemented")
}
func (*UnimplementedAgentServiceServer) CreateSandbox(ctx context.Context, req *CreateSandboxRequest) (*types1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSandbox not implemented")
}
func (*UnimplementedAgentServiceServer) DestroySandbox(ctx context.Context, req *DestroySandboxRequest) (*types1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroySandbox not implemented")
}
func (*UnimplementedAgentServiceServer) OnlineCPUMem(ctx context.Context, req *OnlineCPUMemRequest) (*types1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnlineCPUMem not implemented")
}
func (*UnimplementedAgentServiceServer) ReseedRandomDev(ctx context.Context, req *ReseedRandomDevRequest) (*types1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReseedRandomDev not implemented")
}
func (*UnimplementedAgentServiceServer) GetGuestDetails(ctx context.Context, req *GuestDetailsRequest) (*GuestDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuestDetails not implemented")
}
func (*UnimplementedAgentServiceServer) MemHotplugByProbe(ctx context.Context, req *MemHotplugByProbeRequest) (*types1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemHotplugByProbe not implemented")
}
func (*UnimplementedAgentServiceServer) SetGuestDateTime(ctx context.Context, req *SetGuestDateTimeRequest) (*types1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGuestDateTime not implemented")
}
func (*UnimplementedAgentServiceServer) CopyFile(ctx context.Context, req *CopyFileRequest) (*types1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyFile not implemented")
}
func (*UnimplementedAgentServiceServer) ExtendedStats(ctx context.Context, req *ExtendedStatsRequest) (*ExtendedStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendedStats not implemented")
}

func RegisterAgentServiceServer(s *grpc.Server, srv AgentServiceServer) {
	s.RegisterService(&_AgentService_serviceDesc, srv)
}

func _AgentService_CreateContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).CreateContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/CreateContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).CreateContainer(ctx, req.(*CreateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_StartContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).StartContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/StartContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).StartContainer(ctx, req.(*StartContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_RemoveContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).RemoveContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/RemoveContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).RemoveContainer(ctx, req.(*RemoveContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ExecProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ExecProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/ExecProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ExecProcess(ctx, req.(*ExecProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_SignalProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).SignalProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/SignalProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).SignalProcess(ctx, req.(*SignalProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_WaitProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).WaitProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/WaitProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).WaitProcess(ctx, req.(*WaitProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ListProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProcessesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ListProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/ListProcesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ListProcesses(ctx, req.(*ListProcessesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_UpdateContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).UpdateContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/UpdateContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).UpdateContainer(ctx, req.(*UpdateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_StatsContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).StatsContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/StatsContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).StatsContainer(ctx, req.(*StatsContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_PauseContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).PauseContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/PauseContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).PauseContainer(ctx, req.(*PauseContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ResumeContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ResumeContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/ResumeContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ResumeContainer(ctx, req.(*ResumeContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_WriteStdin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).WriteStdin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/WriteStdin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).WriteStdin(ctx, req.(*WriteStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ReadStdout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ReadStdout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/ReadStdout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ReadStdout(ctx, req.(*ReadStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ReadStderr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ReadStderr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/ReadStderr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ReadStderr(ctx, req.(*ReadStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_CloseStdin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseStdinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).CloseStdin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/CloseStdin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).CloseStdin(ctx, req.(*CloseStdinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_TtyWinResize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TtyWinResizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).TtyWinResize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/TtyWinResize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).TtyWinResize(ctx, req.(*TtyWinResizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_UpdateInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).UpdateInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/UpdateInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).UpdateInterface(ctx, req.(*UpdateInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_UpdateRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).UpdateRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/UpdateRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).UpdateRoutes(ctx, req.(*UpdateRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ListInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ListInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/ListInterfaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ListInterfaces(ctx, req.(*ListInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ListRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ListRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/ListRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ListRoutes(ctx, req.(*ListRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_StartTracing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTracingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).StartTracing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/StartTracing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).StartTracing(ctx, req.(*StartTracingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_StopTracing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopTracingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).StopTracing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/StopTracing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).StopTracing(ctx, req.(*StopTracingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_CreateSandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).CreateSandbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/CreateSandbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).CreateSandbox(ctx, req.(*CreateSandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_DestroySandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroySandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).DestroySandbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/DestroySandbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).DestroySandbox(ctx, req.(*DestroySandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_OnlineCPUMem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineCPUMemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).OnlineCPUMem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/OnlineCPUMem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).OnlineCPUMem(ctx, req.(*OnlineCPUMemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ReseedRandomDev_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReseedRandomDevRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ReseedRandomDev(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/ReseedRandomDev",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ReseedRandomDev(ctx, req.(*ReseedRandomDevRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_GetGuestDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuestDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetGuestDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/GetGuestDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetGuestDetails(ctx, req.(*GuestDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_MemHotplugByProbe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemHotplugByProbeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).MemHotplugByProbe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/MemHotplugByProbe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).MemHotplugByProbe(ctx, req.(*MemHotplugByProbeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_SetGuestDateTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGuestDateTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).SetGuestDateTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/SetGuestDateTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).SetGuestDateTime(ctx, req.(*SetGuestDateTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_CopyFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).CopyFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/CopyFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).CopyFile(ctx, req.(*CopyFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ExtendedStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendedStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ExtendedStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AgentService/ExtendedStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ExtendedStats(ctx, req.(*ExtendedStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AgentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContainer",
			Handler:    _AgentService_CreateContainer_Handler,
		},
		{
			MethodName: "StartContainer",
			Handler:    _AgentService_StartContainer_Handler,
		},
		{
			MethodName: "RemoveContainer",
			Handler:    _AgentService_RemoveContainer_Handler,
		},
		{
			MethodName: "ExecProcess",
			Handler:    _AgentService_ExecProcess_Handler,
		},
		{
			MethodName: "SignalProcess",
			Handler:    _AgentService_SignalProcess_Handler,
		},
		{
			MethodName: "WaitProcess",
			Handler:    _AgentService_WaitProcess_Handler,
		},
		{
			MethodName: "ListProcesses",
			Handler:    _AgentService_ListProcesses_Handler,
		},
		{
			MethodName: "UpdateContainer",
			Handler:    _AgentService_UpdateContainer_Handler,
		},
		{
			MethodName: "StatsContainer",
			Handler:    _AgentService_StatsContainer_Handler,
		},
		{
			MethodName: "PauseContainer",
			Handler:    _AgentService_PauseContainer_Handler,
		},
		{
			MethodName: "ResumeContainer",
			Handler:    _AgentService_ResumeContainer_Handler,
		},
		{
			MethodName: "WriteStdin",
			Handler:    _AgentService_WriteStdin_Handler,
		},
		{
			MethodName: "ReadStdout",
			Handler:    _AgentService_ReadStdout_Handler,
		},
		{
			MethodName: "ReadStderr",
			Handler:    _AgentService_ReadStderr_Handler,
		},
		{
			MethodName: "CloseStdin",
			Handler:    _AgentService_CloseStdin_Handler,
		},
		{
			MethodName: "TtyWinResize",
			Handler:    _AgentService_TtyWinResize_Handler,
		},
		{
			MethodName: "UpdateInterface",
			Handler:    _AgentService_UpdateInterface_Handler,
		},
		{
			MethodName: "UpdateRoutes",
			Handler:    _AgentService_UpdateRoutes_Handler,
		},
		{
			MethodName: "ListInterfaces",
			Handler:    _AgentService_ListInterfaces_Handler,
		},
		{
			MethodName: "ListRoutes",
			Handler:    _AgentService_ListRoutes_Handler,
		},
		{
			MethodName: "StartTracing",
			Handler:    _AgentService_StartTracing_Handler,
		},
		{
			MethodName: "StopTracing",
			Handler:    _AgentService_StopTracing_Handler,
		},
		{
			MethodName: "CreateSandbox",
			Handler:    _AgentService_CreateSandbox_Handler,
		},
		{
			MethodName: "DestroySandbox",
			Handler:    _AgentService_DestroySandbox_Handler,
		},
		{
			MethodName: "OnlineCPUMem",
			Handler:    _AgentService_OnlineCPUMem_Handler,
		},
		{
			MethodName: "ReseedRandomDev",
			Handler:    _AgentService_ReseedRandomDev_Handler,
		},
		{
			MethodName: "GetGuestDetails",
			Handler:    _AgentService_GetGuestDetails_Handler,
		},
		{
			MethodName: "MemHotplugByProbe",
			Handler:    _AgentService_MemHotplugByProbe_Handler,
		},
		{
			MethodName: "SetGuestDateTime",
			Handler:    _AgentService_SetGuestDateTime_Handler,
		},
		{
			MethodName: "CopyFile",
			Handler:    _AgentService_CopyFile_Handler,
		},
		{
			MethodName: "ExtendedStats",
			Handler:    _AgentService_ExtendedStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent.proto",
}

func (m *CreateContainerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateContainerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateContainerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SandboxPidns {
		i--
		if m.SandboxPidns {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.OCI != nil {
		{
			size, err := m.OCI.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Storages) > 0 {
		for iNdEx := len(m.Storages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Storages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Devices) > 0 {
		for iNdEx := len(m.Devices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Devices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.StringUser != nil {
		{
			size, err := m.StringUser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ExecId) > 0 {
		i -= len(m.ExecId)
		copy(dAtA[i:], m.ExecId)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ExecId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContainerId) > 0 {
		i -= len(m.ContainerId)
		copy(dAtA[i:], m.ContainerId)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ContainerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartContainerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartContainerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartContainerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContainerId) > 0 {
		i -= len(m.ContainerId)
		copy(dAtA[i:], m.ContainerId)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ContainerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveContainerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveContainerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveContainerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Timeout != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ContainerId) > 0 {
		i -= len(m.ContainerId)
		copy(dAtA[i:], m.ContainerId)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ContainerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecProcessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecProcessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecProcessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Process != nil {
		{
			size, err := m.Process.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.StringUser != nil {
		{
			size, err := m.StringUser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ExecId) > 0 {
		i -= len(m.ExecId)
		copy(dAtA[i:], m.ExecId)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ExecId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContainerId) > 0 {
		i -= len(m.ContainerId)
		copy(dAtA[i:], m.ContainerId)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ContainerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignalProcessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignalProcessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignalProcessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signal != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Signal))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ExecId) > 0 {
		i -= len(m.ExecId)
		copy(dAtA[i:], m.ExecId)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ExecId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContainerId) > 0 {
		i -= len(m.ContainerId)
		copy(dAtA[i:], m.ContainerId)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ContainerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WaitProcessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaitProcessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WaitProcessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExecId) > 0 {
		i -= len(m.ExecId)
		copy(dAtA[i:], m.ExecId)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ExecId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContainerId) > 0 {
		i -= len(m.ContainerId)
		copy(dAtA[i:], m.ContainerId)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ContainerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WaitProcessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaitProcessResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WaitProcessResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListProcessesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListProcessesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListProcessesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintAgent(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Format) > 0 {
		i -= len(m.Format)
		copy(dAtA[i:], m.Format)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.Format)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContainerId) > 0 {
		i -= len(m.ContainerId)
		copy(dAtA[i:], m.ContainerId)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ContainerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListProcessesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListProcessesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListProcessesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProcessList) > 0 {
		i -= len(m.ProcessList)
		copy(dAtA[i:], m.ProcessList)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ProcessList)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateContainerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateContainerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateContainerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContainerId) > 0 {
		i -= len(m.ContainerId)
		copy(dAtA[i:], m.ContainerId)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ContainerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatsContainerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsContainerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatsContainerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContainerId) > 0 {
		i -= len(m.ContainerId)
		copy(dAtA[i:], m.ContainerId)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ContainerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PauseContainerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PauseContainerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PauseContainerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContainerId) > 0 {
		i -= len(m.ContainerId)
		copy(dAtA[i:], m.ContainerId)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ContainerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResumeContainerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResumeContainerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResumeContainerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContainerId) > 0 {
		i -= len(m.ContainerId)
		copy(dAtA[i:], m.ContainerId)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ContainerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CpuUsage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpuUsage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CpuUsage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UsageInUsermode != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.UsageInUsermode))
		i--
		dAtA[i] = 0x20
	}
	if m.UsageInKernelmode != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.UsageInKernelmode))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PercpuUsage) > 0 {
		dAtA7 := make([]byte, len(m.PercpuUsage)*10)
		var j6 int
		for _, num := range m.PercpuUsage {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintAgent(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x12
	}
	if m.TotalUsage != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.TotalUsage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ThrottlingData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThrottlingData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThrottlingData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ThrottledTime != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.ThrottledTime))
		i--
		dAtA[i] = 0x18
	}
	if m.ThrottledPeriods != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.ThrottledPeriods))
		i--
		dAtA[i] = 0x10
	}
	if m.Periods != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Periods))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CpuStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpuStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CpuStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ThrottlingData != nil {
		{
			size, err := m.ThrottlingData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CpuUsage != nil {
		{
			size, err := m.CpuUsage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PidsStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PidsStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PidsStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Current != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Current))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MemoryData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemoryData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemoryData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Failcnt != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Failcnt))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxUsage != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.MaxUsage))
		i--
		dAtA[i] = 0x10
	}
	if m.Usage != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Usage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MemoryStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemoryStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemoryStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Stats) > 0 {
		for k := range m.Stats {
			v := m.Stats[k]
			baseI := i
			i = encodeVarintAgent(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAgent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAgent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.UseHierarchy {
		i--
		if m.UseHierarchy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.KernelUsage != nil {
		{
			size, err := m.KernelUsage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SwapUsage != nil {
		{
			size, err := m.SwapUsage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Usage != nil {
		{
			size, err := m.Usage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Cache != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Cache))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlkioStatsEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlkioStatsEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlkioStatsEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Op) > 0 {
		i -= len(m.Op)
		copy(dAtA[i:], m.Op)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.Op)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Minor != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Minor))
		i--
		dAtA[i] = 0x10
	}
	if m.Major != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Major))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlkioStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlkioStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlkioStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SectorsRecursive) > 0 {
		for iNdEx := len(m.SectorsRecursive) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SectorsRecursive[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.IoTimeRecursive) > 0 {
		for iNdEx := len(m.IoTimeRecursive) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IoTimeRecursive[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.IoMergedRecursive) > 0 {
		for iNdEx := len(m.IoMergedRecursive) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IoMergedRecursive[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.IoWaitTimeRecursive) > 0 {
		for iNdEx := len(m.IoWaitTimeRecursive) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IoWaitTimeRecursive[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.IoServiceTimeRecursive) > 0 {
		for iNdEx := len(m.IoServiceTimeRecursive) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IoServiceTimeRecursive[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.IoQueuedRecursive) > 0 {
		for iNdEx := len(m.IoQueuedRecursive) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IoQueuedRecursive[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.IoServicedRecursive) > 0 {
		for iNdEx := len(m.IoServicedRecursive) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IoServicedRecursive[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.IoServiceBytesRecursive) > 0 {
		for iNdEx := len(m.IoServiceBytesRecursive) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IoServiceBytesRecursive[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HugetlbStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HugetlbStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HugetlbStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Failcnt != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Failcnt))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxUsage != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.MaxUsage))
		i--
		dAtA[i] = 0x10
	}
	if m.Usage != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Usage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CgroupStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CgroupStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CgroupStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HugetlbStats) > 0 {
		for k := range m.HugetlbStats {
			v := m.HugetlbStats[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintAgent(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAgent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAgent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.BlkioStats != nil {
		{
			size, err := m.BlkioStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.PidsStats != nil {
		{
			size, err := m.PidsStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MemoryStats != nil {
		{
			size, err := m.MemoryStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CpuStats != nil {
		{
			size, err := m.CpuStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetworkStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TxDropped != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.TxDropped))
		i--
		dAtA[i] = 0x48
	}
	if m.TxErrors != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.TxErrors))
		i--
		dAtA[i] = 0x40
	}
	if m.TxPackets != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.TxPackets))
		i--
		dAtA[i] = 0x38
	}
	if m.TxBytes != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.TxBytes))
		i--
		dAtA[i] = 0x30
	}
	if m.RxDropped != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.RxDropped))
		i--
		dAtA[i] = 0x28
	}
	if m.RxErrors != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.RxErrors))
		i--
		dAtA[i] = 0x20
	}
	if m.RxPackets != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.RxPackets))
		i--
		dAtA[i] = 0x18
	}
	if m.RxBytes != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.RxBytes))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatsContainerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsContainerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatsContainerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NetworkStats) > 0 {
		for iNdEx := len(m.NetworkStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NetworkStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.CgroupStats != nil {
		{
			size, err := m.CgroupStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WriteStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WriteStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WriteStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ExecId) > 0 {
		i -= len(m.ExecId)
		copy(dAtA[i:], m.ExecId)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ExecId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContainerId) > 0 {
		i -= len(m.ContainerId)
		copy(dAtA[i:], m.ContainerId)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ContainerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WriteStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WriteStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WriteStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Len != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Len))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReadStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Len != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Len))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ExecId) > 0 {
		i -= len(m.ExecId)
		copy(dAtA[i:], m.ExecId)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ExecId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContainerId) > 0 {
		i -= len(m.ContainerId)
		copy(dAtA[i:], m.ContainerId)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ContainerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReadStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CloseStdinRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseStdinRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloseStdinRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExecId) > 0 {
		i -= len(m.ExecId)
		copy(dAtA[i:], m.ExecId)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ExecId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContainerId) > 0 {
		i -= len(m.ContainerId)
		copy(dAtA[i:], m.ContainerId)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ContainerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TtyWinResizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TtyWinResizeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TtyWinResizeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Column != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Column))
		i--
		dAtA[i] = 0x20
	}
	if m.Row != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Row))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ExecId) > 0 {
		i -= len(m.ExecId)
		copy(dAtA[i:], m.ExecId)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ExecId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContainerId) > 0 {
		i -= len(m.ContainerId)
		copy(dAtA[i:], m.ContainerId)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ContainerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KernelModule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KernelModule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KernelModule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Parameters) > 0 {
		for iNdEx := len(m.Parameters) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Parameters[iNdEx])
			copy(dAtA[i:], m.Parameters[iNdEx])
			i = encodeVarintAgent(dAtA, i, uint64(len(m.Parameters[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSandboxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSandboxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSandboxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KernelModules) > 0 {
		for iNdEx := len(m.KernelModules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KernelModules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.GuestHookPath) > 0 {
		i -= len(m.GuestHookPath)
		copy(dAtA[i:], m.GuestHookPath)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.GuestHookPath)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SandboxId) > 0 {
		i -= len(m.SandboxId)
		copy(dAtA[i:], m.SandboxId)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.SandboxId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SandboxPidns {
		i--
		if m.SandboxPidns {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Storages) > 0 {
		for iNdEx := len(m.Storages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Storages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Dns) > 0 {
		for iNdEx := len(m.Dns) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Dns[iNdEx])
			copy(dAtA[i:], m.Dns[iNdEx])
			i = encodeVarintAgent(dAtA, i, uint64(len(m.Dns[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DestroySandboxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DestroySandboxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DestroySandboxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Interfaces) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Interfaces) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interfaces) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Interfaces) > 0 {
		for iNdEx := len(m.Interfaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Interfaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Routes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Routes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Routes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateInterfaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateInterfaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateInterfaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Interface != nil {
		{
			size, err := m.Interface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRoutesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRoutesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRoutesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Routes != nil {
		{
			size, err := m.Routes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListInterfacesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListInterfacesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListInterfacesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ListRoutesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRoutesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRoutesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *OnlineCPUMemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnlineCPUMemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OnlineCPUMemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CpuOnly {
		i--
		if m.CpuOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.NbCpus != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.NbCpus))
		i--
		dAtA[i] = 0x10
	}
	if m.Wait {
		i--
		if m.Wait {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReseedRandomDevRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReseedRandomDevRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReseedRandomDevRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *AgentDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SupportsSeccomp {
		i--
		if m.SupportsSeccomp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.StorageHandlers) > 0 {
		for iNdEx := len(m.StorageHandlers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StorageHandlers[iNdEx])
			copy(dAtA[i:], m.StorageHandlers[iNdEx])
			i = encodeVarintAgent(dAtA, i, uint64(len(m.StorageHandlers[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DeviceHandlers) > 0 {
		for iNdEx := len(m.DeviceHandlers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeviceHandlers[iNdEx])
			copy(dAtA[i:], m.DeviceHandlers[iNdEx])
			i = encodeVarintAgent(dAtA, i, uint64(len(m.DeviceHandlers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.InitDaemon {
		i--
		if m.InitDaemon {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuestDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuestDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuestDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MemHotplugProbe {
		i--
		if m.MemHotplugProbe {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.MemBlockSize {
		i--
		if m.MemBlockSize {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuestDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuestDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuestDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SupportMemHotplugProbe {
		i--
		if m.SupportMemHotplugProbe {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.AgentDetails != nil {
		{
			size, err := m.AgentDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MemBlockSizeBytes != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.MemBlockSizeBytes))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MemHotplugByProbeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemHotplugByProbeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemHotplugByProbeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MemHotplugProbeAddr) > 0 {
		dAtA23 := make([]byte, len(m.MemHotplugProbeAddr)*10)
		var j22 int
		for _, num := range m.MemHotplugProbeAddr {
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		i -= j22
		copy(dAtA[i:], dAtA23[:j22])
		i = encodeVarintAgent(dAtA, i, uint64(j22))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetGuestDateTimeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetGuestDateTimeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetGuestDateTimeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Usec != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Usec))
		i--
		dAtA[i] = 0x10
	}
	if m.Sec != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Sec))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Storage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Storage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Storage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MountPoint) > 0 {
		i -= len(m.MountPoint)
		copy(dAtA[i:], m.MountPoint)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.MountPoint)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Options) > 0 {
		for iNdEx := len(m.Options) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Options[iNdEx])
			copy(dAtA[i:], m.Options[iNdEx])
			i = encodeVarintAgent(dAtA, i, uint64(len(m.Options[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Fstype) > 0 {
		i -= len(m.Fstype)
		copy(dAtA[i:], m.Fstype)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.Fstype)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DriverOptions) > 0 {
		for iNdEx := len(m.DriverOptions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DriverOptions[iNdEx])
			copy(dAtA[i:], m.DriverOptions[iNdEx])
			i = encodeVarintAgent(dAtA, i, uint64(len(m.DriverOptions[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Driver) > 0 {
		i -= len(m.Driver)
		copy(dAtA[i:], m.Driver)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.Driver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Device) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Device) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Device) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Options) > 0 {
		for iNdEx := len(m.Options) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Options[iNdEx])
			copy(dAtA[i:], m.Options[iNdEx])
			i = encodeVarintAgent(dAtA, i, uint64(len(m.Options[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ContainerPath) > 0 {
		i -= len(m.ContainerPath)
		copy(dAtA[i:], m.ContainerPath)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ContainerPath)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VmPath) > 0 {
		i -= len(m.VmPath)
		copy(dAtA[i:], m.VmPath)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.VmPath)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StringUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AdditionalGids) > 0 {
		for iNdEx := len(m.AdditionalGids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AdditionalGids[iNdEx])
			copy(dAtA[i:], m.AdditionalGids[iNdEx])
			i = encodeVarintAgent(dAtA, i, uint64(len(m.AdditionalGids[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Gid) > 0 {
		i -= len(m.Gid)
		copy(dAtA[i:], m.Gid)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.Gid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CopyFileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CopyFileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CopyFileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x42
	}
	if m.Offset != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x38
	}
	if m.Gid != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Gid))
		i--
		dAtA[i] = 0x30
	}
	if m.Uid != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x28
	}
	if m.DirMode != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.DirMode))
		i--
		dAtA[i] = 0x20
	}
	if m.FileMode != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.FileMode))
		i--
		dAtA[i] = 0x18
	}
	if m.FileSize != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.FileSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartTracingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartTracingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartTracingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *StopTracingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopTracingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StopTracingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ExtendedStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtendedStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtendedStatsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ExtendedStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtendedStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtendedStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConStats) > 0 {
		for iNdEx := len(m.ConStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ConStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.PodStats != nil {
		{
			size, err := m.PodStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GpuInfo != nil {
		{
			size, err := m.GpuInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.VmstatStats != nil {
		{
			size, err := m.VmstatStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.UdpStats != nil {
		{
			size, err := m.UdpStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.TrafficStats != nil {
		{
			size, err := m.TrafficStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.TcpxStats != nil {
		{
			size, err := m.TcpxStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.TcpStats != nil {
		{
			size, err := m.TcpStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.SwapStats != nil {
		{
			size, err := m.SwapStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.SoftirqStats != nil {
		{
			size, err := m.SoftirqStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.PercpuSchedStats) > 0 {
		for iNdEx := len(m.PercpuSchedStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PercpuSchedStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.PercpuStats) > 0 {
		for iNdEx := len(m.PercpuStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PercpuStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.PcswStats != nil {
		{
			size, err := m.PcswStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PartStats) > 0 {
		for iNdEx := len(m.PartStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PartStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.MemxStats != nil {
		{
			size, err := m.MemxStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.MemStats != nil {
		{
			size, err := m.MemStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.LoadStats != nil {
		{
			size, err := m.LoadStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.IrqStats) > 0 {
		for iNdEx := len(m.IrqStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IrqStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.IoStats) > 0 {
		for iNdEx := len(m.IoStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IoStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CpuStats) > 0 {
		for iNdEx := len(m.CpuStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CpuStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Buddy != nil {
		{
			size, err := m.Buddy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodBuddyStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodBuddyStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodBuddyStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Order10 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Order10))
		i--
		dAtA[i] = 0x58
	}
	if m.Order9 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Order9))
		i--
		dAtA[i] = 0x50
	}
	if m.Order8 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Order8))
		i--
		dAtA[i] = 0x48
	}
	if m.Order7 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Order7))
		i--
		dAtA[i] = 0x40
	}
	if m.Order6 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Order6))
		i--
		dAtA[i] = 0x38
	}
	if m.Order5 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Order5))
		i--
		dAtA[i] = 0x30
	}
	if m.Order4 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Order4))
		i--
		dAtA[i] = 0x28
	}
	if m.Order3 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Order3))
		i--
		dAtA[i] = 0x20
	}
	if m.Order2 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Order2))
		i--
		dAtA[i] = 0x18
	}
	if m.Order1 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Order1))
		i--
		dAtA[i] = 0x10
	}
	if m.Order0 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Order0))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PodCpuStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodCpuStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodCpuStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CpuNumber != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CpuNumber))
		i--
		dAtA[i] = 0x50
	}
	if m.CpuGuest != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CpuGuest))
		i--
		dAtA[i] = 0x48
	}
	if m.CpuSoftirq != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CpuSoftirq))
		i--
		dAtA[i] = 0x40
	}
	if m.CpuHardirq != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CpuHardirq))
		i--
		dAtA[i] = 0x38
	}
	if m.CpuSteal != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CpuSteal))
		i--
		dAtA[i] = 0x30
	}
	if m.CpuIowait != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CpuIowait))
		i--
		dAtA[i] = 0x28
	}
	if m.CpuIdle != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CpuIdle))
		i--
		dAtA[i] = 0x20
	}
	if m.CpuSys != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CpuSys))
		i--
		dAtA[i] = 0x18
	}
	if m.CpuNice != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CpuNice))
		i--
		dAtA[i] = 0x10
	}
	if m.CpuUser != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CpuUser))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PodIOStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodIOStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodIOStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Blkio != nil {
		{
			size, err := m.Blkio.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Part != nil {
		{
			size, err := m.Part.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PartInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Minor != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Minor))
		i--
		dAtA[i] = 0x10
	}
	if m.Major != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Major))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlkIOInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlkIOInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlkIOInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aveq != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Aveq))
		i--
		dAtA[i] = 0x48
	}
	if m.Ticks != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Ticks))
		i--
		dAtA[i] = 0x40
	}
	if m.WrTicks != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.WrTicks))
		i--
		dAtA[i] = 0x38
	}
	if m.WrSectors != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.WrSectors))
		i--
		dAtA[i] = 0x30
	}
	if m.WrMerges != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.WrMerges))
		i--
		dAtA[i] = 0x28
	}
	if m.WrIos != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.WrIos))
		i--
		dAtA[i] = 0x20
	}
	if m.RdSectors != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.RdSectors))
		i--
		dAtA[i] = 0x18
	}
	if m.RdMerges != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.RdMerges))
		i--
		dAtA[i] = 0x10
	}
	if m.RdIos != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.RdIos))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PodIrqStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodIrqStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodIrqStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IrqCount) > 0 {
		dAtA41 := make([]byte, len(m.IrqCount)*10)
		var j40 int
		for _, num := range m.IrqCount {
			for num >= 1<<7 {
				dAtA41[j40] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j40++
			}
			dAtA41[j40] = uint8(num)
			j40++
		}
		i -= j40
		copy(dAtA[i:], dAtA41[:j40])
		i = encodeVarintAgent(dAtA, i, uint64(j40))
		i--
		dAtA[i] = 0x12
	}
	if m.IrqNum != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.IrqNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PodLoadStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodLoadStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodLoadStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NrThreads != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.NrThreads))
		i--
		dAtA[i] = 0x40
	}
	if m.RunningLoadAvg_15 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.RunningLoadAvg_15))
		i--
		dAtA[i] = 0x38
	}
	if m.RunningLoadAvg_5 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.RunningLoadAvg_5))
		i--
		dAtA[i] = 0x30
	}
	if m.RunningLoadAvg_1 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.RunningLoadAvg_1))
		i--
		dAtA[i] = 0x28
	}
	if m.LoadAvg_15 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.LoadAvg_15))
		i--
		dAtA[i] = 0x20
	}
	if m.LoadAvg_5 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.LoadAvg_5))
		i--
		dAtA[i] = 0x18
	}
	if m.LoadAvg_1 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.LoadAvg_1))
		i--
		dAtA[i] = 0x10
	}
	if m.NrRunning != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.NrRunning))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PodMemStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodMemStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodMemStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rsskb != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Rsskb))
		i--
		dAtA[i] = 0x38
	}
	if m.Comkb != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Comkb))
		i--
		dAtA[i] = 0x30
	}
	if m.Tlmkb != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Tlmkb))
		i--
		dAtA[i] = 0x28
	}
	if m.Camkb != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Camkb))
		i--
		dAtA[i] = 0x20
	}
	if m.Bufkb != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Bufkb))
		i--
		dAtA[i] = 0x18
	}
	if m.Avmkb != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Avmkb))
		i--
		dAtA[i] = 0x10
	}
	if m.Frmkb != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Frmkb))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PodMemxStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodMemxStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodMemxStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Shmem != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Shmem))
		i--
		dAtA[i] = 0x50
	}
	if m.Mpfile != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Mpfile))
		i--
		dAtA[i] = 0x48
	}
	if m.Uslab != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Uslab))
		i--
		dAtA[i] = 0x40
	}
	if m.Rslab != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Rslab))
		i--
		dAtA[i] = 0x38
	}
	if m.Writeback != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Writeback))
		i--
		dAtA[i] = 0x30
	}
	if m.Dirty != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Dirty))
		i--
		dAtA[i] = 0x28
	}
	if m.Ianon != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Ianon))
		i--
		dAtA[i] = 0x20
	}
	if m.Aanon != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Aanon))
		i--
		dAtA[i] = 0x18
	}
	if m.Ifile != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Ifile))
		i--
		dAtA[i] = 0x10
	}
	if m.Afile != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Afile))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PodPartitionStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodPartitionStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodPartitionStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ifree != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Ifree))
		i--
		dAtA[i] = 0x30
	}
	if m.Itotal != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Itotal))
		i--
		dAtA[i] = 0x28
	}
	if m.Bavail != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Bavail))
		i--
		dAtA[i] = 0x20
	}
	if m.Bfree != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Bfree))
		i--
		dAtA[i] = 0x18
	}
	if m.Blocks != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Blocks))
		i--
		dAtA[i] = 0x10
	}
	if m.Bsize != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Bsize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PodPcswStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodPcswStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodPcswStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Maxpid != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Maxpid))
		i--
		dAtA[i] = 0x30
	}
	if m.Dtsk != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Dtsk))
		i--
		dAtA[i] = 0x28
	}
	if m.Rtsk != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Rtsk))
		i--
		dAtA[i] = 0x20
	}
	if m.Curtask != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Curtask))
		i--
		dAtA[i] = 0x18
	}
	if m.Newtask != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Newtask))
		i--
		dAtA[i] = 0x10
	}
	if m.ContextSwitch != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.ContextSwitch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PodPercpuStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodPercpuStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodPercpuStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x6a
	}
	if m.CpuPcount != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CpuPcount))
		i--
		dAtA[i] = 0x60
	}
	if m.CpuRundelay != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CpuRundelay))
		i--
		dAtA[i] = 0x58
	}
	if m.CpuTime != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CpuTime))
		i--
		dAtA[i] = 0x50
	}
	if m.CpuGuest != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CpuGuest))
		i--
		dAtA[i] = 0x48
	}
	if m.CpuSoftirq != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CpuSoftirq))
		i--
		dAtA[i] = 0x40
	}
	if m.CpuHardirq != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CpuHardirq))
		i--
		dAtA[i] = 0x38
	}
	if m.CpuSteal != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CpuSteal))
		i--
		dAtA[i] = 0x30
	}
	if m.CpuIowait != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CpuIowait))
		i--
		dAtA[i] = 0x28
	}
	if m.CpuIdle != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CpuIdle))
		i--
		dAtA[i] = 0x20
	}
	if m.CpuSys != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CpuSys))
		i--
		dAtA[i] = 0x18
	}
	if m.CpuNice != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CpuNice))
		i--
		dAtA[i] = 0x10
	}
	if m.CpuUser != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CpuUser))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PodPercpuSchedStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodPercpuSchedStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodPercpuSchedStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x72
	}
	if m.AvgRundelay != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.AvgRundelay))
		i--
		dAtA[i] = 0x68
	}
	if m.AvgCputime != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.AvgCputime))
		i--
		dAtA[i] = 0x60
	}
	if m.SliceCnt != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.SliceCnt))
		i--
		dAtA[i] = 0x58
	}
	if m.Rundelay != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Rundelay))
		i--
		dAtA[i] = 0x50
	}
	if m.Cputime != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Cputime))
		i--
		dAtA[i] = 0x48
	}
	if m.TtwuLocalPercent != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.TtwuLocalPercent))
		i--
		dAtA[i] = 0x40
	}
	if m.TtwuLocal != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.TtwuLocal))
		i--
		dAtA[i] = 0x38
	}
	if m.Ttwu != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Ttwu))
		i--
		dAtA[i] = 0x30
	}
	if m.SchedIdlePercent != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.SchedIdlePercent))
		i--
		dAtA[i] = 0x28
	}
	if m.SchedIdle != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.SchedIdle))
		i--
		dAtA[i] = 0x20
	}
	if m.Sched != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Sched))
		i--
		dAtA[i] = 0x18
	}
	if m.SchedExpr != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.SchedExpr))
		i--
		dAtA[i] = 0x10
	}
	if m.SchedYield != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.SchedYield))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PodSoftirqStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodSoftirqStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodSoftirqStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rcu != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Rcu))
		i--
		dAtA[i] = 0x38
	}
	if m.Hrtim != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Hrtim))
		i--
		dAtA[i] = 0x30
	}
	if m.Sched != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Sched))
		i--
		dAtA[i] = 0x28
	}
	if m.Block != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x20
	}
	if m.Netrx != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Netrx))
		i--
		dAtA[i] = 0x18
	}
	if m.Nettx != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Nettx))
		i--
		dAtA[i] = 0x10
	}
	if m.Timer != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Timer))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PodSwapStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodSwapStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodSwapStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Swapfree != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Swapfree))
		i--
		dAtA[i] = 0x20
	}
	if m.Swaptotal != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Swaptotal))
		i--
		dAtA[i] = 0x18
	}
	if m.Pswpout != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Pswpout))
		i--
		dAtA[i] = 0x10
	}
	if m.Pswpin != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Pswpin))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PodTcpStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodTcpStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodTcpStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OutRsts != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.OutRsts))
		i--
		dAtA[i] = 0x50
	}
	if m.InErrs != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.InErrs))
		i--
		dAtA[i] = 0x48
	}
	if m.RetransSegs != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.RetransSegs))
		i--
		dAtA[i] = 0x40
	}
	if m.CurrEstab != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CurrEstab))
		i--
		dAtA[i] = 0x38
	}
	if m.EstabResets != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.EstabResets))
		i--
		dAtA[i] = 0x30
	}
	if m.AttemptFails != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.AttemptFails))
		i--
		dAtA[i] = 0x28
	}
	if m.OutSegs != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.OutSegs))
		i--
		dAtA[i] = 0x20
	}
	if m.InSegs != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.InSegs))
		i--
		dAtA[i] = 0x18
	}
	if m.PassiveOpens != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.PassiveOpens))
		i--
		dAtA[i] = 0x10
	}
	if m.ActiveOpens != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.ActiveOpens))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PodTcpxStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodTcpxStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodTcpxStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Tcpkadrop != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Tcpkadrop))
		i--
		dAtA[i] = 0x78
	}
	if m.Tcppersistdrop != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Tcppersistdrop))
		i--
		dAtA[i] = 0x70
	}
	if m.Tcprexmitdrop != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Tcprexmitdrop))
		i--
		dAtA[i] = 0x68
	}
	if m.Tcpmbdrop != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Tcpmbdrop))
		i--
		dAtA[i] = 0x60
	}
	if m.Tcpconndrop != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Tcpconndrop))
		i--
		dAtA[i] = 0x58
	}
	if m.Tcpconnest != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Tcpconnest))
		i--
		dAtA[i] = 0x50
	}
	if m.Tcplistenover != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Tcplistenover))
		i--
		dAtA[i] = 0x48
	}
	if m.Tcplistenincq != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Tcplistenincq))
		i--
		dAtA[i] = 0x40
	}
	if m.Tcplistenq != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Tcplistenq))
		i--
		dAtA[i] = 0x38
	}
	if m.Tcpfinwait2 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Tcpfinwait2))
		i--
		dAtA[i] = 0x30
	}
	if m.Tcpfinwait1 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Tcpfinwait1))
		i--
		dAtA[i] = 0x28
	}
	if m.Tcptimewait != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Tcptimewait))
		i--
		dAtA[i] = 0x20
	}
	if m.Tcpest != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Tcpest))
		i--
		dAtA[i] = 0x18
	}
	if m.Tcpsendq != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Tcpsendq))
		i--
		dAtA[i] = 0x10
	}
	if m.Tcprevq != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Tcprevq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PodTrafficStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodTrafficStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodTrafficStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pktdrpout != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Pktdrpout))
		i--
		dAtA[i] = 0x40
	}
	if m.Pkterrout != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Pkterrout))
		i--
		dAtA[i] = 0x38
	}
	if m.Pktdrpin != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Pktdrpin))
		i--
		dAtA[i] = 0x30
	}
	if m.Pkterrin != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Pkterrin))
		i--
		dAtA[i] = 0x28
	}
	if m.Pktout != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Pktout))
		i--
		dAtA[i] = 0x20
	}
	if m.Pktin != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Pktin))
		i--
		dAtA[i] = 0x18
	}
	if m.Byteout != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Byteout))
		i--
		dAtA[i] = 0x10
	}
	if m.Bytein != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Bytein))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PodUdpStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodUdpStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodUdpStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InErrors != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.InErrors))
		i--
		dAtA[i] = 0x20
	}
	if m.NoPorts != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.NoPorts))
		i--
		dAtA[i] = 0x18
	}
	if m.OutDatagrams != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.OutDatagrams))
		i--
		dAtA[i] = 0x10
	}
	if m.InDatagrams != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.InDatagrams))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PodVmstatStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodVmstatStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodVmstatStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Vmeff != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Vmeff))
		i--
		dAtA[i] = 0x60
	}
	if m.Dsteal != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Dsteal))
		i--
		dAtA[i] = 0x58
	}
	if m.Steal != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Steal))
		i--
		dAtA[i] = 0x50
	}
	if m.Scan != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Scan))
		i--
		dAtA[i] = 0x48
	}
	if m.Failcnt != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Failcnt))
		i--
		dAtA[i] = 0x40
	}
	if m.Cmpsucc != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Cmpsucc))
		i--
		dAtA[i] = 0x38
	}
	if m.Cmpfail != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Cmpfail))
		i--
		dAtA[i] = 0x30
	}
	if m.Allocno != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Allocno))
		i--
		dAtA[i] = 0x28
	}
	if m.Dirtied != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Dirtied))
		i--
		dAtA[i] = 0x20
	}
	if m.Pgfault != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Pgfault))
		i--
		dAtA[i] = 0x18
	}
	if m.Pgout != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Pgout))
		i--
		dAtA[i] = 0x10
	}
	if m.Pgin != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Pgin))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PodGpuInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodGpuInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodGpuInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Uuid) > 0 {
		dAtA45 := make([]byte, len(m.Uuid)*10)
		var j44 int
		for _, num := range m.Uuid {
			for num >= 1<<7 {
				dAtA45[j44] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j44++
			}
			dAtA45[j44] = uint8(num)
			j44++
		}
		i -= j44
		copy(dAtA[i:], dAtA45[:j44])
		i = encodeVarintAgent(dAtA, i, uint64(j44))
		i--
		dAtA[i] = 0x1a
	}
	if m.StMem != nil {
		{
			size, err := m.StMem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Stat != nil {
		{
			size, err := m.Stat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NrData != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.NrData))
		i--
		dAtA[i] = 0x18
	}
	if m.MemUtil != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.MemUtil))
		i--
		dAtA[i] = 0x10
	}
	if m.Util != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Util))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GMem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GMem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GMem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if m.Free != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Free))
		i--
		dAtA[i] = 0x10
	}
	if m.Used != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Used))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GConfigInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GConfigInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GConfigInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MemMaxBlocks != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.MemMaxBlocks))
		i--
		dAtA[i] = 0x48
	}
	if m.SmMaxClocks != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.SmMaxClocks))
		i--
		dAtA[i] = 0x40
	}
	if m.PowerLimit != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.PowerLimit))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Pstate) > 0 {
		i -= len(m.Pstate)
		copy(dAtA[i:], m.Pstate)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.Pstate)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ComputeMode) > 0 {
		i -= len(m.ComputeMode)
		copy(dAtA[i:], m.ComputeMode)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ComputeMode)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Mode != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DriverVersion) > 0 {
		i -= len(m.DriverVersion)
		copy(dAtA[i:], m.DriverVersion)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.DriverVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VbiosVersion) > 0 {
		i -= len(m.VbiosVersion)
		copy(dAtA[i:], m.VbiosVersion)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.VbiosVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GOtherInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GOtherInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GOtherInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Temperature != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Temperature))
		i--
		dAtA[i] = 0x20
	}
	if m.PowerDraw != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.PowerDraw))
		i--
		dAtA[i] = 0x18
	}
	if m.MemClocks != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.MemClocks))
		i--
		dAtA[i] = 0x10
	}
	if m.SmClocks != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.SmClocks))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContainerStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProcStats) > 0 {
		for iNdEx := len(m.ProcStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProcStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BaseStats != nil {
		{
			size, err := m.BaseStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContainerBaseStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerBaseStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerBaseStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PartitionStats != nil {
		{
			size, err := m.PartitionStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.CgroupVm != nil {
		{
			size, err := m.CgroupVm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.CgroupUdpStats != nil {
		{
			size, err := m.CgroupUdpStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.CgroupTrafficStats != nil {
		{
			size, err := m.CgroupTrafficStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.CgroupTcpxStats != nil {
		{
			size, err := m.CgroupTcpxStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.CgroupTcpStats != nil {
		{
			size, err := m.CgroupTcpStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.CgroupTask != nil {
		{
			size, err := m.CgroupTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.CgroupSchedcg != nil {
		{
			size, err := m.CgroupSchedcg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.CgroupSchedbvt != nil {
		{
			size, err := m.CgroupSchedbvt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.CgroupPercpu != nil {
		{
			size, err := m.CgroupPercpu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.CgroupPcsw != nil {
		{
			size, err := m.CgroupPcsw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.CgroupMemx != nil {
		{
			size, err := m.CgroupMemx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.CgroupLatencyStat != nil {
		{
			size, err := m.CgroupLatencyStat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.CgroupMemdelay != nil {
		{
			size, err := m.CgroupMemdelay.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.CgroupMem != nil {
		{
			size, err := m.CgroupMem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.CgroupLoad != nil {
		{
			size, err := m.CgroupLoad.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CgroupIox) > 0 {
		for iNdEx := len(m.CgroupIox) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CgroupIox[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.CgroupIotime) > 0 {
		for iNdEx := len(m.CgroupIotime) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CgroupIotime[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.CgroupIo) > 0 {
		for iNdEx := len(m.CgroupIo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CgroupIo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.CgroupCpushare != nil {
		{
			size, err := m.CgroupCpushare.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CgroupCpu != nil {
		{
			size, err := m.CgroupCpu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContainerId) > 0 {
		i -= len(m.ContainerId)
		copy(dAtA[i:], m.ContainerId)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.ContainerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContainerCgroupCpu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerCgroupCpu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerCgroupCpu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OriSteal != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.OriSteal))
		i--
		dAtA[i] = 0x78
	}
	if m.Shares != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Shares))
		i--
		dAtA[i] = 0x70
	}
	if m.JdkMaxProcessLimit != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.JdkMaxProcessLimit))
		i--
		dAtA[i] = 0x68
	}
	if m.Ncpu != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Ncpu))
		i--
		dAtA[i] = 0x60
	}
	if m.Quota != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Quota))
		i--
		dAtA[i] = 0x58
	}
	if m.Period != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x50
	}
	if m.TotalTime != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.TotalTime))
		i--
		dAtA[i] = 0x48
	}
	if m.Steal != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Steal))
		i--
		dAtA[i] = 0x40
	}
	if m.Sirq != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Sirq))
		i--
		dAtA[i] = 0x38
	}
	if m.Hirq != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Hirq))
		i--
		dAtA[i] = 0x30
	}
	if m.Idle != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Idle))
		i--
		dAtA[i] = 0x28
	}
	if m.Iowait != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Iowait))
		i--
		dAtA[i] = 0x20
	}
	if m.Nice != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Nice))
		i--
		dAtA[i] = 0x18
	}
	if m.Sys != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Sys))
		i--
		dAtA[i] = 0x10
	}
	if m.User != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.User))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContainerCgroupCpushare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerCgroupCpushare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerCgroupCpushare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GSibling != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.GSibling))
		i--
		dAtA[i] = 0x40
	}
	if m.GOther != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.GOther))
		i--
		dAtA[i] = 0x38
	}
	if m.OnCpu != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.OnCpu))
		i--
		dAtA[i] = 0x30
	}
	if m.OsServe != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.OsServe))
		i--
		dAtA[i] = 0x28
	}
	if m.ThrottleTime != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.ThrottleTime))
		i--
		dAtA[i] = 0x20
	}
	if m.PeriodTime != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.PeriodTime))
		i--
		dAtA[i] = 0x18
	}
	if m.NrPeriod != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.NrPeriod))
		i--
		dAtA[i] = 0x10
	}
	if m.NrThrottled != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.NrThrottled))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContainerCgroupIO) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerCgroupIO) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerCgroupIO) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Minor != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Minor))
		i--
		dAtA[i] = 0x48
	}
	if m.Major != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Major))
		i--
		dAtA[i] = 0x40
	}
	if m.ServiceTime != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.ServiceTime))
		i--
		dAtA[i] = 0x38
	}
	if m.WaitTime != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.WaitTime))
		i--
		dAtA[i] = 0x30
	}
	if m.IoQueued != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.IoQueued))
		i--
		dAtA[i] = 0x28
	}
	if m.Wbytes != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Wbytes))
		i--
		dAtA[i] = 0x20
	}
	if m.Rbytes != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Rbytes))
		i--
		dAtA[i] = 0x18
	}
	if m.Wio != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Wio))
		i--
		dAtA[i] = 0x10
	}
	if m.Rio != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Rio))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContainerCgroupIOTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerCgroupIOTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerCgroupIOTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Minor != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Minor))
		i--
		dAtA[i] = 0x70
	}
	if m.Major != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Major))
		i--
		dAtA[i] = 0x68
	}
	if m.IoAsyncComplete != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.IoAsyncComplete))
		i--
		dAtA[i] = 0x60
	}
	if m.IoSyncComplete != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.IoSyncComplete))
		i--
		dAtA[i] = 0x58
	}
	if m.IoWriteCompelte != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.IoWriteCompelte))
		i--
		dAtA[i] = 0x50
	}
	if m.IoReadComplete != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.IoReadComplete))
		i--
		dAtA[i] = 0x48
	}
	if m.AsyncWaitTime != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.AsyncWaitTime))
		i--
		dAtA[i] = 0x40
	}
	if m.SyncWaitTime != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.SyncWaitTime))
		i--
		dAtA[i] = 0x38
	}
	if m.AsyncServiceTime != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.AsyncServiceTime))
		i--
		dAtA[i] = 0x30
	}
	if m.SyncServiceTime != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.SyncServiceTime))
		i--
		dAtA[i] = 0x28
	}
	if m.WriteWaitTime != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.WriteWaitTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ReadWaitTime != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.ReadWaitTime))
		i--
		dAtA[i] = 0x18
	}
	if m.WriteServiceTime != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.WriteServiceTime))
		i--
		dAtA[i] = 0x10
	}
	if m.ReadServiceTime != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.ReadServiceTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContainerCgroupIOX) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerCgroupIOX) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerCgroupIOX) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Minor != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Minor))
		i--
		dAtA[i] = 0x48
	}
	if m.Major != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Major))
		i--
		dAtA[i] = 0x40
	}
	if m.IoDown != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.IoDown))
		i--
		dAtA[i] = 0x38
	}
	if m.IoUp != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.IoUp))
		i--
		dAtA[i] = 0x30
	}
	if m.MetaWrites != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.MetaWrites))
		i--
		dAtA[i] = 0x28
	}
	if m.Asyncbytes != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Asyncbytes))
		i--
		dAtA[i] = 0x20
	}
	if m.Syncbytes != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Syncbytes))
		i--
		dAtA[i] = 0x18
	}
	if m.Asio != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Asio))
		i--
		dAtA[i] = 0x10
	}
	if m.Sio != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Sio))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContainerCgroupLoad) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerCgroupLoad) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerCgroupLoad) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RLoad15 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.RLoad15))
		i--
		dAtA[i] = 0x30
	}
	if m.RLoad5 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.RLoad5))
		i--
		dAtA[i] = 0x28
	}
	if m.RLoad1 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.RLoad1))
		i--
		dAtA[i] = 0x20
	}
	if m.Load15 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Load15))
		i--
		dAtA[i] = 0x18
	}
	if m.Load5 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Load5))
		i--
		dAtA[i] = 0x10
	}
	if m.Load1 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Load1))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContainerCgroupMem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerCgroupMem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerCgroupMem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Map != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Map))
		i--
		dAtA[i] = 0x38
	}
	if m.Swap != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Swap))
		i--
		dAtA[i] = 0x30
	}
	if m.Slab != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Slab))
		i--
		dAtA[i] = 0x28
	}
	if m.Avail != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Avail))
		i--
		dAtA[i] = 0x20
	}
	if m.Cache != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Cache))
		i--
		dAtA[i] = 0x18
	}
	if m.Rss != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Rss))
		i--
		dAtA[i] = 0x10
	}
	if m.Total != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContainerCgroupMemDelay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerCgroupMemDelay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerCgroupMemDelay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WaitOnPageWb != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.WaitOnPageWb))
		i--
		dAtA[i] = 0x68
	}
	if m.WbWait != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.WbWait))
		i--
		dAtA[i] = 0x60
	}
	if m.WaitIf != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.WaitIf))
		i--
		dAtA[i] = 0x58
	}
	if len(m.DelayData) > 0 {
		dAtA68 := make([]byte, len(m.DelayData)*10)
		var j67 int
		for _, num := range m.DelayData {
			for num >= 1<<7 {
				dAtA68[j67] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j67++
			}
			dAtA68[j67] = uint8(num)
			j67++
		}
		i -= j67
		copy(dAtA[i:], dAtA68[:j67])
		i = encodeVarintAgent(dAtA, i, uint64(j67))
		i--
		dAtA[i] = 0x52
	}
	if m.MdsFullLoad15 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.MdsFullLoad15))
		i--
		dAtA[i] = 0x48
	}
	if m.MdsFullLoad5 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.MdsFullLoad5))
		i--
		dAtA[i] = 0x40
	}
	if m.MdsFullLoad1 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.MdsFullLoad1))
		i--
		dAtA[i] = 0x38
	}
	if m.MdsSomeLoad15 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.MdsSomeLoad15))
		i--
		dAtA[i] = 0x30
	}
	if m.MdsSomeLoad5 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.MdsSomeLoad5))
		i--
		dAtA[i] = 0x28
	}
	if m.MdsSomeLoad1 != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.MdsSomeLoad1))
		i--
		dAtA[i] = 0x20
	}
	if m.AggregateTotal != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.AggregateTotal))
		i--
		dAtA[i] = 0x18
	}
	if m.AggregateBackgroud != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.AggregateBackgroud))
		i--
		dAtA[i] = 0x10
	}
	if m.AggregateDirect != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.AggregateDirect))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContainerCgroupLatencyStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerCgroupLatencyStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerCgroupLatencyStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ticks) > 0 {
		dAtA70 := make([]byte, len(m.Ticks)*10)
		var j69 int
		for _, num := range m.Ticks {
			for num >= 1<<7 {
				dAtA70[j69] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j69++
			}
			dAtA70[j69] = uint8(num)
			j69++
		}
		i -= j69
		copy(dAtA[i:], dAtA70[:j69])
		i = encodeVarintAgent(dAtA, i, uint64(j69))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContainerCgroupMemx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerCgroupMemx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerCgroupMemx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Swap != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Swap))
		i--
		dAtA[i] = 0x60
	}
	if m.Huge != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Huge))
		i--
		dAtA[i] = 0x58
	}
	if m.Rss != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Rss))
		i--
		dAtA[i] = 0x50
	}
	if m.Lock != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Lock))
		i--
		dAtA[i] = 0x48
	}
	if m.Slab != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Slab))
		i--
		dAtA[i] = 0x40
	}
	if m.Wback != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Wback))
		i--
		dAtA[i] = 0x38
	}
	if m.Dirty != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Dirty))
		i--
		dAtA[i] = 0x30
	}
	if m.Mpfile != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Mpfile))
		i--
		dAtA[i] = 0x28
	}
	if m.Ifile != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Ifile))
		i--
		dAtA[i] = 0x20
	}
	if m.Afile != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Afile))
		i--
		dAtA[i] = 0x18
	}
	if m.Ianon != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Ianon))
		i--
		dAtA[i] = 0x10
	}
	if m.Aanon != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Aanon))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContainerCgroupPcsw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerCgroupPcsw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerCgroupPcsw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NrInvolSwch != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.NrInvolSwch))
		i--
		dAtA[i] = 0x40
	}
	if m.NrVolSwch != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.NrVolSwch))
		i--
		dAtA[i] = 0x38
	}
	if m.MaxPid != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.MaxPid))
		i--
		dAtA[i] = 0x30
	}
	if m.NewTask != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.NewTask))
		i--
		dAtA[i] = 0x28
	}
	if m.NSwch != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.NSwch))
		i--
		dAtA[i] = 0x20
	}
	if m.NDrunning != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.NDrunning))
		i--
		dAtA[i] = 0x18
	}
	if m.NRunning != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.NRunning))
		i--
		dAtA[i] = 0x10
	}
	if m.NTasks != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.NTasks))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContainerCgroupPercpu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerCgroupPercpu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerCgroupPercpu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PercpuStats) > 0 {
		for iNdEx := len(m.PercpuStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PercpuStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Ncpu != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Ncpu))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContainerPercpuStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerPercpuStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerPercpuStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CpuName) > 0 {
		i -= len(m.CpuName)
		copy(dAtA[i:], m.CpuName)
		i = encodeVarintAgent(dAtA, i, uint64(len(m.CpuName)))
		i--
		dAtA[i] = 0x22
	}
	if m.CpuUsage != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CpuUsage))
		i--
		dAtA[i] = 0x18
	}
	if m.CpuSys != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CpuSys))
		i--
		dAtA[i] = 0x10
	}
	if m.CpuUser != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CpuUser))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContainerCgroupSchedbvt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerCgroupSchedbvt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerCgroupSchedbvt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ncpu != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Ncpu))
		i--
		dAtA[i] = 0x20
	}
	if m.BatchNoiseCleanDelayed != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.BatchNoiseCleanDelayed))
		i--
		dAtA[i] = 0x18
	}
	if m.StrictNoiseCleanBatch != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.StrictNoiseCleanBatch))
		i--
		dAtA[i] = 0x10
	}
	if m.BatchDelayStrict != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.BatchDelayStrict))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContainerCgroupSchedcg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerCgroupSchedcg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerCgroupSchedcg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CgDelayMs) > 0 {
		dAtA72 := make([]byte, len(m.CgDelayMs)*10)
		var j71 int
		for _, num := range m.CgDelayMs {
			for num >= 1<<7 {
				dAtA72[j71] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j71++
			}
			dAtA72[j71] = uint8(num)
			j71++
		}
		i -= j71
		copy(dAtA[i:], dAtA72[:j71])
		i = encodeVarintAgent(dAtA, i, uint64(j71))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContainerCgroupSchedTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerCgroupSchedTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerCgroupSchedTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TasksDelayMs) > 0 {
		dAtA74 := make([]byte, len(m.TasksDelayMs)*10)
		var j73 int
		for _, num := range m.TasksDelayMs {
			for num >= 1<<7 {
				dAtA74[j73] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j73++
			}
			dAtA74[j73] = uint8(num)
			j73++
		}
		i -= j73
		copy(dAtA[i:], dAtA74[:j73])
		i = encodeVarintAgent(dAtA, i, uint64(j73))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContainerCgroupTcpStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerCgroupTcpStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerCgroupTcpStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OutRsts != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.OutRsts))
		i--
		dAtA[i] = 0x50
	}
	if m.InErrs != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.InErrs))
		i--
		dAtA[i] = 0x48
	}
	if m.RetransSegs != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.RetransSegs))
		i--
		dAtA[i] = 0x40
	}
	if m.CurrEstab != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.CurrEstab))
		i--
		dAtA[i] = 0x38
	}
	if m.EstabResets != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.EstabResets))
		i--
		dAtA[i] = 0x30
	}
	if m.AttemptFails != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.AttemptFails))
		i--
		dAtA[i] = 0x28
	}
	if m.OutSegs != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.OutSegs))
		i--
		dAtA[i] = 0x20
	}
	if m.InSegs != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.InSegs))
		i--
		dAtA[i] = 0x18
	}
	if m.PassiveOpens != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.PassiveOpens))
		i--
		dAtA[i] = 0x10
	}
	if m.ActiveOpens != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.ActiveOpens))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContainerCgroupTcpxStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerCgroupTcpxStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerCgroupTcpxStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TcpAbortLinger != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.TcpAbortLinger))
		i--
		dAtA[i] = 0x60
	}
	if m.TcpAbortTimeout != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.TcpAbortTimeout))
		i--
		dAtA[i] = 0x58
	}
	if m.TcpAbortMem != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.TcpAbortMem))
		i--
		dAtA[i] = 0x50
	}
	if m.TcpAbortClose != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.TcpAbortClose))
		i--
		dAtA[i] = 0x48
	}
	if m.TcpAbortData != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.TcpAbortData))
		i--
		dAtA[i] = 0x40
	}
	if m.TcpListenDrop != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.TcpListenDrop))
		i--
		dAtA[i] = 0x38
	}
	if m.TcpListenOverflow != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.TcpListenOverflow))
		i--
		dAtA[i] = 0x30
	}
	if m.TcpSlowstartRetrans != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.TcpSlowstartRetrans))
		i--
		dAtA[i] = 0x28
	}
	if m.TcpForwardRetrans != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.TcpForwardRetrans))
		i--
		dAtA[i] = 0x20
	}
	if m.TcpFastRetrans != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.TcpFastRetrans))
		i--
		dAtA[i] = 0x18
	}
	if m.TcpSynRetrans != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.TcpSynRetrans))
		i--
		dAtA[i] = 0x10
	}
	if m.TcpLostRetrans != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.TcpLostRetrans))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContainerCgroupTrafficStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerCgroupTrafficStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerCgroupTrafficStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pktdrpout != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Pktdrpout))
		i--
		dAtA[i] = 0x40
	}
	if m.Pkterrout != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Pkterrout))
		i--
		dAtA[i] = 0x38
	}
	if m.Pktdrpin != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Pktdrpin))
		i--
		dAtA[i] = 0x30
	}
	if m.Pkterrin != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Pkterrin))
		i--
		dAtA[i] = 0x28
	}
	if m.Pktout != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Pktout))
		i--
		dAtA[i] = 0x20
	}
	if m.Pktin != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Pktin))
		i--
		dAtA[i] = 0x18
	}
	if m.Byteout != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Byteout))
		i--
		dAtA[i] = 0x10
	}
	if m.Bytein != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Bytein))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContainerCgroupUdpStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerCgroupUdpStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerCgroupUdpStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InErrors != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.InErrors))
		i--
		dAtA[i] = 0x20
	}
	if m.NoPorts != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.NoPorts))
		i--
		dAtA[i] = 0x18
	}
	if m.OutDatagrams != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.OutDatagrams))
		i--
		dAtA[i] = 0x10
	}
	if m.InDatagrams != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.InDatagrams))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContainerCgroupVm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerCgroupVm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerCgroupVm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Allocstall != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Allocstall))
		i--
		dAtA[i] = 0x48
	}
	if m.Failcnt != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Failcnt))
		i--
		dAtA[i] = 0x40
	}
	if m.Dirty != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Dirty))
		i--
		dAtA[i] = 0x38
	}
	if m.Scan != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Scan))
		i--
		dAtA[i] = 0x30
	}
	if m.Dsteal != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Dsteal))
		i--
		dAtA[i] = 0x28
	}
	if m.Steal != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Steal))
		i--
		dAtA[i] = 0x20
	}
	if m.PageFault != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.PageFault))
		i--
		dAtA[i] = 0x18
	}
	if m.PageOut != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.PageOut))
		i--
		dAtA[i] = 0x10
	}
	if m.PageIn != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.PageIn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContainerPartitionStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerPartitionStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerPartitionStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ifree != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Ifree))
		i--
		dAtA[i] = 0x30
	}
	if m.Itotal != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Itotal))
		i--
		dAtA[i] = 0x28
	}
	if m.Bavail != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Bavail))
		i--
		dAtA[i] = 0x20
	}
	if m.Bfree != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Bfree))
		i--
		dAtA[i] = 0x18
	}
	if m.Blocks != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Blocks))
		i--
		dAtA[i] = 0x10
	}
	if m.Bsize != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Bsize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProcessStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ProcMemStats != nil {
		{
			size, err := m.ProcMemStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ProcIoStats != nil {
		{
			size, err := m.ProcIoStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ProcCpuStats != nil {
		{
			size, err := m.ProcCpuStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CgroupSched != nil {
		{
			size, err := m.CgroupSched.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PidStats != nil {
		{
			size, err := m.PidStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Pid != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProcessPidStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessPidStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessPidStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Thread != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Thread))
		i--
		dAtA[i] = 0x48
	}
	if m.Majflt != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Majflt))
		i--
		dAtA[i] = 0x40
	}
	if m.Minflt != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Minflt))
		i--
		dAtA[i] = 0x38
	}
	if m.Fdcnt != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Fdcnt))
		i--
		dAtA[i] = 0x30
	}
	if m.WriteBytes != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.WriteBytes))
		i--
		dAtA[i] = 0x28
	}
	if m.ReadBytes != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.ReadBytes))
		i--
		dAtA[i] = 0x20
	}
	if m.Mem != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Mem))
		i--
		dAtA[i] = 0x18
	}
	if m.SysCpu != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.SysCpu))
		i--
		dAtA[i] = 0x10
	}
	if m.UserCpu != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.UserCpu))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProcessCgroupSched) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessCgroupSched) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessCgroupSched) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LossTime != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.LossTime))
		i--
		dAtA[i] = 0x20
	}
	if m.NoiseKickDelay != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.NoiseKickDelay))
		i--
		dAtA[i] = 0x18
	}
	if m.BvtDelay != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.BvtDelay))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TasksDelayMs) > 0 {
		dAtA81 := make([]byte, len(m.TasksDelayMs)*10)
		var j80 int
		for _, num := range m.TasksDelayMs {
			for num >= 1<<7 {
				dAtA81[j80] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j80++
			}
			dAtA81[j80] = uint8(num)
			j80++
		}
		i -= j80
		copy(dAtA[i:], dAtA81[:j80])
		i = encodeVarintAgent(dAtA, i, uint64(j80))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProcessProcCpuStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessProcCpuStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessProcCpuStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NThreads != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.NThreads))
		i--
		dAtA[i] = 0x30
	}
	if m.WaitOnRq != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.WaitOnRq))
		i--
		dAtA[i] = 0x28
	}
	if m.RunOnCpu != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.RunOnCpu))
		i--
		dAtA[i] = 0x20
	}
	if m.BlkioDelay != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.BlkioDelay))
		i--
		dAtA[i] = 0x18
	}
	if m.SysCpu != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.SysCpu))
		i--
		dAtA[i] = 0x10
	}
	if m.UserCpu != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.UserCpu))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProcessProcIOStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessProcIOStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessProcIOStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Syscw != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Syscw))
		i--
		dAtA[i] = 0x38
	}
	if m.Syscr != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Syscr))
		i--
		dAtA[i] = 0x30
	}
	if m.Iolat != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Iolat))
		i--
		dAtA[i] = 0x28
	}
	if m.Wbytes != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Wbytes))
		i--
		dAtA[i] = 0x20
	}
	if m.Rbytes != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Rbytes))
		i--
		dAtA[i] = 0x18
	}
	if m.Wchar != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Wchar))
		i--
		dAtA[i] = 0x10
	}
	if m.Rchar != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Rchar))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProcessProcMemStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessProcMemStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessProcMemStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalSwp != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.TotalSwp))
		i--
		dAtA[i] = 0x38
	}
	if m.Swp != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Swp))
		i--
		dAtA[i] = 0x30
	}
	if m.Lock != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Lock))
		i--
		dAtA[i] = 0x28
	}
	if m.Shmem != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Shmem))
		i--
		dAtA[i] = 0x20
	}
	if m.Anon != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Anon))
		i--
		dAtA[i] = 0x18
	}
	if m.Cache != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Cache))
		i--
		dAtA[i] = 0x10
	}
	if m.Usage != 0 {
		i = encodeVarintAgent(dAtA, i, uint64(m.Usage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAgent(dAtA []byte, offset int, v uint64) int {
	offset -= sovAgent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateContainerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.ExecId)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.StringUser != nil {
		l = m.StringUser.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if len(m.Devices) > 0 {
		for _, e := range m.Devices {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if len(m.Storages) > 0 {
		for _, e := range m.Storages {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.OCI != nil {
		l = m.OCI.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.SandboxPidns {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StartContainerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveContainerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovAgent(uint64(m.Timeout))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExecProcessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.ExecId)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.StringUser != nil {
		l = m.StringUser.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.Process != nil {
		l = m.Process.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignalProcessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.ExecId)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.Signal != 0 {
		n += 1 + sovAgent(uint64(m.Signal))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WaitProcessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.ExecId)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WaitProcessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovAgent(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListProcessesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListProcessesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProcessList)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateContainerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatsContainerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PauseContainerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResumeContainerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CpuUsage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalUsage != 0 {
		n += 1 + sovAgent(uint64(m.TotalUsage))
	}
	if len(m.PercpuUsage) > 0 {
		l = 0
		for _, e := range m.PercpuUsage {
			l += sovAgent(uint64(e))
		}
		n += 1 + sovAgent(uint64(l)) + l
	}
	if m.UsageInKernelmode != 0 {
		n += 1 + sovAgent(uint64(m.UsageInKernelmode))
	}
	if m.UsageInUsermode != 0 {
		n += 1 + sovAgent(uint64(m.UsageInUsermode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThrottlingData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Periods != 0 {
		n += 1 + sovAgent(uint64(m.Periods))
	}
	if m.ThrottledPeriods != 0 {
		n += 1 + sovAgent(uint64(m.ThrottledPeriods))
	}
	if m.ThrottledTime != 0 {
		n += 1 + sovAgent(uint64(m.ThrottledTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CpuStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CpuUsage != nil {
		l = m.CpuUsage.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.ThrottlingData != nil {
		l = m.ThrottlingData.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PidsStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Current != 0 {
		n += 1 + sovAgent(uint64(m.Current))
	}
	if m.Limit != 0 {
		n += 1 + sovAgent(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MemoryData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Usage != 0 {
		n += 1 + sovAgent(uint64(m.Usage))
	}
	if m.MaxUsage != 0 {
		n += 1 + sovAgent(uint64(m.MaxUsage))
	}
	if m.Failcnt != 0 {
		n += 1 + sovAgent(uint64(m.Failcnt))
	}
	if m.Limit != 0 {
		n += 1 + sovAgent(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MemoryStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cache != 0 {
		n += 1 + sovAgent(uint64(m.Cache))
	}
	if m.Usage != nil {
		l = m.Usage.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.SwapUsage != nil {
		l = m.SwapUsage.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.KernelUsage != nil {
		l = m.KernelUsage.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.UseHierarchy {
		n += 2
	}
	if len(m.Stats) > 0 {
		for k, v := range m.Stats {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAgent(uint64(len(k))) + 1 + sovAgent(uint64(v))
			n += mapEntrySize + 1 + sovAgent(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlkioStatsEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Major != 0 {
		n += 1 + sovAgent(uint64(m.Major))
	}
	if m.Minor != 0 {
		n += 1 + sovAgent(uint64(m.Minor))
	}
	l = len(m.Op)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovAgent(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlkioStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IoServiceBytesRecursive) > 0 {
		for _, e := range m.IoServiceBytesRecursive {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if len(m.IoServicedRecursive) > 0 {
		for _, e := range m.IoServicedRecursive {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if len(m.IoQueuedRecursive) > 0 {
		for _, e := range m.IoQueuedRecursive {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if len(m.IoServiceTimeRecursive) > 0 {
		for _, e := range m.IoServiceTimeRecursive {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if len(m.IoWaitTimeRecursive) > 0 {
		for _, e := range m.IoWaitTimeRecursive {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if len(m.IoMergedRecursive) > 0 {
		for _, e := range m.IoMergedRecursive {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if len(m.IoTimeRecursive) > 0 {
		for _, e := range m.IoTimeRecursive {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if len(m.SectorsRecursive) > 0 {
		for _, e := range m.SectorsRecursive {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HugetlbStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Usage != 0 {
		n += 1 + sovAgent(uint64(m.Usage))
	}
	if m.MaxUsage != 0 {
		n += 1 + sovAgent(uint64(m.MaxUsage))
	}
	if m.Failcnt != 0 {
		n += 1 + sovAgent(uint64(m.Failcnt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CgroupStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CpuStats != nil {
		l = m.CpuStats.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.MemoryStats != nil {
		l = m.MemoryStats.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.PidsStats != nil {
		l = m.PidsStats.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.BlkioStats != nil {
		l = m.BlkioStats.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if len(m.HugetlbStats) > 0 {
		for k, v := range m.HugetlbStats {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovAgent(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovAgent(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovAgent(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.RxBytes != 0 {
		n += 1 + sovAgent(uint64(m.RxBytes))
	}
	if m.RxPackets != 0 {
		n += 1 + sovAgent(uint64(m.RxPackets))
	}
	if m.RxErrors != 0 {
		n += 1 + sovAgent(uint64(m.RxErrors))
	}
	if m.RxDropped != 0 {
		n += 1 + sovAgent(uint64(m.RxDropped))
	}
	if m.TxBytes != 0 {
		n += 1 + sovAgent(uint64(m.TxBytes))
	}
	if m.TxPackets != 0 {
		n += 1 + sovAgent(uint64(m.TxPackets))
	}
	if m.TxErrors != 0 {
		n += 1 + sovAgent(uint64(m.TxErrors))
	}
	if m.TxDropped != 0 {
		n += 1 + sovAgent(uint64(m.TxDropped))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatsContainerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CgroupStats != nil {
		l = m.CgroupStats.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if len(m.NetworkStats) > 0 {
		for _, e := range m.NetworkStats {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WriteStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.ExecId)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WriteStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Len != 0 {
		n += 1 + sovAgent(uint64(m.Len))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReadStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.ExecId)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.Len != 0 {
		n += 1 + sovAgent(uint64(m.Len))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReadStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CloseStdinRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.ExecId)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TtyWinResizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.ExecId)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.Row != 0 {
		n += 1 + sovAgent(uint64(m.Row))
	}
	if m.Column != 0 {
		n += 1 + sovAgent(uint64(m.Column))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KernelModule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if len(m.Parameters) > 0 {
		for _, s := range m.Parameters {
			l = len(s)
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateSandboxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if len(m.Dns) > 0 {
		for _, s := range m.Dns {
			l = len(s)
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if len(m.Storages) > 0 {
		for _, e := range m.Storages {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.SandboxPidns {
		n += 2
	}
	l = len(m.SandboxId)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.GuestHookPath)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if len(m.KernelModules) > 0 {
		for _, e := range m.KernelModules {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DestroySandboxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Interfaces) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for _, e := range m.Interfaces {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Routes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateInterfaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interface != nil {
		l = m.Interface.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateRoutesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Routes != nil {
		l = m.Routes.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListInterfacesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListRoutesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OnlineCPUMemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wait {
		n += 2
	}
	if m.NbCpus != 0 {
		n += 1 + sovAgent(uint64(m.NbCpus))
	}
	if m.CpuOnly {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReseedRandomDevRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AgentDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.InitDaemon {
		n += 2
	}
	if len(m.DeviceHandlers) > 0 {
		for _, s := range m.DeviceHandlers {
			l = len(s)
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if len(m.StorageHandlers) > 0 {
		for _, s := range m.StorageHandlers {
			l = len(s)
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.SupportsSeccomp {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuestDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MemBlockSize {
		n += 2
	}
	if m.MemHotplugProbe {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuestDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MemBlockSizeBytes != 0 {
		n += 1 + sovAgent(uint64(m.MemBlockSizeBytes))
	}
	if m.AgentDetails != nil {
		l = m.AgentDetails.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.SupportMemHotplugProbe {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MemHotplugByProbeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MemHotplugProbeAddr) > 0 {
		l = 0
		for _, e := range m.MemHotplugProbeAddr {
			l += sovAgent(uint64(e))
		}
		n += 1 + sovAgent(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetGuestDateTimeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sec != 0 {
		n += 1 + sovAgent(uint64(m.Sec))
	}
	if m.Usec != 0 {
		n += 1 + sovAgent(uint64(m.Usec))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Storage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Driver)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if len(m.DriverOptions) > 0 {
		for _, s := range m.DriverOptions {
			l = len(s)
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.Fstype)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if len(m.Options) > 0 {
		for _, s := range m.Options {
			l = len(s)
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	l = len(m.MountPoint)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Device) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.VmPath)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.ContainerPath)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if len(m.Options) > 0 {
		for _, s := range m.Options {
			l = len(s)
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StringUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.Gid)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if len(m.AdditionalGids) > 0 {
		for _, s := range m.AdditionalGids {
			l = len(s)
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CopyFileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.FileSize != 0 {
		n += 1 + sovAgent(uint64(m.FileSize))
	}
	if m.FileMode != 0 {
		n += 1 + sovAgent(uint64(m.FileMode))
	}
	if m.DirMode != 0 {
		n += 1 + sovAgent(uint64(m.DirMode))
	}
	if m.Uid != 0 {
		n += 1 + sovAgent(uint64(m.Uid))
	}
	if m.Gid != 0 {
		n += 1 + sovAgent(uint64(m.Gid))
	}
	if m.Offset != 0 {
		n += 1 + sovAgent(uint64(m.Offset))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StartTracingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StopTracingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExtendedStatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExtendedStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PodStats != nil {
		l = m.PodStats.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if len(m.ConStats) > 0 {
		for _, e := range m.ConStats {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Buddy != nil {
		l = m.Buddy.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if len(m.CpuStats) > 0 {
		for _, e := range m.CpuStats {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if len(m.IoStats) > 0 {
		for _, e := range m.IoStats {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if len(m.IrqStats) > 0 {
		for _, e := range m.IrqStats {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.LoadStats != nil {
		l = m.LoadStats.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.MemStats != nil {
		l = m.MemStats.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.MemxStats != nil {
		l = m.MemxStats.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if len(m.PartStats) > 0 {
		for _, e := range m.PartStats {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.PcswStats != nil {
		l = m.PcswStats.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if len(m.PercpuStats) > 0 {
		for _, e := range m.PercpuStats {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if len(m.PercpuSchedStats) > 0 {
		for _, e := range m.PercpuSchedStats {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.SoftirqStats != nil {
		l = m.SoftirqStats.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.SwapStats != nil {
		l = m.SwapStats.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.TcpStats != nil {
		l = m.TcpStats.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.TcpxStats != nil {
		l = m.TcpxStats.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.TrafficStats != nil {
		l = m.TrafficStats.Size()
		n += 2 + l + sovAgent(uint64(l))
	}
	if m.UdpStats != nil {
		l = m.UdpStats.Size()
		n += 2 + l + sovAgent(uint64(l))
	}
	if m.VmstatStats != nil {
		l = m.VmstatStats.Size()
		n += 2 + l + sovAgent(uint64(l))
	}
	if m.GpuInfo != nil {
		l = m.GpuInfo.Size()
		n += 2 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodBuddyStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Order0 != 0 {
		n += 1 + sovAgent(uint64(m.Order0))
	}
	if m.Order1 != 0 {
		n += 1 + sovAgent(uint64(m.Order1))
	}
	if m.Order2 != 0 {
		n += 1 + sovAgent(uint64(m.Order2))
	}
	if m.Order3 != 0 {
		n += 1 + sovAgent(uint64(m.Order3))
	}
	if m.Order4 != 0 {
		n += 1 + sovAgent(uint64(m.Order4))
	}
	if m.Order5 != 0 {
		n += 1 + sovAgent(uint64(m.Order5))
	}
	if m.Order6 != 0 {
		n += 1 + sovAgent(uint64(m.Order6))
	}
	if m.Order7 != 0 {
		n += 1 + sovAgent(uint64(m.Order7))
	}
	if m.Order8 != 0 {
		n += 1 + sovAgent(uint64(m.Order8))
	}
	if m.Order9 != 0 {
		n += 1 + sovAgent(uint64(m.Order9))
	}
	if m.Order10 != 0 {
		n += 1 + sovAgent(uint64(m.Order10))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodCpuStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CpuUser != 0 {
		n += 1 + sovAgent(uint64(m.CpuUser))
	}
	if m.CpuNice != 0 {
		n += 1 + sovAgent(uint64(m.CpuNice))
	}
	if m.CpuSys != 0 {
		n += 1 + sovAgent(uint64(m.CpuSys))
	}
	if m.CpuIdle != 0 {
		n += 1 + sovAgent(uint64(m.CpuIdle))
	}
	if m.CpuIowait != 0 {
		n += 1 + sovAgent(uint64(m.CpuIowait))
	}
	if m.CpuSteal != 0 {
		n += 1 + sovAgent(uint64(m.CpuSteal))
	}
	if m.CpuHardirq != 0 {
		n += 1 + sovAgent(uint64(m.CpuHardirq))
	}
	if m.CpuSoftirq != 0 {
		n += 1 + sovAgent(uint64(m.CpuSoftirq))
	}
	if m.CpuGuest != 0 {
		n += 1 + sovAgent(uint64(m.CpuGuest))
	}
	if m.CpuNumber != 0 {
		n += 1 + sovAgent(uint64(m.CpuNumber))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodIOStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Part != nil {
		l = m.Part.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.Blkio != nil {
		l = m.Blkio.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PartInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Major != 0 {
		n += 1 + sovAgent(uint64(m.Major))
	}
	if m.Minor != 0 {
		n += 1 + sovAgent(uint64(m.Minor))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlkIOInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RdIos != 0 {
		n += 1 + sovAgent(uint64(m.RdIos))
	}
	if m.RdMerges != 0 {
		n += 1 + sovAgent(uint64(m.RdMerges))
	}
	if m.RdSectors != 0 {
		n += 1 + sovAgent(uint64(m.RdSectors))
	}
	if m.WrIos != 0 {
		n += 1 + sovAgent(uint64(m.WrIos))
	}
	if m.WrMerges != 0 {
		n += 1 + sovAgent(uint64(m.WrMerges))
	}
	if m.WrSectors != 0 {
		n += 1 + sovAgent(uint64(m.WrSectors))
	}
	if m.WrTicks != 0 {
		n += 1 + sovAgent(uint64(m.WrTicks))
	}
	if m.Ticks != 0 {
		n += 1 + sovAgent(uint64(m.Ticks))
	}
	if m.Aveq != 0 {
		n += 1 + sovAgent(uint64(m.Aveq))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodIrqStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IrqNum != 0 {
		n += 1 + sovAgent(uint64(m.IrqNum))
	}
	if len(m.IrqCount) > 0 {
		l = 0
		for _, e := range m.IrqCount {
			l += sovAgent(uint64(e))
		}
		n += 1 + sovAgent(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodLoadStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NrRunning != 0 {
		n += 1 + sovAgent(uint64(m.NrRunning))
	}
	if m.LoadAvg_1 != 0 {
		n += 1 + sovAgent(uint64(m.LoadAvg_1))
	}
	if m.LoadAvg_5 != 0 {
		n += 1 + sovAgent(uint64(m.LoadAvg_5))
	}
	if m.LoadAvg_15 != 0 {
		n += 1 + sovAgent(uint64(m.LoadAvg_15))
	}
	if m.RunningLoadAvg_1 != 0 {
		n += 1 + sovAgent(uint64(m.RunningLoadAvg_1))
	}
	if m.RunningLoadAvg_5 != 0 {
		n += 1 + sovAgent(uint64(m.RunningLoadAvg_5))
	}
	if m.RunningLoadAvg_15 != 0 {
		n += 1 + sovAgent(uint64(m.RunningLoadAvg_15))
	}
	if m.NrThreads != 0 {
		n += 1 + sovAgent(uint64(m.NrThreads))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodMemStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Frmkb != 0 {
		n += 1 + sovAgent(uint64(m.Frmkb))
	}
	if m.Avmkb != 0 {
		n += 1 + sovAgent(uint64(m.Avmkb))
	}
	if m.Bufkb != 0 {
		n += 1 + sovAgent(uint64(m.Bufkb))
	}
	if m.Camkb != 0 {
		n += 1 + sovAgent(uint64(m.Camkb))
	}
	if m.Tlmkb != 0 {
		n += 1 + sovAgent(uint64(m.Tlmkb))
	}
	if m.Comkb != 0 {
		n += 1 + sovAgent(uint64(m.Comkb))
	}
	if m.Rsskb != 0 {
		n += 1 + sovAgent(uint64(m.Rsskb))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodMemxStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Afile != 0 {
		n += 1 + sovAgent(uint64(m.Afile))
	}
	if m.Ifile != 0 {
		n += 1 + sovAgent(uint64(m.Ifile))
	}
	if m.Aanon != 0 {
		n += 1 + sovAgent(uint64(m.Aanon))
	}
	if m.Ianon != 0 {
		n += 1 + sovAgent(uint64(m.Ianon))
	}
	if m.Dirty != 0 {
		n += 1 + sovAgent(uint64(m.Dirty))
	}
	if m.Writeback != 0 {
		n += 1 + sovAgent(uint64(m.Writeback))
	}
	if m.Rslab != 0 {
		n += 1 + sovAgent(uint64(m.Rslab))
	}
	if m.Uslab != 0 {
		n += 1 + sovAgent(uint64(m.Uslab))
	}
	if m.Mpfile != 0 {
		n += 1 + sovAgent(uint64(m.Mpfile))
	}
	if m.Shmem != 0 {
		n += 1 + sovAgent(uint64(m.Shmem))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodPartitionStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bsize != 0 {
		n += 1 + sovAgent(uint64(m.Bsize))
	}
	if m.Blocks != 0 {
		n += 1 + sovAgent(uint64(m.Blocks))
	}
	if m.Bfree != 0 {
		n += 1 + sovAgent(uint64(m.Bfree))
	}
	if m.Bavail != 0 {
		n += 1 + sovAgent(uint64(m.Bavail))
	}
	if m.Itotal != 0 {
		n += 1 + sovAgent(uint64(m.Itotal))
	}
	if m.Ifree != 0 {
		n += 1 + sovAgent(uint64(m.Ifree))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodPcswStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContextSwitch != 0 {
		n += 1 + sovAgent(uint64(m.ContextSwitch))
	}
	if m.Newtask != 0 {
		n += 1 + sovAgent(uint64(m.Newtask))
	}
	if m.Curtask != 0 {
		n += 1 + sovAgent(uint64(m.Curtask))
	}
	if m.Rtsk != 0 {
		n += 1 + sovAgent(uint64(m.Rtsk))
	}
	if m.Dtsk != 0 {
		n += 1 + sovAgent(uint64(m.Dtsk))
	}
	if m.Maxpid != 0 {
		n += 1 + sovAgent(uint64(m.Maxpid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodPercpuStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CpuUser != 0 {
		n += 1 + sovAgent(uint64(m.CpuUser))
	}
	if m.CpuNice != 0 {
		n += 1 + sovAgent(uint64(m.CpuNice))
	}
	if m.CpuSys != 0 {
		n += 1 + sovAgent(uint64(m.CpuSys))
	}
	if m.CpuIdle != 0 {
		n += 1 + sovAgent(uint64(m.CpuIdle))
	}
	if m.CpuIowait != 0 {
		n += 1 + sovAgent(uint64(m.CpuIowait))
	}
	if m.CpuSteal != 0 {
		n += 1 + sovAgent(uint64(m.CpuSteal))
	}
	if m.CpuHardirq != 0 {
		n += 1 + sovAgent(uint64(m.CpuHardirq))
	}
	if m.CpuSoftirq != 0 {
		n += 1 + sovAgent(uint64(m.CpuSoftirq))
	}
	if m.CpuGuest != 0 {
		n += 1 + sovAgent(uint64(m.CpuGuest))
	}
	if m.CpuTime != 0 {
		n += 1 + sovAgent(uint64(m.CpuTime))
	}
	if m.CpuRundelay != 0 {
		n += 1 + sovAgent(uint64(m.CpuRundelay))
	}
	if m.CpuPcount != 0 {
		n += 1 + sovAgent(uint64(m.CpuPcount))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodPercpuSchedStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchedYield != 0 {
		n += 1 + sovAgent(uint64(m.SchedYield))
	}
	if m.SchedExpr != 0 {
		n += 1 + sovAgent(uint64(m.SchedExpr))
	}
	if m.Sched != 0 {
		n += 1 + sovAgent(uint64(m.Sched))
	}
	if m.SchedIdle != 0 {
		n += 1 + sovAgent(uint64(m.SchedIdle))
	}
	if m.SchedIdlePercent != 0 {
		n += 1 + sovAgent(uint64(m.SchedIdlePercent))
	}
	if m.Ttwu != 0 {
		n += 1 + sovAgent(uint64(m.Ttwu))
	}
	if m.TtwuLocal != 0 {
		n += 1 + sovAgent(uint64(m.TtwuLocal))
	}
	if m.TtwuLocalPercent != 0 {
		n += 1 + sovAgent(uint64(m.TtwuLocalPercent))
	}
	if m.Cputime != 0 {
		n += 1 + sovAgent(uint64(m.Cputime))
	}
	if m.Rundelay != 0 {
		n += 1 + sovAgent(uint64(m.Rundelay))
	}
	if m.SliceCnt != 0 {
		n += 1 + sovAgent(uint64(m.SliceCnt))
	}
	if m.AvgCputime != 0 {
		n += 1 + sovAgent(uint64(m.AvgCputime))
	}
	if m.AvgRundelay != 0 {
		n += 1 + sovAgent(uint64(m.AvgRundelay))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodSoftirqStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timer != 0 {
		n += 1 + sovAgent(uint64(m.Timer))
	}
	if m.Nettx != 0 {
		n += 1 + sovAgent(uint64(m.Nettx))
	}
	if m.Netrx != 0 {
		n += 1 + sovAgent(uint64(m.Netrx))
	}
	if m.Block != 0 {
		n += 1 + sovAgent(uint64(m.Block))
	}
	if m.Sched != 0 {
		n += 1 + sovAgent(uint64(m.Sched))
	}
	if m.Hrtim != 0 {
		n += 1 + sovAgent(uint64(m.Hrtim))
	}
	if m.Rcu != 0 {
		n += 1 + sovAgent(uint64(m.Rcu))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodSwapStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pswpin != 0 {
		n += 1 + sovAgent(uint64(m.Pswpin))
	}
	if m.Pswpout != 0 {
		n += 1 + sovAgent(uint64(m.Pswpout))
	}
	if m.Swaptotal != 0 {
		n += 1 + sovAgent(uint64(m.Swaptotal))
	}
	if m.Swapfree != 0 {
		n += 1 + sovAgent(uint64(m.Swapfree))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodTcpStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveOpens != 0 {
		n += 1 + sovAgent(uint64(m.ActiveOpens))
	}
	if m.PassiveOpens != 0 {
		n += 1 + sovAgent(uint64(m.PassiveOpens))
	}
	if m.InSegs != 0 {
		n += 1 + sovAgent(uint64(m.InSegs))
	}
	if m.OutSegs != 0 {
		n += 1 + sovAgent(uint64(m.OutSegs))
	}
	if m.AttemptFails != 0 {
		n += 1 + sovAgent(uint64(m.AttemptFails))
	}
	if m.EstabResets != 0 {
		n += 1 + sovAgent(uint64(m.EstabResets))
	}
	if m.CurrEstab != 0 {
		n += 1 + sovAgent(uint64(m.CurrEstab))
	}
	if m.RetransSegs != 0 {
		n += 1 + sovAgent(uint64(m.RetransSegs))
	}
	if m.InErrs != 0 {
		n += 1 + sovAgent(uint64(m.InErrs))
	}
	if m.OutRsts != 0 {
		n += 1 + sovAgent(uint64(m.OutRsts))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodTcpxStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tcprevq != 0 {
		n += 1 + sovAgent(uint64(m.Tcprevq))
	}
	if m.Tcpsendq != 0 {
		n += 1 + sovAgent(uint64(m.Tcpsendq))
	}
	if m.Tcpest != 0 {
		n += 1 + sovAgent(uint64(m.Tcpest))
	}
	if m.Tcptimewait != 0 {
		n += 1 + sovAgent(uint64(m.Tcptimewait))
	}
	if m.Tcpfinwait1 != 0 {
		n += 1 + sovAgent(uint64(m.Tcpfinwait1))
	}
	if m.Tcpfinwait2 != 0 {
		n += 1 + sovAgent(uint64(m.Tcpfinwait2))
	}
	if m.Tcplistenq != 0 {
		n += 1 + sovAgent(uint64(m.Tcplistenq))
	}
	if m.Tcplistenincq != 0 {
		n += 1 + sovAgent(uint64(m.Tcplistenincq))
	}
	if m.Tcplistenover != 0 {
		n += 1 + sovAgent(uint64(m.Tcplistenover))
	}
	if m.Tcpconnest != 0 {
		n += 1 + sovAgent(uint64(m.Tcpconnest))
	}
	if m.Tcpconndrop != 0 {
		n += 1 + sovAgent(uint64(m.Tcpconndrop))
	}
	if m.Tcpmbdrop != 0 {
		n += 1 + sovAgent(uint64(m.Tcpmbdrop))
	}
	if m.Tcprexmitdrop != 0 {
		n += 1 + sovAgent(uint64(m.Tcprexmitdrop))
	}
	if m.Tcppersistdrop != 0 {
		n += 1 + sovAgent(uint64(m.Tcppersistdrop))
	}
	if m.Tcpkadrop != 0 {
		n += 1 + sovAgent(uint64(m.Tcpkadrop))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodTrafficStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bytein != 0 {
		n += 1 + sovAgent(uint64(m.Bytein))
	}
	if m.Byteout != 0 {
		n += 1 + sovAgent(uint64(m.Byteout))
	}
	if m.Pktin != 0 {
		n += 1 + sovAgent(uint64(m.Pktin))
	}
	if m.Pktout != 0 {
		n += 1 + sovAgent(uint64(m.Pktout))
	}
	if m.Pkterrin != 0 {
		n += 1 + sovAgent(uint64(m.Pkterrin))
	}
	if m.Pktdrpin != 0 {
		n += 1 + sovAgent(uint64(m.Pktdrpin))
	}
	if m.Pkterrout != 0 {
		n += 1 + sovAgent(uint64(m.Pkterrout))
	}
	if m.Pktdrpout != 0 {
		n += 1 + sovAgent(uint64(m.Pktdrpout))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodUdpStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InDatagrams != 0 {
		n += 1 + sovAgent(uint64(m.InDatagrams))
	}
	if m.OutDatagrams != 0 {
		n += 1 + sovAgent(uint64(m.OutDatagrams))
	}
	if m.NoPorts != 0 {
		n += 1 + sovAgent(uint64(m.NoPorts))
	}
	if m.InErrors != 0 {
		n += 1 + sovAgent(uint64(m.InErrors))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodVmstatStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pgin != 0 {
		n += 1 + sovAgent(uint64(m.Pgin))
	}
	if m.Pgout != 0 {
		n += 1 + sovAgent(uint64(m.Pgout))
	}
	if m.Pgfault != 0 {
		n += 1 + sovAgent(uint64(m.Pgfault))
	}
	if m.Dirtied != 0 {
		n += 1 + sovAgent(uint64(m.Dirtied))
	}
	if m.Allocno != 0 {
		n += 1 + sovAgent(uint64(m.Allocno))
	}
	if m.Cmpfail != 0 {
		n += 1 + sovAgent(uint64(m.Cmpfail))
	}
	if m.Cmpsucc != 0 {
		n += 1 + sovAgent(uint64(m.Cmpsucc))
	}
	if m.Failcnt != 0 {
		n += 1 + sovAgent(uint64(m.Failcnt))
	}
	if m.Scan != 0 {
		n += 1 + sovAgent(uint64(m.Scan))
	}
	if m.Steal != 0 {
		n += 1 + sovAgent(uint64(m.Steal))
	}
	if m.Dsteal != 0 {
		n += 1 + sovAgent(uint64(m.Dsteal))
	}
	if m.Vmeff != 0 {
		n += 1 + sovAgent(uint64(m.Vmeff))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodGpuInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stat != nil {
		l = m.Stat.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.StMem != nil {
		l = m.StMem.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if len(m.Uuid) > 0 {
		l = 0
		for _, e := range m.Uuid {
			l += sovAgent(uint64(e))
		}
		n += 1 + sovAgent(uint64(l)) + l
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Util != 0 {
		n += 1 + sovAgent(uint64(m.Util))
	}
	if m.MemUtil != 0 {
		n += 1 + sovAgent(uint64(m.MemUtil))
	}
	if m.NrData != 0 {
		n += 1 + sovAgent(uint64(m.NrData))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GMem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Used != 0 {
		n += 1 + sovAgent(uint64(m.Used))
	}
	if m.Free != 0 {
		n += 1 + sovAgent(uint64(m.Free))
	}
	if m.Total != 0 {
		n += 1 + sovAgent(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GConfigInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.VbiosVersion)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.DriverVersion)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.Mode != 0 {
		n += 1 + sovAgent(uint64(m.Mode))
	}
	l = len(m.ComputeMode)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.Pstate)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.PowerLimit != 0 {
		n += 1 + sovAgent(uint64(m.PowerLimit))
	}
	if m.SmMaxClocks != 0 {
		n += 1 + sovAgent(uint64(m.SmMaxClocks))
	}
	if m.MemMaxBlocks != 0 {
		n += 1 + sovAgent(uint64(m.MemMaxBlocks))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GOtherInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmClocks != 0 {
		n += 1 + sovAgent(uint64(m.SmClocks))
	}
	if m.MemClocks != 0 {
		n += 1 + sovAgent(uint64(m.MemClocks))
	}
	if m.PowerDraw != 0 {
		n += 1 + sovAgent(uint64(m.PowerDraw))
	}
	if m.Temperature != 0 {
		n += 1 + sovAgent(uint64(m.Temperature))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseStats != nil {
		l = m.BaseStats.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if len(m.ProcStats) > 0 {
		for _, e := range m.ProcStats {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerBaseStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.CgroupCpu != nil {
		l = m.CgroupCpu.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.CgroupCpushare != nil {
		l = m.CgroupCpushare.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if len(m.CgroupIo) > 0 {
		for _, e := range m.CgroupIo {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if len(m.CgroupIotime) > 0 {
		for _, e := range m.CgroupIotime {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if len(m.CgroupIox) > 0 {
		for _, e := range m.CgroupIox {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.CgroupLoad != nil {
		l = m.CgroupLoad.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.CgroupMem != nil {
		l = m.CgroupMem.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.CgroupMemdelay != nil {
		l = m.CgroupMemdelay.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.CgroupLatencyStat != nil {
		l = m.CgroupLatencyStat.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.CgroupMemx != nil {
		l = m.CgroupMemx.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.CgroupPcsw != nil {
		l = m.CgroupPcsw.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.CgroupPercpu != nil {
		l = m.CgroupPercpu.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.CgroupSchedbvt != nil {
		l = m.CgroupSchedbvt.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.CgroupSchedcg != nil {
		l = m.CgroupSchedcg.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.CgroupTask != nil {
		l = m.CgroupTask.Size()
		n += 2 + l + sovAgent(uint64(l))
	}
	if m.CgroupTcpStats != nil {
		l = m.CgroupTcpStats.Size()
		n += 2 + l + sovAgent(uint64(l))
	}
	if m.CgroupTcpxStats != nil {
		l = m.CgroupTcpxStats.Size()
		n += 2 + l + sovAgent(uint64(l))
	}
	if m.CgroupTrafficStats != nil {
		l = m.CgroupTrafficStats.Size()
		n += 2 + l + sovAgent(uint64(l))
	}
	if m.CgroupUdpStats != nil {
		l = m.CgroupUdpStats.Size()
		n += 2 + l + sovAgent(uint64(l))
	}
	if m.CgroupVm != nil {
		l = m.CgroupVm.Size()
		n += 2 + l + sovAgent(uint64(l))
	}
	if m.PartitionStats != nil {
		l = m.PartitionStats.Size()
		n += 2 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerCgroupCpu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != 0 {
		n += 1 + sovAgent(uint64(m.User))
	}
	if m.Sys != 0 {
		n += 1 + sovAgent(uint64(m.Sys))
	}
	if m.Nice != 0 {
		n += 1 + sovAgent(uint64(m.Nice))
	}
	if m.Iowait != 0 {
		n += 1 + sovAgent(uint64(m.Iowait))
	}
	if m.Idle != 0 {
		n += 1 + sovAgent(uint64(m.Idle))
	}
	if m.Hirq != 0 {
		n += 1 + sovAgent(uint64(m.Hirq))
	}
	if m.Sirq != 0 {
		n += 1 + sovAgent(uint64(m.Sirq))
	}
	if m.Steal != 0 {
		n += 1 + sovAgent(uint64(m.Steal))
	}
	if m.TotalTime != 0 {
		n += 1 + sovAgent(uint64(m.TotalTime))
	}
	if m.Period != 0 {
		n += 1 + sovAgent(uint64(m.Period))
	}
	if m.Quota != 0 {
		n += 1 + sovAgent(uint64(m.Quota))
	}
	if m.Ncpu != 0 {
		n += 1 + sovAgent(uint64(m.Ncpu))
	}
	if m.JdkMaxProcessLimit != 0 {
		n += 1 + sovAgent(uint64(m.JdkMaxProcessLimit))
	}
	if m.Shares != 0 {
		n += 1 + sovAgent(uint64(m.Shares))
	}
	if m.OriSteal != 0 {
		n += 1 + sovAgent(uint64(m.OriSteal))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerCgroupCpushare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NrThrottled != 0 {
		n += 1 + sovAgent(uint64(m.NrThrottled))
	}
	if m.NrPeriod != 0 {
		n += 1 + sovAgent(uint64(m.NrPeriod))
	}
	if m.PeriodTime != 0 {
		n += 1 + sovAgent(uint64(m.PeriodTime))
	}
	if m.ThrottleTime != 0 {
		n += 1 + sovAgent(uint64(m.ThrottleTime))
	}
	if m.OsServe != 0 {
		n += 1 + sovAgent(uint64(m.OsServe))
	}
	if m.OnCpu != 0 {
		n += 1 + sovAgent(uint64(m.OnCpu))
	}
	if m.GOther != 0 {
		n += 1 + sovAgent(uint64(m.GOther))
	}
	if m.GSibling != 0 {
		n += 1 + sovAgent(uint64(m.GSibling))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerCgroupIO) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rio != 0 {
		n += 1 + sovAgent(uint64(m.Rio))
	}
	if m.Wio != 0 {
		n += 1 + sovAgent(uint64(m.Wio))
	}
	if m.Rbytes != 0 {
		n += 1 + sovAgent(uint64(m.Rbytes))
	}
	if m.Wbytes != 0 {
		n += 1 + sovAgent(uint64(m.Wbytes))
	}
	if m.IoQueued != 0 {
		n += 1 + sovAgent(uint64(m.IoQueued))
	}
	if m.WaitTime != 0 {
		n += 1 + sovAgent(uint64(m.WaitTime))
	}
	if m.ServiceTime != 0 {
		n += 1 + sovAgent(uint64(m.ServiceTime))
	}
	if m.Major != 0 {
		n += 1 + sovAgent(uint64(m.Major))
	}
	if m.Minor != 0 {
		n += 1 + sovAgent(uint64(m.Minor))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerCgroupIOTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReadServiceTime != 0 {
		n += 1 + sovAgent(uint64(m.ReadServiceTime))
	}
	if m.WriteServiceTime != 0 {
		n += 1 + sovAgent(uint64(m.WriteServiceTime))
	}
	if m.ReadWaitTime != 0 {
		n += 1 + sovAgent(uint64(m.ReadWaitTime))
	}
	if m.WriteWaitTime != 0 {
		n += 1 + sovAgent(uint64(m.WriteWaitTime))
	}
	if m.SyncServiceTime != 0 {
		n += 1 + sovAgent(uint64(m.SyncServiceTime))
	}
	if m.AsyncServiceTime != 0 {
		n += 1 + sovAgent(uint64(m.AsyncServiceTime))
	}
	if m.SyncWaitTime != 0 {
		n += 1 + sovAgent(uint64(m.SyncWaitTime))
	}
	if m.AsyncWaitTime != 0 {
		n += 1 + sovAgent(uint64(m.AsyncWaitTime))
	}
	if m.IoReadComplete != 0 {
		n += 1 + sovAgent(uint64(m.IoReadComplete))
	}
	if m.IoWriteCompelte != 0 {
		n += 1 + sovAgent(uint64(m.IoWriteCompelte))
	}
	if m.IoSyncComplete != 0 {
		n += 1 + sovAgent(uint64(m.IoSyncComplete))
	}
	if m.IoAsyncComplete != 0 {
		n += 1 + sovAgent(uint64(m.IoAsyncComplete))
	}
	if m.Major != 0 {
		n += 1 + sovAgent(uint64(m.Major))
	}
	if m.Minor != 0 {
		n += 1 + sovAgent(uint64(m.Minor))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerCgroupIOX) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sio != 0 {
		n += 1 + sovAgent(uint64(m.Sio))
	}
	if m.Asio != 0 {
		n += 1 + sovAgent(uint64(m.Asio))
	}
	if m.Syncbytes != 0 {
		n += 1 + sovAgent(uint64(m.Syncbytes))
	}
	if m.Asyncbytes != 0 {
		n += 1 + sovAgent(uint64(m.Asyncbytes))
	}
	if m.MetaWrites != 0 {
		n += 1 + sovAgent(uint64(m.MetaWrites))
	}
	if m.IoUp != 0 {
		n += 1 + sovAgent(uint64(m.IoUp))
	}
	if m.IoDown != 0 {
		n += 1 + sovAgent(uint64(m.IoDown))
	}
	if m.Major != 0 {
		n += 1 + sovAgent(uint64(m.Major))
	}
	if m.Minor != 0 {
		n += 1 + sovAgent(uint64(m.Minor))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerCgroupLoad) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Load1 != 0 {
		n += 1 + sovAgent(uint64(m.Load1))
	}
	if m.Load5 != 0 {
		n += 1 + sovAgent(uint64(m.Load5))
	}
	if m.Load15 != 0 {
		n += 1 + sovAgent(uint64(m.Load15))
	}
	if m.RLoad1 != 0 {
		n += 1 + sovAgent(uint64(m.RLoad1))
	}
	if m.RLoad5 != 0 {
		n += 1 + sovAgent(uint64(m.RLoad5))
	}
	if m.RLoad15 != 0 {
		n += 1 + sovAgent(uint64(m.RLoad15))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerCgroupMem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovAgent(uint64(m.Total))
	}
	if m.Rss != 0 {
		n += 1 + sovAgent(uint64(m.Rss))
	}
	if m.Cache != 0 {
		n += 1 + sovAgent(uint64(m.Cache))
	}
	if m.Avail != 0 {
		n += 1 + sovAgent(uint64(m.Avail))
	}
	if m.Slab != 0 {
		n += 1 + sovAgent(uint64(m.Slab))
	}
	if m.Swap != 0 {
		n += 1 + sovAgent(uint64(m.Swap))
	}
	if m.Map != 0 {
		n += 1 + sovAgent(uint64(m.Map))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerCgroupMemDelay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AggregateDirect != 0 {
		n += 1 + sovAgent(uint64(m.AggregateDirect))
	}
	if m.AggregateBackgroud != 0 {
		n += 1 + sovAgent(uint64(m.AggregateBackgroud))
	}
	if m.AggregateTotal != 0 {
		n += 1 + sovAgent(uint64(m.AggregateTotal))
	}
	if m.MdsSomeLoad1 != 0 {
		n += 1 + sovAgent(uint64(m.MdsSomeLoad1))
	}
	if m.MdsSomeLoad5 != 0 {
		n += 1 + sovAgent(uint64(m.MdsSomeLoad5))
	}
	if m.MdsSomeLoad15 != 0 {
		n += 1 + sovAgent(uint64(m.MdsSomeLoad15))
	}
	if m.MdsFullLoad1 != 0 {
		n += 1 + sovAgent(uint64(m.MdsFullLoad1))
	}
	if m.MdsFullLoad5 != 0 {
		n += 1 + sovAgent(uint64(m.MdsFullLoad5))
	}
	if m.MdsFullLoad15 != 0 {
		n += 1 + sovAgent(uint64(m.MdsFullLoad15))
	}
	if len(m.DelayData) > 0 {
		l = 0
		for _, e := range m.DelayData {
			l += sovAgent(uint64(e))
		}
		n += 1 + sovAgent(uint64(l)) + l
	}
	if m.WaitIf != 0 {
		n += 1 + sovAgent(uint64(m.WaitIf))
	}
	if m.WbWait != 0 {
		n += 1 + sovAgent(uint64(m.WbWait))
	}
	if m.WaitOnPageWb != 0 {
		n += 1 + sovAgent(uint64(m.WaitOnPageWb))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerCgroupLatencyStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ticks) > 0 {
		l = 0
		for _, e := range m.Ticks {
			l += sovAgent(uint64(e))
		}
		n += 1 + sovAgent(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerCgroupMemx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aanon != 0 {
		n += 1 + sovAgent(uint64(m.Aanon))
	}
	if m.Ianon != 0 {
		n += 1 + sovAgent(uint64(m.Ianon))
	}
	if m.Afile != 0 {
		n += 1 + sovAgent(uint64(m.Afile))
	}
	if m.Ifile != 0 {
		n += 1 + sovAgent(uint64(m.Ifile))
	}
	if m.Mpfile != 0 {
		n += 1 + sovAgent(uint64(m.Mpfile))
	}
	if m.Dirty != 0 {
		n += 1 + sovAgent(uint64(m.Dirty))
	}
	if m.Wback != 0 {
		n += 1 + sovAgent(uint64(m.Wback))
	}
	if m.Slab != 0 {
		n += 1 + sovAgent(uint64(m.Slab))
	}
	if m.Lock != 0 {
		n += 1 + sovAgent(uint64(m.Lock))
	}
	if m.Rss != 0 {
		n += 1 + sovAgent(uint64(m.Rss))
	}
	if m.Huge != 0 {
		n += 1 + sovAgent(uint64(m.Huge))
	}
	if m.Swap != 0 {
		n += 1 + sovAgent(uint64(m.Swap))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerCgroupPcsw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NTasks != 0 {
		n += 1 + sovAgent(uint64(m.NTasks))
	}
	if m.NRunning != 0 {
		n += 1 + sovAgent(uint64(m.NRunning))
	}
	if m.NDrunning != 0 {
		n += 1 + sovAgent(uint64(m.NDrunning))
	}
	if m.NSwch != 0 {
		n += 1 + sovAgent(uint64(m.NSwch))
	}
	if m.NewTask != 0 {
		n += 1 + sovAgent(uint64(m.NewTask))
	}
	if m.MaxPid != 0 {
		n += 1 + sovAgent(uint64(m.MaxPid))
	}
	if m.NrVolSwch != 0 {
		n += 1 + sovAgent(uint64(m.NrVolSwch))
	}
	if m.NrInvolSwch != 0 {
		n += 1 + sovAgent(uint64(m.NrInvolSwch))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerCgroupPercpu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ncpu != 0 {
		n += 1 + sovAgent(uint64(m.Ncpu))
	}
	if len(m.PercpuStats) > 0 {
		for _, e := range m.PercpuStats {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerPercpuStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CpuUser != 0 {
		n += 1 + sovAgent(uint64(m.CpuUser))
	}
	if m.CpuSys != 0 {
		n += 1 + sovAgent(uint64(m.CpuSys))
	}
	if m.CpuUsage != 0 {
		n += 1 + sovAgent(uint64(m.CpuUsage))
	}
	l = len(m.CpuName)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerCgroupSchedbvt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchDelayStrict != 0 {
		n += 1 + sovAgent(uint64(m.BatchDelayStrict))
	}
	if m.StrictNoiseCleanBatch != 0 {
		n += 1 + sovAgent(uint64(m.StrictNoiseCleanBatch))
	}
	if m.BatchNoiseCleanDelayed != 0 {
		n += 1 + sovAgent(uint64(m.BatchNoiseCleanDelayed))
	}
	if m.Ncpu != 0 {
		n += 1 + sovAgent(uint64(m.Ncpu))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerCgroupSchedcg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CgDelayMs) > 0 {
		l = 0
		for _, e := range m.CgDelayMs {
			l += sovAgent(uint64(e))
		}
		n += 1 + sovAgent(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerCgroupSchedTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TasksDelayMs) > 0 {
		l = 0
		for _, e := range m.TasksDelayMs {
			l += sovAgent(uint64(e))
		}
		n += 1 + sovAgent(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerCgroupTcpStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveOpens != 0 {
		n += 1 + sovAgent(uint64(m.ActiveOpens))
	}
	if m.PassiveOpens != 0 {
		n += 1 + sovAgent(uint64(m.PassiveOpens))
	}
	if m.InSegs != 0 {
		n += 1 + sovAgent(uint64(m.InSegs))
	}
	if m.OutSegs != 0 {
		n += 1 + sovAgent(uint64(m.OutSegs))
	}
	if m.AttemptFails != 0 {
		n += 1 + sovAgent(uint64(m.AttemptFails))
	}
	if m.EstabResets != 0 {
		n += 1 + sovAgent(uint64(m.EstabResets))
	}
	if m.CurrEstab != 0 {
		n += 1 + sovAgent(uint64(m.CurrEstab))
	}
	if m.RetransSegs != 0 {
		n += 1 + sovAgent(uint64(m.RetransSegs))
	}
	if m.InErrs != 0 {
		n += 1 + sovAgent(uint64(m.InErrs))
	}
	if m.OutRsts != 0 {
		n += 1 + sovAgent(uint64(m.OutRsts))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerCgroupTcpxStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TcpLostRetrans != 0 {
		n += 1 + sovAgent(uint64(m.TcpLostRetrans))
	}
	if m.TcpSynRetrans != 0 {
		n += 1 + sovAgent(uint64(m.TcpSynRetrans))
	}
	if m.TcpFastRetrans != 0 {
		n += 1 + sovAgent(uint64(m.TcpFastRetrans))
	}
	if m.TcpForwardRetrans != 0 {
		n += 1 + sovAgent(uint64(m.TcpForwardRetrans))
	}
	if m.TcpSlowstartRetrans != 0 {
		n += 1 + sovAgent(uint64(m.TcpSlowstartRetrans))
	}
	if m.TcpListenOverflow != 0 {
		n += 1 + sovAgent(uint64(m.TcpListenOverflow))
	}
	if m.TcpListenDrop != 0 {
		n += 1 + sovAgent(uint64(m.TcpListenDrop))
	}
	if m.TcpAbortData != 0 {
		n += 1 + sovAgent(uint64(m.TcpAbortData))
	}
	if m.TcpAbortClose != 0 {
		n += 1 + sovAgent(uint64(m.TcpAbortClose))
	}
	if m.TcpAbortMem != 0 {
		n += 1 + sovAgent(uint64(m.TcpAbortMem))
	}
	if m.TcpAbortTimeout != 0 {
		n += 1 + sovAgent(uint64(m.TcpAbortTimeout))
	}
	if m.TcpAbortLinger != 0 {
		n += 1 + sovAgent(uint64(m.TcpAbortLinger))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerCgroupTrafficStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bytein != 0 {
		n += 1 + sovAgent(uint64(m.Bytein))
	}
	if m.Byteout != 0 {
		n += 1 + sovAgent(uint64(m.Byteout))
	}
	if m.Pktin != 0 {
		n += 1 + sovAgent(uint64(m.Pktin))
	}
	if m.Pktout != 0 {
		n += 1 + sovAgent(uint64(m.Pktout))
	}
	if m.Pkterrin != 0 {
		n += 1 + sovAgent(uint64(m.Pkterrin))
	}
	if m.Pktdrpin != 0 {
		n += 1 + sovAgent(uint64(m.Pktdrpin))
	}
	if m.Pkterrout != 0 {
		n += 1 + sovAgent(uint64(m.Pkterrout))
	}
	if m.Pktdrpout != 0 {
		n += 1 + sovAgent(uint64(m.Pktdrpout))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerCgroupUdpStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InDatagrams != 0 {
		n += 1 + sovAgent(uint64(m.InDatagrams))
	}
	if m.OutDatagrams != 0 {
		n += 1 + sovAgent(uint64(m.OutDatagrams))
	}
	if m.NoPorts != 0 {
		n += 1 + sovAgent(uint64(m.NoPorts))
	}
	if m.InErrors != 0 {
		n += 1 + sovAgent(uint64(m.InErrors))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerCgroupVm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageIn != 0 {
		n += 1 + sovAgent(uint64(m.PageIn))
	}
	if m.PageOut != 0 {
		n += 1 + sovAgent(uint64(m.PageOut))
	}
	if m.PageFault != 0 {
		n += 1 + sovAgent(uint64(m.PageFault))
	}
	if m.Steal != 0 {
		n += 1 + sovAgent(uint64(m.Steal))
	}
	if m.Dsteal != 0 {
		n += 1 + sovAgent(uint64(m.Dsteal))
	}
	if m.Scan != 0 {
		n += 1 + sovAgent(uint64(m.Scan))
	}
	if m.Dirty != 0 {
		n += 1 + sovAgent(uint64(m.Dirty))
	}
	if m.Failcnt != 0 {
		n += 1 + sovAgent(uint64(m.Failcnt))
	}
	if m.Allocstall != 0 {
		n += 1 + sovAgent(uint64(m.Allocstall))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerPartitionStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bsize != 0 {
		n += 1 + sovAgent(uint64(m.Bsize))
	}
	if m.Blocks != 0 {
		n += 1 + sovAgent(uint64(m.Blocks))
	}
	if m.Bfree != 0 {
		n += 1 + sovAgent(uint64(m.Bfree))
	}
	if m.Bavail != 0 {
		n += 1 + sovAgent(uint64(m.Bavail))
	}
	if m.Itotal != 0 {
		n += 1 + sovAgent(uint64(m.Itotal))
	}
	if m.Ifree != 0 {
		n += 1 + sovAgent(uint64(m.Ifree))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pid != 0 {
		n += 1 + sovAgent(uint64(m.Pid))
	}
	if m.PidStats != nil {
		l = m.PidStats.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.CgroupSched != nil {
		l = m.CgroupSched.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.ProcCpuStats != nil {
		l = m.ProcCpuStats.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.ProcIoStats != nil {
		l = m.ProcIoStats.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.ProcMemStats != nil {
		l = m.ProcMemStats.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessPidStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserCpu != 0 {
		n += 1 + sovAgent(uint64(m.UserCpu))
	}
	if m.SysCpu != 0 {
		n += 1 + sovAgent(uint64(m.SysCpu))
	}
	if m.Mem != 0 {
		n += 1 + sovAgent(uint64(m.Mem))
	}
	if m.ReadBytes != 0 {
		n += 1 + sovAgent(uint64(m.ReadBytes))
	}
	if m.WriteBytes != 0 {
		n += 1 + sovAgent(uint64(m.WriteBytes))
	}
	if m.Fdcnt != 0 {
		n += 1 + sovAgent(uint64(m.Fdcnt))
	}
	if m.Minflt != 0 {
		n += 1 + sovAgent(uint64(m.Minflt))
	}
	if m.Majflt != 0 {
		n += 1 + sovAgent(uint64(m.Majflt))
	}
	if m.Thread != 0 {
		n += 1 + sovAgent(uint64(m.Thread))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessCgroupSched) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TasksDelayMs) > 0 {
		l = 0
		for _, e := range m.TasksDelayMs {
			l += sovAgent(uint64(e))
		}
		n += 1 + sovAgent(uint64(l)) + l
	}
	if m.BvtDelay != 0 {
		n += 1 + sovAgent(uint64(m.BvtDelay))
	}
	if m.NoiseKickDelay != 0 {
		n += 1 + sovAgent(uint64(m.NoiseKickDelay))
	}
	if m.LossTime != 0 {
		n += 1 + sovAgent(uint64(m.LossTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessProcCpuStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserCpu != 0 {
		n += 1 + sovAgent(uint64(m.UserCpu))
	}
	if m.SysCpu != 0 {
		n += 1 + sovAgent(uint64(m.SysCpu))
	}
	if m.BlkioDelay != 0 {
		n += 1 + sovAgent(uint64(m.BlkioDelay))
	}
	if m.RunOnCpu != 0 {
		n += 1 + sovAgent(uint64(m.RunOnCpu))
	}
	if m.WaitOnRq != 0 {
		n += 1 + sovAgent(uint64(m.WaitOnRq))
	}
	if m.NThreads != 0 {
		n += 1 + sovAgent(uint64(m.NThreads))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessProcIOStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rchar != 0 {
		n += 1 + sovAgent(uint64(m.Rchar))
	}
	if m.Wchar != 0 {
		n += 1 + sovAgent(uint64(m.Wchar))
	}
	if m.Rbytes != 0 {
		n += 1 + sovAgent(uint64(m.Rbytes))
	}
	if m.Wbytes != 0 {
		n += 1 + sovAgent(uint64(m.Wbytes))
	}
	if m.Iolat != 0 {
		n += 1 + sovAgent(uint64(m.Iolat))
	}
	if m.Syscr != 0 {
		n += 1 + sovAgent(uint64(m.Syscr))
	}
	if m.Syscw != 0 {
		n += 1 + sovAgent(uint64(m.Syscw))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessProcMemStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Usage != 0 {
		n += 1 + sovAgent(uint64(m.Usage))
	}
	if m.Cache != 0 {
		n += 1 + sovAgent(uint64(m.Cache))
	}
	if m.Anon != 0 {
		n += 1 + sovAgent(uint64(m.Anon))
	}
	if m.Shmem != 0 {
		n += 1 + sovAgent(uint64(m.Shmem))
	}
	if m.Lock != 0 {
		n += 1 + sovAgent(uint64(m.Lock))
	}
	if m.Swp != 0 {
		n += 1 + sovAgent(uint64(m.Swp))
	}
	if m.TotalSwp != 0 {
		n += 1 + sovAgent(uint64(m.TotalSwp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAgent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAgent(x uint64) (n int) {
	return sovAgent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateContainerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateContainerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateContainerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StringUser == nil {
				m.StringUser = &StringUser{}
			}
			if err := m.StringUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Devices = append(m.Devices, &Device{})
			if err := m.Devices[len(m.Devices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Storages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Storages = append(m.Storages, &Storage{})
			if err := m.Storages[len(m.Storages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OCI", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OCI == nil {
				m.OCI = &Spec{}
			}
			if err := m.OCI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SandboxPidns", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SandboxPidns = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartContainerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartContainerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartContainerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveContainerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveContainerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveContainerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecProcessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecProcessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecProcessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StringUser == nil {
				m.StringUser = &StringUser{}
			}
			if err := m.StringUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Process", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Process == nil {
				m.Process = &Process{}
			}
			if err := m.Process.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignalProcessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignalProcessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignalProcessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signal", wireType)
			}
			m.Signal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Signal |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WaitProcessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaitProcessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaitProcessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WaitProcessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaitProcessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaitProcessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListProcessesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListProcessesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListProcessesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListProcessesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListProcessesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListProcessesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessList", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessList = append(m.ProcessList[:0], dAtA[iNdEx:postIndex]...)
			if m.ProcessList == nil {
				m.ProcessList = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateContainerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateContainerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateContainerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &LinuxResources{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsContainerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsContainerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsContainerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PauseContainerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PauseContainerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PauseContainerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResumeContainerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResumeContainerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResumeContainerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CpuUsage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpuUsage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpuUsage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUsage", wireType)
			}
			m.TotalUsage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalUsage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PercpuUsage = append(m.PercpuUsage, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAgent
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAgent
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PercpuUsage) == 0 {
					m.PercpuUsage = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PercpuUsage = append(m.PercpuUsage, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PercpuUsage", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageInKernelmode", wireType)
			}
			m.UsageInKernelmode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsageInKernelmode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageInUsermode", wireType)
			}
			m.UsageInUsermode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsageInUsermode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThrottlingData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThrottlingData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThrottlingData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Periods", wireType)
			}
			m.Periods = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Periods |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThrottledPeriods", wireType)
			}
			m.ThrottledPeriods = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThrottledPeriods |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThrottledTime", wireType)
			}
			m.ThrottledTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThrottledTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CpuStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpuStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpuStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuUsage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CpuUsage == nil {
				m.CpuUsage = &CpuUsage{}
			}
			if err := m.CpuUsage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThrottlingData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ThrottlingData == nil {
				m.ThrottlingData = &ThrottlingData{}
			}
			if err := m.ThrottlingData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PidsStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PidsStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PidsStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
			m.Current = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Current |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemoryData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			m.Usage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Usage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUsage", wireType)
			}
			m.MaxUsage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUsage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failcnt", wireType)
			}
			m.Failcnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Failcnt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemoryStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cache", wireType)
			}
			m.Cache = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cache |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Usage == nil {
				m.Usage = &MemoryData{}
			}
			if err := m.Usage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapUsage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwapUsage == nil {
				m.SwapUsage = &MemoryData{}
			}
			if err := m.SwapUsage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelUsage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KernelUsage == nil {
				m.KernelUsage = &MemoryData{}
			}
			if err := m.KernelUsage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseHierarchy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseHierarchy = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAgent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAgent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAgent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAgent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Stats[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlkioStatsEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlkioStatsEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlkioStatsEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			m.Major = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Major |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minor", wireType)
			}
			m.Minor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minor |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Op = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlkioStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlkioStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlkioStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IoServiceBytesRecursive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IoServiceBytesRecursive = append(m.IoServiceBytesRecursive, &BlkioStatsEntry{})
			if err := m.IoServiceBytesRecursive[len(m.IoServiceBytesRecursive)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IoServicedRecursive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IoServicedRecursive = append(m.IoServicedRecursive, &BlkioStatsEntry{})
			if err := m.IoServicedRecursive[len(m.IoServicedRecursive)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IoQueuedRecursive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IoQueuedRecursive = append(m.IoQueuedRecursive, &BlkioStatsEntry{})
			if err := m.IoQueuedRecursive[len(m.IoQueuedRecursive)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IoServiceTimeRecursive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IoServiceTimeRecursive = append(m.IoServiceTimeRecursive, &BlkioStatsEntry{})
			if err := m.IoServiceTimeRecursive[len(m.IoServiceTimeRecursive)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IoWaitTimeRecursive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IoWaitTimeRecursive = append(m.IoWaitTimeRecursive, &BlkioStatsEntry{})
			if err := m.IoWaitTimeRecursive[len(m.IoWaitTimeRecursive)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IoMergedRecursive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IoMergedRecursive = append(m.IoMergedRecursive, &BlkioStatsEntry{})
			if err := m.IoMergedRecursive[len(m.IoMergedRecursive)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IoTimeRecursive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IoTimeRecursive = append(m.IoTimeRecursive, &BlkioStatsEntry{})
			if err := m.IoTimeRecursive[len(m.IoTimeRecursive)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectorsRecursive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SectorsRecursive = append(m.SectorsRecursive, &BlkioStatsEntry{})
			if err := m.SectorsRecursive[len(m.SectorsRecursive)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HugetlbStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HugetlbStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HugetlbStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			m.Usage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Usage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUsage", wireType)
			}
			m.MaxUsage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUsage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failcnt", wireType)
			}
			m.Failcnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Failcnt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CgroupStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CgroupStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CgroupStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CpuStats == nil {
				m.CpuStats = &CpuStats{}
			}
			if err := m.CpuStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemoryStats == nil {
				m.MemoryStats = &MemoryStats{}
			}
			if err := m.MemoryStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PidsStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PidsStats == nil {
				m.PidsStats = &PidsStats{}
			}
			if err := m.PidsStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlkioStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlkioStats == nil {
				m.BlkioStats = &BlkioStats{}
			}
			if err := m.BlkioStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HugetlbStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HugetlbStats == nil {
				m.HugetlbStats = make(map[string]*HugetlbStats)
			}
			var mapkey string
			var mapvalue *HugetlbStats
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAgent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAgent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAgent
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAgent
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &HugetlbStats{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAgent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAgent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.HugetlbStats[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxBytes", wireType)
			}
			m.RxBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPackets", wireType)
			}
			m.RxPackets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxPackets |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxErrors", wireType)
			}
			m.RxErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxErrors |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxDropped", wireType)
			}
			m.RxDropped = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxDropped |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBytes", wireType)
			}
			m.TxBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPackets", wireType)
			}
			m.TxPackets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxPackets |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxErrors", wireType)
			}
			m.TxErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxErrors |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxDropped", wireType)
			}
			m.TxDropped = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxDropped |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsContainerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsContainerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsContainerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CgroupStats == nil {
				m.CgroupStats = &CgroupStats{}
			}
			if err := m.CgroupStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkStats = append(m.NetworkStats, &NetworkStats{})
			if err := m.NetworkStats[len(m.NetworkStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriteStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriteStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriteStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriteStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriteStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriteStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Len", wireType)
			}
			m.Len = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Len |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Len", wireType)
			}
			m.Len = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Len |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseStdinRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseStdinRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseStdinRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TtyWinResizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TtyWinResizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TtyWinResizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			m.Row = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Row |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			m.Column = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Column |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KernelModule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KernelModule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KernelModule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameters = append(m.Parameters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSandboxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSandboxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSandboxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dns = append(m.Dns, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Storages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Storages = append(m.Storages, &Storage{})
			if err := m.Storages[len(m.Storages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SandboxPidns", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SandboxPidns = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SandboxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SandboxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuestHookPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuestHookPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelModules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KernelModules = append(m.KernelModules, &KernelModule{})
			if err := m.KernelModules[len(m.KernelModules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DestroySandboxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DestroySandboxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DestroySandboxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Interfaces) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Interfaces: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Interfaces: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interfaces = append(m.Interfaces, &types.Interface{})
			if err := m.Interfaces[len(m.Interfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Routes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Routes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Routes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &types.Route{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateInterfaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateInterfaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateInterfaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Interface == nil {
				m.Interface = &types.Interface{}
			}
			if err := m.Interface.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRoutesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRoutesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRoutesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Routes == nil {
				m.Routes = &Routes{}
			}
			if err := m.Routes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListInterfacesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListInterfacesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListInterfacesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRoutesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRoutesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRoutesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnlineCPUMemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnlineCPUMemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnlineCPUMemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wait", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Wait = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbCpus", wireType)
			}
			m.NbCpus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NbCpus |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CpuOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReseedRandomDevRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReseedRandomDevRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReseedRandomDevRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitDaemon", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitDaemon = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceHandlers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceHandlers = append(m.DeviceHandlers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageHandlers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageHandlers = append(m.StorageHandlers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportsSeccomp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SupportsSeccomp = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuestDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuestDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuestDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemBlockSize", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MemBlockSize = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemHotplugProbe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MemHotplugProbe = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuestDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuestDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuestDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemBlockSizeBytes", wireType)
			}
			m.MemBlockSizeBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemBlockSizeBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentDetails == nil {
				m.AgentDetails = &AgentDetails{}
			}
			if err := m.AgentDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportMemHotplugProbe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SupportMemHotplugProbe = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemHotplugByProbeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemHotplugByProbeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemHotplugByProbeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MemHotplugProbeAddr = append(m.MemHotplugProbeAddr, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAgent
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAgent
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MemHotplugProbeAddr) == 0 {
					m.MemHotplugProbeAddr = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MemHotplugProbeAddr = append(m.MemHotplugProbeAddr, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MemHotplugProbeAddr", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetGuestDateTimeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetGuestDateTimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetGuestDateTimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sec", wireType)
			}
			m.Sec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sec |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usec", wireType)
			}
			m.Usec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Usec |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Storage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Storage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Storage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Driver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Driver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverOptions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DriverOptions = append(m.DriverOptions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fstype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fstype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MountPoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MountPoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Device) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Device: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Device: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalGids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalGids = append(m.AdditionalGids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CopyFileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CopyFileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CopyFileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileMode", wireType)
			}
			m.FileMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileMode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirMode", wireType)
			}
			m.DirMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DirMode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			m.Gid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartTracingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartTracingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartTracingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopTracingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopTracingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopTracingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtendedStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtendedStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtendedStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtendedStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtendedStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtendedStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodStats == nil {
				m.PodStats = &PodStats{}
			}
			if err := m.PodStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConStats = append(m.ConStats, &ContainerStats{})
			if err := m.ConStats[len(m.ConStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buddy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Buddy == nil {
				m.Buddy = &PodBuddyStats{}
			}
			if err := m.Buddy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CpuStats = append(m.CpuStats, &PodCpuStats{})
			if err := m.CpuStats[len(m.CpuStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IoStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IoStats = append(m.IoStats, &PodIOStats{})
			if err := m.IoStats[len(m.IoStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IrqStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IrqStats = append(m.IrqStats, &PodIrqStats{})
			if err := m.IrqStats[len(m.IrqStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoadStats == nil {
				m.LoadStats = &PodLoadStats{}
			}
			if err := m.LoadStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemStats == nil {
				m.MemStats = &PodMemStats{}
			}
			if err := m.MemStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemxStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemxStats == nil {
				m.MemxStats = &PodMemxStats{}
			}
			if err := m.MemxStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartStats = append(m.PartStats, &PodPartitionStats{})
			if err := m.PartStats[len(m.PartStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PcswStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PcswStats == nil {
				m.PcswStats = &PodPcswStats{}
			}
			if err := m.PcswStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercpuStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PercpuStats = append(m.PercpuStats, &PodPercpuStats{})
			if err := m.PercpuStats[len(m.PercpuStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercpuSchedStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PercpuSchedStats = append(m.PercpuSchedStats, &PodPercpuSchedStats{})
			if err := m.PercpuSchedStats[len(m.PercpuSchedStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftirqStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SoftirqStats == nil {
				m.SoftirqStats = &PodSoftirqStats{}
			}
			if err := m.SoftirqStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwapStats == nil {
				m.SwapStats = &PodSwapStats{}
			}
			if err := m.SwapStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TcpStats == nil {
				m.TcpStats = &PodTcpStats{}
			}
			if err := m.TcpStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpxStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TcpxStats == nil {
				m.TcpxStats = &PodTcpxStats{}
			}
			if err := m.TcpxStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrafficStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrafficStats == nil {
				m.TrafficStats = &PodTrafficStats{}
			}
			if err := m.TrafficStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UdpStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UdpStats == nil {
				m.UdpStats = &PodUdpStats{}
			}
			if err := m.UdpStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmstatStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VmstatStats == nil {
				m.VmstatStats = &PodVmstatStats{}
			}
			if err := m.VmstatStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GpuInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GpuInfo == nil {
				m.GpuInfo = &PodGpuInfo{}
			}
			if err := m.GpuInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodBuddyStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodBuddyStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodBuddyStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order0", wireType)
			}
			m.Order0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order0 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order1", wireType)
			}
			m.Order1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order1 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order2", wireType)
			}
			m.Order2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order2 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order3", wireType)
			}
			m.Order3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order3 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order4", wireType)
			}
			m.Order4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order4 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order5", wireType)
			}
			m.Order5 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order5 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order6", wireType)
			}
			m.Order6 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order6 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order7", wireType)
			}
			m.Order7 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order7 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order8", wireType)
			}
			m.Order8 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order8 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order9", wireType)
			}
			m.Order9 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order9 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order10", wireType)
			}
			m.Order10 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order10 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodCpuStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodCpuStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodCpuStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuUser", wireType)
			}
			m.CpuUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuUser |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuNice", wireType)
			}
			m.CpuNice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuNice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuSys", wireType)
			}
			m.CpuSys = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuSys |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuIdle", wireType)
			}
			m.CpuIdle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuIdle |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuIowait", wireType)
			}
			m.CpuIowait = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuIowait |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuSteal", wireType)
			}
			m.CpuSteal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuSteal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuHardirq", wireType)
			}
			m.CpuHardirq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuHardirq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuSoftirq", wireType)
			}
			m.CpuSoftirq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuSoftirq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuGuest", wireType)
			}
			m.CpuGuest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuGuest |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuNumber", wireType)
			}
			m.CpuNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodIOStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodIOStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodIOStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Part", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Part == nil {
				m.Part = &PartInfo{}
			}
			if err := m.Part.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blkio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blkio == nil {
				m.Blkio = &BlkIOInfo{}
			}
			if err := m.Blkio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			m.Major = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Major |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minor", wireType)
			}
			m.Minor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minor |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlkIOInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlkIOInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlkIOInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RdIos", wireType)
			}
			m.RdIos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RdIos |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RdMerges", wireType)
			}
			m.RdMerges = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RdMerges |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RdSectors", wireType)
			}
			m.RdSectors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RdSectors |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrIos", wireType)
			}
			m.WrIos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WrIos |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrMerges", wireType)
			}
			m.WrMerges = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WrMerges |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrSectors", wireType)
			}
			m.WrSectors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WrSectors |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrTicks", wireType)
			}
			m.WrTicks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WrTicks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticks", wireType)
			}
			m.Ticks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ticks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aveq", wireType)
			}
			m.Aveq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aveq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodIrqStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodIrqStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodIrqStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IrqNum", wireType)
			}
			m.IrqNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IrqNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IrqCount = append(m.IrqCount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAgent
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAgent
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IrqCount) == 0 {
					m.IrqCount = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IrqCount = append(m.IrqCount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IrqCount", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodLoadStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodLoadStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodLoadStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NrRunning", wireType)
			}
			m.NrRunning = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NrRunning |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadAvg_1", wireType)
			}
			m.LoadAvg_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoadAvg_1 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadAvg_5", wireType)
			}
			m.LoadAvg_5 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoadAvg_5 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadAvg_15", wireType)
			}
			m.LoadAvg_15 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoadAvg_15 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunningLoadAvg_1", wireType)
			}
			m.RunningLoadAvg_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunningLoadAvg_1 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunningLoadAvg_5", wireType)
			}
			m.RunningLoadAvg_5 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunningLoadAvg_5 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunningLoadAvg_15", wireType)
			}
			m.RunningLoadAvg_15 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunningLoadAvg_15 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NrThreads", wireType)
			}
			m.NrThreads = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NrThreads |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodMemStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodMemStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodMemStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frmkb", wireType)
			}
			m.Frmkb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frmkb |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avmkb", wireType)
			}
			m.Avmkb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Avmkb |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bufkb", wireType)
			}
			m.Bufkb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bufkb |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Camkb", wireType)
			}
			m.Camkb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Camkb |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tlmkb", wireType)
			}
			m.Tlmkb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tlmkb |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comkb", wireType)
			}
			m.Comkb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Comkb |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rsskb", wireType)
			}
			m.Rsskb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rsskb |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodMemxStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodMemxStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodMemxStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afile", wireType)
			}
			m.Afile = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Afile |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ifile", wireType)
			}
			m.Ifile = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ifile |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aanon", wireType)
			}
			m.Aanon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aanon |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ianon", wireType)
			}
			m.Ianon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ianon |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dirty", wireType)
			}
			m.Dirty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dirty |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Writeback", wireType)
			}
			m.Writeback = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Writeback |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rslab", wireType)
			}
			m.Rslab = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rslab |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uslab", wireType)
			}
			m.Uslab = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uslab |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mpfile", wireType)
			}
			m.Mpfile = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mpfile |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shmem", wireType)
			}
			m.Shmem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shmem |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodPartitionStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodPartitionStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodPartitionStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bsize", wireType)
			}
			m.Bsize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bsize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			m.Blocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Blocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bfree", wireType)
			}
			m.Bfree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bfree |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bavail", wireType)
			}
			m.Bavail = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bavail |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itotal", wireType)
			}
			m.Itotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ifree", wireType)
			}
			m.Ifree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ifree |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodPcswStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodPcswStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodPcswStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextSwitch", wireType)
			}
			m.ContextSwitch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContextSwitch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Newtask", wireType)
			}
			m.Newtask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Newtask |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curtask", wireType)
			}
			m.Curtask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Curtask |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtsk", wireType)
			}
			m.Rtsk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtsk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtsk", wireType)
			}
			m.Dtsk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dtsk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maxpid", wireType)
			}
			m.Maxpid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maxpid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodPercpuStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodPercpuStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodPercpuStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuUser", wireType)
			}
			m.CpuUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuUser |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuNice", wireType)
			}
			m.CpuNice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuNice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuSys", wireType)
			}
			m.CpuSys = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuSys |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuIdle", wireType)
			}
			m.CpuIdle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuIdle |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuIowait", wireType)
			}
			m.CpuIowait = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuIowait |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuSteal", wireType)
			}
			m.CpuSteal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuSteal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuHardirq", wireType)
			}
			m.CpuHardirq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuHardirq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuSoftirq", wireType)
			}
			m.CpuSoftirq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuSoftirq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuGuest", wireType)
			}
			m.CpuGuest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuGuest |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuTime", wireType)
			}
			m.CpuTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuRundelay", wireType)
			}
			m.CpuRundelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuRundelay |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuPcount", wireType)
			}
			m.CpuPcount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuPcount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodPercpuSchedStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodPercpuSchedStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodPercpuSchedStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedYield", wireType)
			}
			m.SchedYield = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchedYield |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedExpr", wireType)
			}
			m.SchedExpr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchedExpr |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sched", wireType)
			}
			m.Sched = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sched |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedIdle", wireType)
			}
			m.SchedIdle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchedIdle |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedIdlePercent", wireType)
			}
			m.SchedIdlePercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchedIdlePercent |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttwu", wireType)
			}
			m.Ttwu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ttwu |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TtwuLocal", wireType)
			}
			m.TtwuLocal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TtwuLocal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TtwuLocalPercent", wireType)
			}
			m.TtwuLocalPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TtwuLocalPercent |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cputime", wireType)
			}
			m.Cputime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cputime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rundelay", wireType)
			}
			m.Rundelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rundelay |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceCnt", wireType)
			}
			m.SliceCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SliceCnt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgCputime", wireType)
			}
			m.AvgCputime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvgCputime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgRundelay", wireType)
			}
			m.AvgRundelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvgRundelay |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodSoftirqStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodSoftirqStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodSoftirqStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timer", wireType)
			}
			m.Timer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timer |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nettx", wireType)
			}
			m.Nettx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nettx |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Netrx", wireType)
			}
			m.Netrx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Netrx |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sched", wireType)
			}
			m.Sched = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sched |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hrtim", wireType)
			}
			m.Hrtim = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hrtim |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rcu", wireType)
			}
			m.Rcu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rcu |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodSwapStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodSwapStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodSwapStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pswpin", wireType)
			}
			m.Pswpin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pswpin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pswpout", wireType)
			}
			m.Pswpout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pswpout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swaptotal", wireType)
			}
			m.Swaptotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Swaptotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swapfree", wireType)
			}
			m.Swapfree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Swapfree |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodTcpStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodTcpStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodTcpStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveOpens", wireType)
			}
			m.ActiveOpens = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveOpens |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassiveOpens", wireType)
			}
			m.PassiveOpens = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PassiveOpens |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InSegs", wireType)
			}
			m.InSegs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InSegs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutSegs", wireType)
			}
			m.OutSegs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutSegs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttemptFails", wireType)
			}
			m.AttemptFails = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttemptFails |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstabResets", wireType)
			}
			m.EstabResets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EstabResets |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrEstab", wireType)
			}
			m.CurrEstab = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrEstab |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetransSegs", wireType)
			}
			m.RetransSegs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetransSegs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InErrs", wireType)
			}
			m.InErrs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InErrs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutRsts", wireType)
			}
			m.OutRsts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutRsts |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodTcpxStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodTcpxStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodTcpxStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcprevq", wireType)
			}
			m.Tcprevq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tcprevq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcpsendq", wireType)
			}
			m.Tcpsendq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tcpsendq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcpest", wireType)
			}
			m.Tcpest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tcpest |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcptimewait", wireType)
			}
			m.Tcptimewait = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tcptimewait |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcpfinwait1", wireType)
			}
			m.Tcpfinwait1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tcpfinwait1 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcpfinwait2", wireType)
			}
			m.Tcpfinwait2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tcpfinwait2 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcplistenq", wireType)
			}
			m.Tcplistenq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tcplistenq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcplistenincq", wireType)
			}
			m.Tcplistenincq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tcplistenincq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcplistenover", wireType)
			}
			m.Tcplistenover = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tcplistenover |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcpconnest", wireType)
			}
			m.Tcpconnest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tcpconnest |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcpconndrop", wireType)
			}
			m.Tcpconndrop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tcpconndrop |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcpmbdrop", wireType)
			}
			m.Tcpmbdrop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tcpmbdrop |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcprexmitdrop", wireType)
			}
			m.Tcprexmitdrop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tcprexmitdrop |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcppersistdrop", wireType)
			}
			m.Tcppersistdrop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tcppersistdrop |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcpkadrop", wireType)
			}
			m.Tcpkadrop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tcpkadrop |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodTrafficStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodTrafficStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodTrafficStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytein", wireType)
			}
			m.Bytein = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bytein |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Byteout", wireType)
			}
			m.Byteout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Byteout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pktin", wireType)
			}
			m.Pktin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pktin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pktout", wireType)
			}
			m.Pktout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pktout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pkterrin", wireType)
			}
			m.Pkterrin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pkterrin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pktdrpin", wireType)
			}
			m.Pktdrpin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pktdrpin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pkterrout", wireType)
			}
			m.Pkterrout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pkterrout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pktdrpout", wireType)
			}
			m.Pktdrpout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pktdrpout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodUdpStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodUdpStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodUdpStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InDatagrams", wireType)
			}
			m.InDatagrams = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InDatagrams |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutDatagrams", wireType)
			}
			m.OutDatagrams = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutDatagrams |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoPorts", wireType)
			}
			m.NoPorts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoPorts |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InErrors", wireType)
			}
			m.InErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InErrors |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodVmstatStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodVmstatStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodVmstatStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pgin", wireType)
			}
			m.Pgin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pgin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pgout", wireType)
			}
			m.Pgout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pgout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pgfault", wireType)
			}
			m.Pgfault = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pgfault |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dirtied", wireType)
			}
			m.Dirtied = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dirtied |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocno", wireType)
			}
			m.Allocno = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Allocno |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmpfail", wireType)
			}
			m.Cmpfail = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cmpfail |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmpsucc", wireType)
			}
			m.Cmpsucc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cmpsucc |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failcnt", wireType)
			}
			m.Failcnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Failcnt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scan", wireType)
			}
			m.Scan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scan |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Steal", wireType)
			}
			m.Steal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Steal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsteal", wireType)
			}
			m.Dsteal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dsteal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vmeff", wireType)
			}
			m.Vmeff = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vmeff |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodGpuInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodGpuInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodGpuInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stat == nil {
				m.Stat = &GStat{}
			}
			if err := m.Stat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StMem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StMem == nil {
				m.StMem = &GMem{}
			}
			if err := m.StMem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uuid = append(m.Uuid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAgent
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAgent
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Uuid) == 0 {
					m.Uuid = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uuid = append(m.Uuid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &GConfigInfo{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &GOtherInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Util", wireType)
			}
			m.Util = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Util |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemUtil", wireType)
			}
			m.MemUtil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemUtil |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NrData", wireType)
			}
			m.NrData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NrData |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GMem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GMem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GMem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Used", wireType)
			}
			m.Used = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Used |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Free", wireType)
			}
			m.Free = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Free |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GConfigInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GConfigInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GConfigInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VbiosVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VbiosVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DriverVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComputeMode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComputeMode = append(m.ComputeMode[:0], dAtA[iNdEx:postIndex]...)
			if m.ComputeMode == nil {
				m.ComputeMode = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pstate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pstate = append(m.Pstate[:0], dAtA[iNdEx:postIndex]...)
			if m.Pstate == nil {
				m.Pstate = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerLimit", wireType)
			}
			m.PowerLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PowerLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmMaxClocks", wireType)
			}
			m.SmMaxClocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SmMaxClocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemMaxBlocks", wireType)
			}
			m.MemMaxBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemMaxBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GOtherInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GOtherInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GOtherInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmClocks", wireType)
			}
			m.SmClocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SmClocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemClocks", wireType)
			}
			m.MemClocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemClocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerDraw", wireType)
			}
			m.PowerDraw = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PowerDraw |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Temperature", wireType)
			}
			m.Temperature = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Temperature |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseStats == nil {
				m.BaseStats = &ContainerBaseStats{}
			}
			if err := m.BaseStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcStats = append(m.ProcStats, &ProcessStats{})
			if err := m.ProcStats[len(m.ProcStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerBaseStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerBaseStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerBaseStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupCpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CgroupCpu == nil {
				m.CgroupCpu = &ContainerCgroupCpu{}
			}
			if err := m.CgroupCpu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupCpushare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CgroupCpushare == nil {
				m.CgroupCpushare = &ContainerCgroupCpushare{}
			}
			if err := m.CgroupCpushare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupIo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CgroupIo = append(m.CgroupIo, &ContainerCgroupIO{})
			if err := m.CgroupIo[len(m.CgroupIo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupIotime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CgroupIotime = append(m.CgroupIotime, &ContainerCgroupIOTime{})
			if err := m.CgroupIotime[len(m.CgroupIotime)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupIox", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CgroupIox = append(m.CgroupIox, &ContainerCgroupIOX{})
			if err := m.CgroupIox[len(m.CgroupIox)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupLoad", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CgroupLoad == nil {
				m.CgroupLoad = &ContainerCgroupLoad{}
			}
			if err := m.CgroupLoad.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupMem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CgroupMem == nil {
				m.CgroupMem = &ContainerCgroupMem{}
			}
			if err := m.CgroupMem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupMemdelay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CgroupMemdelay == nil {
				m.CgroupMemdelay = &ContainerCgroupMemDelay{}
			}
			if err := m.CgroupMemdelay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupLatencyStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CgroupLatencyStat == nil {
				m.CgroupLatencyStat = &ContainerCgroupLatencyStat{}
			}
			if err := m.CgroupLatencyStat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupMemx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CgroupMemx == nil {
				m.CgroupMemx = &ContainerCgroupMemx{}
			}
			if err := m.CgroupMemx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupPcsw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CgroupPcsw == nil {
				m.CgroupPcsw = &ContainerCgroupPcsw{}
			}
			if err := m.CgroupPcsw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupPercpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CgroupPercpu == nil {
				m.CgroupPercpu = &ContainerCgroupPercpu{}
			}
			if err := m.CgroupPercpu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupSchedbvt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CgroupSchedbvt == nil {
				m.CgroupSchedbvt = &ContainerCgroupSchedbvt{}
			}
			if err := m.CgroupSchedbvt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupSchedcg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CgroupSchedcg == nil {
				m.CgroupSchedcg = &ContainerCgroupSchedcg{}
			}
			if err := m.CgroupSchedcg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CgroupTask == nil {
				m.CgroupTask = &ContainerCgroupSchedTask{}
			}
			if err := m.CgroupTask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupTcpStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CgroupTcpStats == nil {
				m.CgroupTcpStats = &ContainerCgroupTcpStats{}
			}
			if err := m.CgroupTcpStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupTcpxStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CgroupTcpxStats == nil {
				m.CgroupTcpxStats = &ContainerCgroupTcpxStats{}
			}
			if err := m.CgroupTcpxStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupTrafficStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CgroupTrafficStats == nil {
				m.CgroupTrafficStats = &ContainerCgroupTrafficStats{}
			}
			if err := m.CgroupTrafficStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupUdpStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CgroupUdpStats == nil {
				m.CgroupUdpStats = &ContainerCgroupUdpStats{}
			}
			if err := m.CgroupUdpStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupVm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CgroupVm == nil {
				m.CgroupVm = &ContainerCgroupVm{}
			}
			if err := m.CgroupVm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PartitionStats == nil {
				m.PartitionStats = &ContainerPartitionStats{}
			}
			if err := m.PartitionStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerCgroupCpu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerCgroupCpu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerCgroupCpu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			m.User = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.User |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sys", wireType)
			}
			m.Sys = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sys |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nice", wireType)
			}
			m.Nice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iowait", wireType)
			}
			m.Iowait = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Iowait |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idle", wireType)
			}
			m.Idle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idle |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hirq", wireType)
			}
			m.Hirq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hirq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sirq", wireType)
			}
			m.Sirq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sirq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Steal", wireType)
			}
			m.Steal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Steal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTime", wireType)
			}
			m.TotalTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quota", wireType)
			}
			m.Quota = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quota |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ncpu", wireType)
			}
			m.Ncpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ncpu |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JdkMaxProcessLimit", wireType)
			}
			m.JdkMaxProcessLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JdkMaxProcessLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			m.Shares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shares |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriSteal", wireType)
			}
			m.OriSteal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriSteal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerCgroupCpushare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerCgroupCpushare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerCgroupCpushare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NrThrottled", wireType)
			}
			m.NrThrottled = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NrThrottled |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NrPeriod", wireType)
			}
			m.NrPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NrPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodTime", wireType)
			}
			m.PeriodTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThrottleTime", wireType)
			}
			m.ThrottleTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThrottleTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsServe", wireType)
			}
			m.OsServe = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OsServe |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnCpu", wireType)
			}
			m.OnCpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnCpu |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GOther", wireType)
			}
			m.GOther = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GOther |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GSibling", wireType)
			}
			m.GSibling = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GSibling |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerCgroupIO) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerCgroupIO: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerCgroupIO: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rio", wireType)
			}
			m.Rio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rio |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wio", wireType)
			}
			m.Wio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wio |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rbytes", wireType)
			}
			m.Rbytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rbytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wbytes", wireType)
			}
			m.Wbytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wbytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IoQueued", wireType)
			}
			m.IoQueued = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IoQueued |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitTime", wireType)
			}
			m.WaitTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WaitTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceTime", wireType)
			}
			m.ServiceTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			m.Major = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Major |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minor", wireType)
			}
			m.Minor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minor |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerCgroupIOTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerCgroupIOTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerCgroupIOTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadServiceTime", wireType)
			}
			m.ReadServiceTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadServiceTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteServiceTime", wireType)
			}
			m.WriteServiceTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WriteServiceTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadWaitTime", wireType)
			}
			m.ReadWaitTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadWaitTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteWaitTime", wireType)
			}
			m.WriteWaitTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WriteWaitTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncServiceTime", wireType)
			}
			m.SyncServiceTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncServiceTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsyncServiceTime", wireType)
			}
			m.AsyncServiceTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AsyncServiceTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncWaitTime", wireType)
			}
			m.SyncWaitTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncWaitTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsyncWaitTime", wireType)
			}
			m.AsyncWaitTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AsyncWaitTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IoReadComplete", wireType)
			}
			m.IoReadComplete = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IoReadComplete |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IoWriteCompelte", wireType)
			}
			m.IoWriteCompelte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IoWriteCompelte |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IoSyncComplete", wireType)
			}
			m.IoSyncComplete = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IoSyncComplete |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IoAsyncComplete", wireType)
			}
			m.IoAsyncComplete = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IoAsyncComplete |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			m.Major = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Major |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minor", wireType)
			}
			m.Minor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minor |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerCgroupIOX) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerCgroupIOX: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerCgroupIOX: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sio", wireType)
			}
			m.Sio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sio |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asio", wireType)
			}
			m.Asio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Asio |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Syncbytes", wireType)
			}
			m.Syncbytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Syncbytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asyncbytes", wireType)
			}
			m.Asyncbytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Asyncbytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaWrites", wireType)
			}
			m.MetaWrites = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetaWrites |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IoUp", wireType)
			}
			m.IoUp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IoUp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IoDown", wireType)
			}
			m.IoDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IoDown |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			m.Major = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Major |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minor", wireType)
			}
			m.Minor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minor |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerCgroupLoad) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerCgroupLoad: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerCgroupLoad: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load1", wireType)
			}
			m.Load1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Load1 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load5", wireType)
			}
			m.Load5 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Load5 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load15", wireType)
			}
			m.Load15 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Load15 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RLoad1", wireType)
			}
			m.RLoad1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RLoad1 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RLoad5", wireType)
			}
			m.RLoad5 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RLoad5 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RLoad15", wireType)
			}
			m.RLoad15 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RLoad15 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerCgroupMem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerCgroupMem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerCgroupMem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rss", wireType)
			}
			m.Rss = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rss |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cache", wireType)
			}
			m.Cache = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cache |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avail", wireType)
			}
			m.Avail = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Avail |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slab", wireType)
			}
			m.Slab = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slab |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swap", wireType)
			}
			m.Swap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Swap |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			m.Map = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Map |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerCgroupMemDelay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerCgroupMemDelay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerCgroupMemDelay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateDirect", wireType)
			}
			m.AggregateDirect = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AggregateDirect |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateBackgroud", wireType)
			}
			m.AggregateBackgroud = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AggregateBackgroud |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateTotal", wireType)
			}
			m.AggregateTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AggregateTotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdsSomeLoad1", wireType)
			}
			m.MdsSomeLoad1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MdsSomeLoad1 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdsSomeLoad5", wireType)
			}
			m.MdsSomeLoad5 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MdsSomeLoad5 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdsSomeLoad15", wireType)
			}
			m.MdsSomeLoad15 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MdsSomeLoad15 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdsFullLoad1", wireType)
			}
			m.MdsFullLoad1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MdsFullLoad1 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdsFullLoad5", wireType)
			}
			m.MdsFullLoad5 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MdsFullLoad5 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdsFullLoad15", wireType)
			}
			m.MdsFullLoad15 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MdsFullLoad15 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DelayData = append(m.DelayData, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAgent
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAgent
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DelayData) == 0 {
					m.DelayData = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DelayData = append(m.DelayData, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayData", wireType)
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitIf", wireType)
			}
			m.WaitIf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WaitIf |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WbWait", wireType)
			}
			m.WbWait = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WbWait |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitOnPageWb", wireType)
			}
			m.WaitOnPageWb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WaitOnPageWb |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerCgroupLatencyStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerCgroupLatencyStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerCgroupLatencyStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ticks = append(m.Ticks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAgent
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAgent
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ticks) == 0 {
					m.Ticks = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ticks = append(m.Ticks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticks", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerCgroupMemx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerCgroupMemx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerCgroupMemx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aanon", wireType)
			}
			m.Aanon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aanon |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ianon", wireType)
			}
			m.Ianon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ianon |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Afile", wireType)
			}
			m.Afile = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Afile |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ifile", wireType)
			}
			m.Ifile = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ifile |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mpfile", wireType)
			}
			m.Mpfile = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mpfile |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dirty", wireType)
			}
			m.Dirty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dirty |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wback", wireType)
			}
			m.Wback = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wback |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slab", wireType)
			}
			m.Slab = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slab |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lock", wireType)
			}
			m.Lock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rss", wireType)
			}
			m.Rss = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rss |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Huge", wireType)
			}
			m.Huge = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Huge |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swap", wireType)
			}
			m.Swap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Swap |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerCgroupPcsw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerCgroupPcsw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerCgroupPcsw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NTasks", wireType)
			}
			m.NTasks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NTasks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NRunning", wireType)
			}
			m.NRunning = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NRunning |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NDrunning", wireType)
			}
			m.NDrunning = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NDrunning |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NSwch", wireType)
			}
			m.NSwch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NSwch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTask", wireType)
			}
			m.NewTask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewTask |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPid", wireType)
			}
			m.MaxPid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NrVolSwch", wireType)
			}
			m.NrVolSwch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NrVolSwch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NrInvolSwch", wireType)
			}
			m.NrInvolSwch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NrInvolSwch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerCgroupPercpu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerCgroupPercpu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerCgroupPercpu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ncpu", wireType)
			}
			m.Ncpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ncpu |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercpuStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PercpuStats = append(m.PercpuStats, &ContainerPercpuStats{})
			if err := m.PercpuStats[len(m.PercpuStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerPercpuStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerPercpuStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerPercpuStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuUser", wireType)
			}
			m.CpuUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuUser |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuSys", wireType)
			}
			m.CpuSys = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuSys |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuUsage", wireType)
			}
			m.CpuUsage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuUsage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CpuName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerCgroupSchedbvt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerCgroupSchedbvt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerCgroupSchedbvt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchDelayStrict", wireType)
			}
			m.BatchDelayStrict = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchDelayStrict |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrictNoiseCleanBatch", wireType)
			}
			m.StrictNoiseCleanBatch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StrictNoiseCleanBatch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNoiseCleanDelayed", wireType)
			}
			m.BatchNoiseCleanDelayed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNoiseCleanDelayed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ncpu", wireType)
			}
			m.Ncpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ncpu |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerCgroupSchedcg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerCgroupSchedcg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerCgroupSchedcg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CgDelayMs = append(m.CgDelayMs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAgent
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAgent
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CgDelayMs) == 0 {
					m.CgDelayMs = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CgDelayMs = append(m.CgDelayMs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CgDelayMs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerCgroupSchedTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerCgroupSchedTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerCgroupSchedTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TasksDelayMs = append(m.TasksDelayMs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAgent
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAgent
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TasksDelayMs) == 0 {
					m.TasksDelayMs = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TasksDelayMs = append(m.TasksDelayMs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TasksDelayMs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerCgroupTcpStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerCgroupTcpStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerCgroupTcpStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveOpens", wireType)
			}
			m.ActiveOpens = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveOpens |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassiveOpens", wireType)
			}
			m.PassiveOpens = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PassiveOpens |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InSegs", wireType)
			}
			m.InSegs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InSegs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutSegs", wireType)
			}
			m.OutSegs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutSegs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttemptFails", wireType)
			}
			m.AttemptFails = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttemptFails |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstabResets", wireType)
			}
			m.EstabResets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EstabResets |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrEstab", wireType)
			}
			m.CurrEstab = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrEstab |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetransSegs", wireType)
			}
			m.RetransSegs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetransSegs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InErrs", wireType)
			}
			m.InErrs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InErrs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutRsts", wireType)
			}
			m.OutRsts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutRsts |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerCgroupTcpxStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerCgroupTcpxStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerCgroupTcpxStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpLostRetrans", wireType)
			}
			m.TcpLostRetrans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpLostRetrans |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpSynRetrans", wireType)
			}
			m.TcpSynRetrans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpSynRetrans |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpFastRetrans", wireType)
			}
			m.TcpFastRetrans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpFastRetrans |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpForwardRetrans", wireType)
			}
			m.TcpForwardRetrans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpForwardRetrans |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpSlowstartRetrans", wireType)
			}
			m.TcpSlowstartRetrans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpSlowstartRetrans |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpListenOverflow", wireType)
			}
			m.TcpListenOverflow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpListenOverflow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpListenDrop", wireType)
			}
			m.TcpListenDrop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpListenDrop |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpAbortData", wireType)
			}
			m.TcpAbortData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpAbortData |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpAbortClose", wireType)
			}
			m.TcpAbortClose = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpAbortClose |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpAbortMem", wireType)
			}
			m.TcpAbortMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpAbortMem |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpAbortTimeout", wireType)
			}
			m.TcpAbortTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpAbortTimeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpAbortLinger", wireType)
			}
			m.TcpAbortLinger = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpAbortLinger |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerCgroupTrafficStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerCgroupTrafficStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerCgroupTrafficStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytein", wireType)
			}
			m.Bytein = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bytein |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Byteout", wireType)
			}
			m.Byteout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Byteout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pktin", wireType)
			}
			m.Pktin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pktin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pktout", wireType)
			}
			m.Pktout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pktout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pkterrin", wireType)
			}
			m.Pkterrin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pkterrin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pktdrpin", wireType)
			}
			m.Pktdrpin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pktdrpin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pkterrout", wireType)
			}
			m.Pkterrout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pkterrout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pktdrpout", wireType)
			}
			m.Pktdrpout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pktdrpout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerCgroupUdpStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerCgroupUdpStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerCgroupUdpStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InDatagrams", wireType)
			}
			m.InDatagrams = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InDatagrams |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutDatagrams", wireType)
			}
			m.OutDatagrams = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutDatagrams |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoPorts", wireType)
			}
			m.NoPorts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoPorts |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InErrors", wireType)
			}
			m.InErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InErrors |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerCgroupVm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerCgroupVm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerCgroupVm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageIn", wireType)
			}
			m.PageIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageIn |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageOut", wireType)
			}
			m.PageOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageOut |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageFault", wireType)
			}
			m.PageFault = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageFault |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Steal", wireType)
			}
			m.Steal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Steal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsteal", wireType)
			}
			m.Dsteal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dsteal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scan", wireType)
			}
			m.Scan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scan |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dirty", wireType)
			}
			m.Dirty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dirty |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failcnt", wireType)
			}
			m.Failcnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Failcnt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocstall", wireType)
			}
			m.Allocstall = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Allocstall |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerPartitionStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerPartitionStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerPartitionStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bsize", wireType)
			}
			m.Bsize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bsize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			m.Blocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Blocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bfree", wireType)
			}
			m.Bfree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bfree |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bavail", wireType)
			}
			m.Bavail = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bavail |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itotal", wireType)
			}
			m.Itotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ifree", wireType)
			}
			m.Ifree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ifree |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PidStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PidStats == nil {
				m.PidStats = &ProcessPidStats{}
			}
			if err := m.PidStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupSched", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CgroupSched == nil {
				m.CgroupSched = &ProcessCgroupSched{}
			}
			if err := m.CgroupSched.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcCpuStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProcCpuStats == nil {
				m.ProcCpuStats = &ProcessProcCpuStats{}
			}
			if err := m.ProcCpuStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcIoStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProcIoStats == nil {
				m.ProcIoStats = &ProcessProcIOStats{}
			}
			if err := m.ProcIoStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcMemStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProcMemStats == nil {
				m.ProcMemStats = &ProcessProcMemStats{}
			}
			if err := m.ProcMemStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessPidStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessPidStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessPidStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCpu", wireType)
			}
			m.UserCpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserCpu |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysCpu", wireType)
			}
			m.SysCpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SysCpu |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mem", wireType)
			}
			m.Mem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mem |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadBytes", wireType)
			}
			m.ReadBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteBytes", wireType)
			}
			m.WriteBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WriteBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fdcnt", wireType)
			}
			m.Fdcnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fdcnt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minflt", wireType)
			}
			m.Minflt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minflt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Majflt", wireType)
			}
			m.Majflt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Majflt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thread", wireType)
			}
			m.Thread = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Thread |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessCgroupSched) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessCgroupSched: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessCgroupSched: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TasksDelayMs = append(m.TasksDelayMs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAgent
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAgent
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TasksDelayMs) == 0 {
					m.TasksDelayMs = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TasksDelayMs = append(m.TasksDelayMs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TasksDelayMs", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BvtDelay", wireType)
			}
			m.BvtDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BvtDelay |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoiseKickDelay", wireType)
			}
			m.NoiseKickDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoiseKickDelay |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossTime", wireType)
			}
			m.LossTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LossTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessProcCpuStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessProcCpuStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessProcCpuStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCpu", wireType)
			}
			m.UserCpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserCpu |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysCpu", wireType)
			}
			m.SysCpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SysCpu |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlkioDelay", wireType)
			}
			m.BlkioDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlkioDelay |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunOnCpu", wireType)
			}
			m.RunOnCpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunOnCpu |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitOnRq", wireType)
			}
			m.WaitOnRq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WaitOnRq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NThreads", wireType)
			}
			m.NThreads = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NThreads |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessProcIOStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessProcIOStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessProcIOStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rchar", wireType)
			}
			m.Rchar = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rchar |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wchar", wireType)
			}
			m.Wchar = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wchar |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rbytes", wireType)
			}
			m.Rbytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rbytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wbytes", wireType)
			}
			m.Wbytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wbytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iolat", wireType)
			}
			m.Iolat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Iolat |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Syscr", wireType)
			}
			m.Syscr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Syscr |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Syscw", wireType)
			}
			m.Syscw = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Syscw |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessProcMemStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessProcMemStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessProcMemStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			m.Usage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Usage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cache", wireType)
			}
			m.Cache = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cache |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Anon", wireType)
			}
			m.Anon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Anon |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shmem", wireType)
			}
			m.Shmem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shmem |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lock", wireType)
			}
			m.Lock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swp", wireType)
			}
			m.Swp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Swp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSwp", wireType)
			}
			m.TotalSwp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSwp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAgent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAgent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAgent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAgent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAgent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAgent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAgent = fmt.Errorf("proto: unexpected end of group")
)
